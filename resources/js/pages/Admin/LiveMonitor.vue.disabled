<template>
  <AdminLayout pageTitle="Live Monitor">
    <div class="container mx-auto px-4 py-8">
      <!-- Live Monitor Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Live Monitor</h1>
          <p class="text-gray-600 dark:text-gray-300">Real-time monitoring of user activity and system performance</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-4 mt-4 md:mt-0">
          <button 
            @click="forceRefresh" 
            class="px-4 py-2 bg-blue-600 dark:bg-blue-700 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors shadow-sm dark:shadow-gray-900/20"
            :disabled="isRefreshing"
          >
            {{ isRefreshing ? 'Refreshing...' : 'Refresh Data' }}
          </button>
          <div class="flex items-center gap-2 px-3 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm">
            <div :class="[
              'w-3 h-3 rounded-full',
              isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'
            ]"></div>
            <span class="text-sm text-gray-600 dark:text-gray-300">
              {{ isConnected ? 'Connected' : 'Disconnected' }}
            </span>
          </div>
        </div>
      </div>

      <!-- Real-time Stats Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- Online Users -->
        <Card class="relative overflow-hidden bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle class="text-sm font-medium text-gray-900 dark:text-gray-100">Online Users</CardTitle>
            <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          </CardHeader>
          <CardContent>
            <div class="text-2xl font-bold text-gray-900 dark:text-white">{{ totalOnlineCount }}</div>
            <p class="text-xs text-gray-600 dark:text-gray-400">
              {{ authenticatedUsers.length }} authenticated, {{ anonymousUsers.length }} anonymous
            </p>
          </CardContent>
        </Card>

        <!-- Real-time Purchases -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle class="text-sm font-medium text-gray-900 dark:text-gray-100">Purchases Today</CardTitle>
            <DollarSign class="h-4 w-4 text-gray-600 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div class="text-2xl font-bold text-gray-900 dark:text-white">{{ todayPurchases.length }}</div>
            <p class="text-xs text-gray-600 dark:text-gray-400">
              +{{ recentPurchases.length }} in last hour
            </p>
          </CardContent>
        </Card>

        <!-- Active Quiz Attempts -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle class="text-sm font-medium text-gray-900 dark:text-gray-100">Active Quiz Attempts</CardTitle>
            <BookOpen class="h-4 w-4 text-gray-600 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div class="text-2xl font-bold text-gray-900 dark:text-white">{{ activeQuizAttempts.length }}</div>
            <p class="text-xs text-gray-600 dark:text-gray-400">
              Currently in progress
            </p>
          </CardContent>
        </Card>

        <!-- System Load -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle class="text-sm font-medium text-gray-900 dark:text-gray-100">System Load</CardTitle>
            <Activity class="h-4 w-4 text-gray-600 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div class="text-2xl font-bold text-gray-900 dark:text-white">{{ systemMetrics.cpu_usage }}%</div>
            <p class="text-xs text-gray-600 dark:text-gray-400">
              CPU usage
            </p>
          </CardContent>
        </Card>
      </div>

      <!-- Real-time Content Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Online Users List -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="border-b border-gray-200 dark:border-gray-700">
            <CardTitle class="text-gray-900 dark:text-white">Online Users</CardTitle>
            <CardDescription class="text-gray-600 dark:text-gray-400">Users currently active on the platform</CardDescription>
          </CardHeader>
          <CardContent>
            <div class="space-y-4 max-h-96 overflow-y-auto">
              <!-- Authenticated Users Section -->
              <div v-if="authenticatedUsers.length > 0">
                <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Authenticated Users ({{ authenticatedUsers.length }})</h4>
                <div v-for="user in authenticatedUsers" :key="user.id" 
                     class="flex items-center gap-4 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 cursor-pointer transition-colors"
                     @click="openUserDetail(user)">
                  <div class="relative">
                    <div class="w-10 h-10 bg-blue-500 dark:bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold">
                      {{ user.name?.charAt(0)?.toUpperCase() || 'U' }}
                    </div>
                    <div class="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white dark:border-gray-800 rounded-full"></div>
                  </div>
                  <div class="flex-1">
                    <p class="text-sm font-medium text-gray-900 dark:text-white">{{ user.name || 'Anonymous' }}</p>
                    <p class="text-xs text-gray-600 dark:text-gray-400">{{ user.email }}</p>
                    <p class="text-xs text-gray-600 dark:text-gray-400">
                      Active for {{ formatDynamicDuration(user) }}
                    </p>
                  </div>
                  <div class="text-right">
                    <p class="text-xs text-gray-600 dark:text-gray-400">{{ user.current_page || 'Dashboard' }}</p>
                    <p class="text-xs text-green-600 dark:text-green-400">Online</p>
                    <div class="text-xs text-blue-600 dark:text-blue-400 mt-1">Click to track</div>
                  </div>
                </div>
              </div>
              
              <!-- Anonymous Users Section -->
              <div v-if="anonymousUsers.length > 0" :class="{ 'mt-6': authenticatedUsers.length > 0 }">
                <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Anonymous Users ({{ anonymousUsers.length }})</h4>
                <div v-for="user in anonymousUsers" :key="user.tracking_id" 
                     class="flex items-center gap-4 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 cursor-pointer transition-colors bg-gray-50 dark:bg-gray-700/30">
                  <div class="relative">
                    <div class="w-10 h-10 bg-gray-500 dark:bg-gray-600 rounded-full flex items-center justify-center text-white font-semibold">
                      {{ user.tracking_id?.charAt(0)?.toUpperCase() || 'A' }}
                    </div>
                    <div class="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white dark:border-gray-700 rounded-full"></div>
                  </div>
                  <div class="flex-1">
                    <p class="text-sm font-medium text-gray-900 dark:text-white">{{ user.tracking_id || 'Anonymous User' }}</p>
                    <p class="text-xs text-gray-600 dark:text-gray-400">{{ user.ip_address || 'Unknown IP' }}</p>
                    <p class="text-xs text-gray-600 dark:text-gray-400">
                      Active for {{ formatAnonymousDuration(user) }}
                    </p>
                  </div>
                  <div class="text-right">
                    <p class="text-xs text-gray-600 dark:text-gray-400">{{ getPageFromUrl(user.page_url) || 'Unknown' }}</p>
                    <p class="text-xs text-green-600 dark:text-green-400">Online</p>
                    <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">Anonymous</div>
                  </div>
                </div>
              </div>
              
              <div v-if="authenticatedUsers.length === 0 && anonymousUsers.length === 0" class="text-center py-8">
                <p class="text-sm text-gray-600 dark:text-gray-400">No users currently online</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <!-- Recent Purchase Notifications -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="border-b border-gray-200 dark:border-gray-700">
            <CardTitle class="text-gray-900 dark:text-white">Recent Purchases</CardTitle>
            <CardDescription class="text-gray-600 dark:text-gray-400">Live purchase notifications</CardDescription>
          </CardHeader>
          <CardContent>
            <div class="space-y-4 max-h-96 overflow-y-auto">
              <div v-for="purchase in recentPurchases" :key="purchase.id" class="flex items-start gap-4 p-3 rounded-lg border border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20">
                <div class="w-10 h-10 bg-green-500 dark:bg-green-600 rounded-full flex items-center justify-center">
                  <DollarSign class="h-5 w-5 text-white" />
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-900 dark:text-white">{{ purchase.user_name }}</p>
                  <p class="text-xs text-gray-600 dark:text-gray-400">{{ purchase.product_name }}</p>
                  <p class="text-xs text-gray-600 dark:text-gray-400">{{ formatDate(purchase.created_at) }}</p>
                </div>
                <div class="text-right">
                  <p class="text-sm font-semibold text-green-600 dark:text-green-400">${{ purchase.amount }}</p>
                  <Badge variant="success" class="text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 border-green-200 dark:border-green-800">New</Badge>
                </div>
              </div>
              <div v-if="recentPurchases.length === 0" class="text-center py-8">
                <p class="text-sm text-gray-600 dark:text-gray-400">No recent purchases</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <!-- Activity Feed and Quiz Attempts -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Live Activity Feed -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="border-b border-gray-200 dark:border-gray-700">
            <CardTitle class="text-gray-900 dark:text-white">Live Activity Feed</CardTitle>
            <CardDescription class="text-gray-600 dark:text-gray-400">Real-time user activity updates</CardDescription>
          </CardHeader>
          <CardContent>
            <div class="space-y-4 max-h-96 overflow-y-auto">
              <div v-for="activity in recentActivities" :key="`${activity.user_id}-${activity.timestamp}`" class="flex items-start gap-4 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                <div :class="[
                  'w-8 h-8 rounded-full flex items-center justify-center',
                  getActivityColor(activity.action)
                ]">
                  <component :is="getActivityIcon(activity.action)" class="h-4 w-4 text-white" />
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-900 dark:text-white">{{ activity.user_name }}</p>
                  <p class="text-xs text-gray-600 dark:text-gray-400">{{ activity.description }}</p>
                  <p class="text-xs text-gray-600 dark:text-gray-400">{{ formatDate(activity.timestamp) }}</p>
                </div>
              </div>
              <div v-if="recentActivities.length === 0" class="text-center py-8">
                <p class="text-sm text-gray-600 dark:text-gray-400">No recent activity</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <!-- Active Quiz Attempts -->
        <Card class="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/20">
          <CardHeader class="border-b border-gray-200 dark:border-gray-700">
            <CardTitle class="text-gray-900 dark:text-white">Active Quiz Attempts</CardTitle>
            <CardDescription class="text-gray-600 dark:text-gray-400">Users currently taking quizzes</CardDescription>
          </CardHeader>
          <CardContent>
            <div class="space-y-4 max-h-96 overflow-y-auto">
              <div v-for="attempt in activeQuizAttempts" :key="attempt.id" class="flex items-start gap-4 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                <div class="w-10 h-10 bg-blue-500 dark:bg-blue-600 rounded-full flex items-center justify-center">
                  <BookOpen class="h-5 w-5 text-white" />
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-900 dark:text-white">{{ attempt.user_name }}</p>
                  <p class="text-xs text-gray-600 dark:text-gray-400">{{ attempt.quiz_title }}</p>
                  <p class="text-xs text-gray-600 dark:text-gray-400">
                    Started {{ formatDate(attempt.started_at) }}
                  </p>
                  <div class="mt-2">
                    <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                      <div 
                        class="bg-blue-600 dark:bg-blue-500 h-2 rounded-full transition-all duration-300" 
                        :style="`width: ${attempt.progress}%`"
                      ></div>
                    </div>
                    <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      {{ attempt.current_question }}/{{ attempt.total_questions }} questions
                    </p>
                  </div>
                </div>
                <div class="text-right">
                  <Badge variant="outline" class="text-xs border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300">In Progress</Badge>
                </div>
              </div>
              <div v-if="activeQuizAttempts.length === 0" class="text-center py-8">
                <p class="text-sm text-gray-600 dark:text-gray-400">No active quiz attempts</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, onMounted, onUnmounted, computed, watch } from 'vue'
import { router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { useTheme } from '@/Composables/useTheme'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/Components/shadcn/ui/card'
import { Badge } from '@/Components/shadcn/ui/badge'
import { 
  Users, 
  DollarSign, 
  BookOpen, 
  Activity,
  UserPlus,
  ShoppingCart,
  GraduationCap,
  Play,
  Award
} from 'lucide-vue-next'

// Props and data
const props = defineProps({
  realtimeData: Object,
  initialData: Object
})

// Use centralized theme system
const { isDarkMode } = useTheme()

// Reactive state
const isConnected = ref(false)
const isRefreshing = ref(false)
const authenticatedUsers = ref([])
const anonymousUsers = ref([])
const recentPurchases = ref(props.initialRecentPurchases || [])
const activeQuizAttempts = ref(props.initialActiveQuizAttempts || [])
const recentActivities = ref(props.initialRecentActivities || [])
const systemMetrics = ref(props.initialSystemMetrics || [])

// Dynamic time tracking
const currentTime = ref(new Date())
let timeUpdateInterval = null

// User detail modal state
const showUserDetail = ref(false)
const selectedUser = ref(null)

// Computed properties
const totalOnlineCount = computed(() => {
  return authenticatedUsers.value.length + anonymousUsers.value.length
})

const todayPurchases = computed(() => {
  const today = new Date().toDateString()
  return recentPurchases.value.filter(purchase => 
    new Date(purchase.created_at).toDateString() === today
  )
})

// Watch for changes to online users
watch(authenticatedUsers, (newUsers, oldUsers) => {
  // No console.log here
}, { deep: true })

watch(anonymousUsers, (newUsers, oldUsers) => {
  // No console.log here
}, { deep: true })

// Real-time connection status (uses AdminLayout connections)
onMounted(() => {
  // Initialize data from props
  if (props.initialOnlineUsers) {
    authenticatedUsers.value = props.initialOnlineUsers.filter(u => !u.tracking_id)
    anonymousUsers.value = props.initialOnlineUsers.filter(u => u.tracking_id)
    console.log('📊 Initialized with:', authenticatedUsers.value.length, 'authenticated,', anonymousUsers.value.length, 'anonymous users')
  }
  
  // Check if AdminLayout has established connections
  checkLayoutConnections()
  
  // Set up event listeners for AdminLayout events
  setupLayoutEventListeners()
  
  // Refresh data every 30 seconds as fallback
  setInterval(refreshData, 30000)
  
  // Start time tracking for dynamic durations
  startTimeTracking()
})

onUnmounted(() => {
  // No need to disconnect - AdminLayout handles this
  stopTimeTracking()
})

const checkLayoutConnections = () => {
  // Check if Echo is connected via AdminLayout
  if (window.Echo && window.Echo.connector.pusher.connection.state === 'connected') {
    isConnected.value = true
    console.log('✅ Using AdminLayout WebSocket connections')
    
    // Try to get current online users from AdminLayout
    setTimeout(() => {
      if (window.getAdminOnlineUsers) {
        const users = window.getAdminOnlineUsers()
        console.log('📊 Getting initial online users from AdminLayout:', users.length)
        authenticatedUsers.value = users.filter(u => u.role === 'authenticated')
        anonymousUsers.value = users.filter(u => u.role === 'anonymous')
      }
    }, 1000)
  } else {
    isConnected.value = false
    console.log('❌ AdminLayout WebSocket not connected')
  }
  
  // Monitor connection state changes
  if (window.Echo) {
    window.Echo.connector.pusher.connection.bind('connected', () => {
      isConnected.value = true
    })
    
    window.Echo.connector.pusher.connection.bind('disconnected', () => {
      isConnected.value = false
    })
  }
}

const setupLayoutEventListeners = () => {
  // Listen for custom events from AdminLayout
  window.addEventListener('admin-online-users-updated', (event) => {
    console.log('📊 Online users updated:', event.detail)
    authenticatedUsers.value = event.detail.users.filter(u => u.role === 'authenticated')
    anonymousUsers.value = event.detail.users.filter(u => u.role === 'anonymous')
  })
  
  window.addEventListener('admin-user-joined', (event) => {
    console.log('🟢 User joined dashboard:', event.detail)
    const user = event.detail.user
    if (user && !authenticatedUsers.value.find(u => u.id === user.id) && !anonymousUsers.value.find(u => u.tracking_id === user.tracking_id)) {
      if (user.role === 'authenticated') {
        authenticatedUsers.value.unshift(user)
      } else {
        anonymousUsers.value.unshift(user)
      }
    }
  })
  
  window.addEventListener('admin-user-left', (event) => {
    console.log('🔴 User left dashboard:', event.detail)
    const user = event.detail.user
    if (user) {
      authenticatedUsers.value = authenticatedUsers.value.filter(u => u.id !== user.id)
      anonymousUsers.value = anonymousUsers.value.filter(u => u.tracking_id !== user.tracking_id)
    }
  })
  
  window.addEventListener('admin-purchase-made', (event) => {
    console.log('💰 Purchase made dashboard:', event.detail)
    addNewPurchase(event.detail)
  })
  
  window.addEventListener('admin-quiz-started', (event) => {
    console.log('📝 Quiz started dashboard:', event.detail)
    updateQuizAttempts(event.detail)
  })
  
  window.addEventListener('admin-user-activity', (event) => {
    console.log('📈 User activity dashboard:', event.detail)
    addNewActivity(event.detail)
  })
}

// Event handlers
const updateOnlineUsers = (data) => {
  if (data.status === 'online') {
    // Add or update user
    const existingIndex = authenticatedUsers.value.findIndex(user => user.id === data.user.id)
    if (existingIndex !== -1) {
      authenticatedUsers.value[existingIndex] = data.user
    } else {
      authenticatedUsers.value.unshift(data.user)
    }
  } else {
    // Remove user
    authenticatedUsers.value = authenticatedUsers.value.filter(user => user.id !== data.user.id)
  }
}

const addNewPurchase = (purchase) => {
  recentPurchases.value.unshift(purchase)
  // Keep only latest 50 purchases
  if (recentPurchases.value.length > 50) {
    recentPurchases.value = recentPurchases.value.slice(0, 50)
  }
}

const addNewActivity = (activity) => {
  recentActivities.value.unshift(activity)
  // Keep only latest 100 activities
  if (recentActivities.value.length > 100) {
    recentActivities.value = recentActivities.value.slice(0, 100)
  }
}

const updateQuizAttempts = (attempt) => {
  const existingIndex = activeQuizAttempts.value.findIndex(a => a.id === attempt.id)
  if (existingIndex !== -1) {
    if (attempt.status === 'completed') {
      activeQuizAttempts.value.splice(existingIndex, 1)
    } else {
      activeQuizAttempts.value[existingIndex] = attempt
    }
  } else if (attempt.status === 'in_progress') {
    activeQuizAttempts.value.unshift(attempt)
  }
}

const showPurchaseNotification = (purchase) => {
  // Could implement a toast notification here
  console.log('New purchase:', purchase)
}

// Data refresh function
const refreshData = async () => {
  try {
    console.log('🔄 Refreshing Live Monitor data...')
    
    // Use Inertia's reload to refresh the page data with authentication
    router.reload({
      only: ['initialOnlineUsers', 'initialRecentPurchases', 'initialActiveQuizAttempts', 'initialRecentActivities', 'initialSystemMetrics'],
      onSuccess: (page) => {
        console.log('✅ Data refreshed successfully')
        // Update local state with fresh data
        if (page.props.initialOnlineUsers) {
          authenticatedUsers.value = page.props.initialOnlineUsers.filter(u => !u.tracking_id)
          anonymousUsers.value = page.props.initialOnlineUsers.filter(u => u.tracking_id)
        }
        if (page.props.initialRecentPurchases) {
          recentPurchases.value = page.props.initialRecentPurchases
        }
        if (page.props.initialActiveQuizAttempts) {
          activeQuizAttempts.value = page.props.initialActiveQuizAttempts
        }
        if (page.props.initialRecentActivities) {
          recentActivities.value = page.props.initialRecentActivities
        }
        if (page.props.initialSystemMetrics) {
          systemMetrics.value = page.props.initialSystemMetrics
        }
      },
      onError: (errors) => {
        console.error('❌ Failed to refresh data:', errors)
      }
    })
  } catch (error) {
    console.error('❌ Failed to refresh data:', error)
  }
}

// Time tracking functions
const startTimeTracking = () => {
  // Update current time every minute
  timeUpdateInterval = setInterval(() => {
    currentTime.value = new Date()
  }, 60000) // Update every minute
}

const stopTimeTracking = () => {
  if (timeUpdateInterval) {
    clearInterval(timeUpdateInterval)
    timeUpdateInterval = null
  }
}

// Helper functions
const formatDate = (date) => {
  return new Date(date).toLocaleString('en-US', {
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

const formatDuration = (seconds) => {
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`
  }
  return `${minutes}m`
}

// Calculate dynamic duration for online users
const calculateDynamicDuration = (user) => {
  if (!user.joined_at) return 0
  
  const joinedTime = new Date(user.joined_at)
  const now = currentTime.value
  const diffInSeconds = Math.floor((now - joinedTime) / 1000)
  
  return Math.max(0, diffInSeconds)
}

// Format dynamic duration
const formatDynamicDuration = (user) => {
  const seconds = calculateDynamicDuration(user)
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`
  }
  return `${minutes}m`
}

// Format anonymous user duration
const formatAnonymousDuration = (user) => {
  if (!user.joined_at) return '0m'
  
  const joinedTime = new Date(user.joined_at)
  const now = currentTime.value
  const diffInSeconds = Math.floor((now - joinedTime) / 1000)
  const hours = Math.floor(diffInSeconds / 3600)
  const minutes = Math.floor((diffInSeconds % 3600) / 60)
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`
  }
  return `${Math.max(0, minutes)}m`
}

// Extract page name from URL
const getPageFromUrl = (url) => {
  if (!url) return 'Unknown'
  
  try {
    const urlObj = new URL(url)
    const path = urlObj.pathname
    
    // Extract meaningful page names
    if (path === '/' || path === '/welcome') return 'Home'
    if (path.includes('/dashboard')) return 'Dashboard'
    if (path.includes('/courses')) return 'Courses'
    if (path.includes('/profile')) return 'Profile'
    if (path.includes('/admin')) return 'Admin'
    if (path.includes('/login')) return 'Login'
    if (path.includes('/register')) return 'Register'
    
    // Return the last segment of the path
    const segments = path.split('/').filter(Boolean)
    return segments.length > 0 ? segments[segments.length - 1] : 'Home'
  } catch (error) {
    return 'Unknown'
  }
}

const getActivityIcon = (action) => {
  const icons = {
    login: Users,
    logout: Users,
    purchase: ShoppingCart,
    quiz_start: Play,
    quiz_complete: Award,
    course_access: BookOpen,
    registration: UserPlus
  }
  return icons[action] || Activity
}

const getActivityColor = (action) => {
  const colors = {
    login: 'bg-green-500',
    logout: 'bg-gray-500',
    purchase: 'bg-blue-500',
    quiz_start: 'bg-purple-500',
    quiz_complete: 'bg-yellow-500',
    course_access: 'bg-indigo-500',
    registration: 'bg-pink-500'
  }
  return colors[action] || 'bg-gray-500'
}

// User detail modal functions
const openUserDetail = (user) => {
  router.visit(`/admin/live-monitor/track-user/${user.id}`)
  console.log('🔍 Navigating to user tracking page for:', user.name)
}

// New method
const forceRefresh = async () => {
  isRefreshing.value = true
  try {
    await refreshData()
  } finally {
    isRefreshing.value = false
  }
}
</script>
