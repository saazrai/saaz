<template>
  <AdminLayout>
    <!-- Header -->
    <div class="p-6">
      <div class="flex justify-between items-center mb-6">
        <div>
          <h1 :class="[
            'text-3xl font-bold',
            isDarkMode ? 'text-gray-100' : 'text-gray-900'
          ]">Currencies</h1>
          <p :class="[
            'mt-1',
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">Manage supported currencies for the platform</p>
        </div>
        <button
          @click="showCreateModal = true"
          class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
        >
          <PlusIcon class="h-5 w-5" />
          <span>Create Currency</span>
        </button>
      </div>
    </div>

    <!-- Table -->
    <div :class="[
      'rounded-lg shadow-sm',
      isDarkMode ? 'bg-gray-800' : 'bg-white'
    ]">
      <table class="min-w-full">
        <thead>
          <tr :class="[
            'border-b',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Code
            </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Name
            </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Symbol
            </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Status
            </th>
            <th :class="[
              'px-8 py-4 text-right text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              
            </th>
          </tr>
        </thead>
        <tbody>
          <tr 
            v-for="currency in currencies.data" 
            :key="currency.id" 
            @click="showCurrency(currency)"
            :class="[
              'border-b cursor-pointer transition-colors',
              isDarkMode 
                ? 'border-gray-700 hover:bg-gray-700' 
                : 'border-gray-100 hover:bg-gray-50'
            ]"
          >
            <td class="px-8 py-6">
              <div :class="[
                'font-medium',
                isDarkMode ? 'text-gray-100' : 'text-gray-900'
              ]">{{ currency.code }}</div>
            </td>
            <td class="px-8 py-6">
              <div :class="[
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">{{ currency.name }}</div>
            </td>
            <td class="px-8 py-6">
              <div :class="[
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">{{ currency.symbol }}</div>
            </td>
            <td class="px-8 py-6">
              <Switch 
                :checked="currency.is_active" 
                @update:checked="(checked) => toggleStatus(currency, checked)"
                :disabled="togglingStatus === currency.id"
              />
            </td>
            <td class="px-8 py-6 text-right">
              <span :class="[
                'text-xl',
                isDarkMode ? 'text-gray-400' : 'text-gray-400'
              ]">›</span>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div v-if="currencies.links" class="mt-6 flex justify-center">
      <nav class="flex items-center gap-2">
        <Link
          v-if="currencies.prev_page_url"
          :href="currencies.prev_page_url"
          class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Previous
        </Link>
        <Link
          v-if="currencies.next_page_url"
          :href="currencies.next_page_url"
          class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Next
        </Link>
      </nav>
    </div>

    <!-- Create/Edit Modal -->
    <TransitionRoot as="template" :show="showCreateModal || showEditModal">
      <Dialog as="div" class="relative z-10" @close="closeModal">
        <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0" enter-to="opacity-100" leave="ease-in duration-200" leave-from="opacity-100" leave-to="opacity-0">
          <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
        </TransitionChild>

        <div class="fixed inset-0 z-10 overflow-y-auto">
          <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" enter-to="opacity-100 translate-y-0 sm:scale-100" leave="ease-in duration-200" leave-from="opacity-100 translate-y-0 sm:scale-100" leave-to="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
              <DialogPanel class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                <form @submit.prevent="submitForm">
                  <div>
                    <h3 class="text-lg font-medium leading-6 text-gray-900">
                      {{ showEditModal ? 'Edit Currency' : 'Create Currency' }}
                    </h3>
                    <div class="mt-6 space-y-4">
                      <div>
                        <label for="code" class="block text-sm font-medium text-gray-700">Currency Code</label>
                        <input
                          v-model="form.code"
                          type="text"
                          id="code"
                          required
                          maxlength="3"
                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm uppercase"
                          placeholder="e.g., USD, EUR, GBP"
                        />
                        <div v-if="form.errors.code" class="mt-1 text-sm text-red-600">{{ form.errors.code }}</div>
                      </div>

                      <div>
                        <label for="name" class="block text-sm font-medium text-gray-700">Currency Name</label>
                        <input
                          v-model="form.name"
                          type="text"
                          id="name"
                          required
                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          placeholder="e.g., US Dollar, Euro, British Pound"
                        />
                        <div v-if="form.errors.name" class="mt-1 text-sm text-red-600">{{ form.errors.name }}</div>
                      </div>

                      <div>
                        <label for="symbol" class="block text-sm font-medium text-gray-700">Currency Symbol</label>
                        <input
                          v-model="form.symbol"
                          type="text"
                          id="symbol"
                          required
                          maxlength="5"
                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          placeholder="e.g., $, €, £"
                        />
                        <div v-if="form.errors.symbol" class="mt-1 text-sm text-red-600">{{ form.errors.symbol }}</div>
                      </div>

                      <div class="flex items-center">
                        <input
                          v-model="form.is_active"
                          type="checkbox"
                          id="is_active"
                          class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                        />
                        <label for="is_active" class="ml-2 block text-sm text-gray-900">
                          Active
                        </label>
                      </div>
                    </div>
                  </div>
                  <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button
                      type="submit"
                      :disabled="form.processing"
                      class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2 disabled:opacity-50"
                    >
                      {{ form.processing ? 'Saving...' : (showEditModal ? 'Update' : 'Create') }}
                    </button>
                    <button
                      type="button"
                      @click="closeModal"
                      class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </DialogPanel>
            </TransitionChild>
          </div>
        </div>
      </Dialog>
    </TransitionRoot>
  </AdminLayout>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import { useForm, Link, router } from '@inertiajs/vue3'
import { PlusIcon } from '@heroicons/vue/24/outline'
import { Switch } from '@/Components/shadcn/ui/switch'
import { Dialog, DialogPanel, TransitionChild, TransitionRoot } from '@headlessui/vue'
import AdminLayout from '@/Layouts/AdminLayout.vue'

// Dark mode management
const isDarkMode = ref(false)

onMounted(() => {
  // Initialize dark mode state
  isDarkMode.value = localStorage.getItem('adminDarkMode') === 'true'
  
  // Listen for storage changes
  const handleStorageChange = (e) => {
    if (e.key === 'adminDarkMode') {
      isDarkMode.value = e.newValue === 'true'
    }
  }
  
  // Listen for custom dark mode events
  const handleDarkModeToggle = (e) => {
    isDarkMode.value = e.detail
  }
  
  window.addEventListener('storage', handleStorageChange)
  window.addEventListener('adminDarkModeToggle', handleDarkModeToggle)
  
  // Cleanup listeners on unmount
  onUnmounted(() => {
    window.removeEventListener('storage', handleStorageChange)
    window.removeEventListener('adminDarkModeToggle', handleDarkModeToggle)
  })
})

const props = defineProps({
  currencies: Object,
})

const showCreateModal = ref(false)
const togglingStatus = ref(null)
const showEditModal = ref(false)
const editingCurrency = ref(null)

const form = useForm({
  code: '',
  name: '',
  symbol: '',
  is_active: true,
})

const showCurrency = (currency) => {
  // For now, redirect to edit since there's no Show page for currencies
  editCurrency(currency)
}

const editCurrency = (currency) => {
  editingCurrency.value = currency
  form.code = currency.code
  form.name = currency.name
  form.symbol = currency.symbol
  form.is_active = currency.is_active
  showEditModal.value = true
}

const deleteCurrency = (currency) => {
  if (confirm('Are you sure you want to delete this currency? This action cannot be undone.')) {
    router.delete(route('admin.settings.commerce.currencies.destroy', currency.id))
  }
}

const toggleStatus = async (currency, checked) => {
  togglingStatus.value = currency.id
  
  try {
    await router.patch(`/admin/currencies/${currency.id}/toggle-status`, {}, {
      preserveState: true,
      preserveScroll: true,
      replace: true,
      onSuccess: () => {
        // Update the currency status in the local data
        currency.is_active = !currency.is_active
      },
      onError: (errors) => {
        console.error('Failed to toggle status:', errors)
      }
    })
  } catch (error) {
    console.error('Error toggling status:', error)
  } finally {
    togglingStatus.value = null
  }
}

const submitForm = () => {
  if (showEditModal.value) {
    form.put(route('admin.settings.commerce.currencies.update', editingCurrency.value.id), {
      onSuccess: () => closeModal()
    })
  } else {
    form.post(route('admin.settings.commerce.currencies.store'), {
      onSuccess: () => closeModal()
    })
  }
}

const closeModal = () => {
  showCreateModal.value = false
  showEditModal.value = false
  editingCurrency.value = null
  form.reset()
  form.clearErrors()
}
</script>
