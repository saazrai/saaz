<template>
  <AdminLayout page-title="Orders & Purchases">
    <div class="container mx-auto px-4 py-8" :class="{ 'dark': isDarkMode }">
      <!-- Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 class="text-3xl font-bold" :class="isDarkMode ? 'text-white' : 'text-gray-900'">Orders & Purchases</h1>
          <p :class="isDarkMode ? 'text-gray-300' : 'text-gray-600'">Track and manage customer orders and purchase history</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-4 mt-4 md:mt-0">
          <Button variant="outline" @click="exportOrders">
            Export Orders
          </Button>
        </div>
      </div>

      <!-- Statistics Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div :class="isDarkMode ? 'bg-gray-800 text-white' : 'bg-white'" class="rounded-lg shadow-sm p-6">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <ShoppingCart class="h-6 w-6 text-blue-600" />
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium" :class="isDarkMode ? 'text-gray-300' : 'text-gray-600'">Total Orders</p>
              <p class="text-2xl font-bold" :class="isDarkMode ? 'text-white' : 'text-gray-900'">{{ stats.total_orders }}</p>
            </div>
          </div>
        </div>

        <div :class="isDarkMode ? 'bg-gray-800 text-white' : 'bg-white'" class="rounded-lg shadow-sm p-6">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <DollarSign class="h-6 w-6 text-green-600" />
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium" :class="isDarkMode ? 'text-gray-300' : 'text-gray-600'">Total Revenue</p>
              <p class="text-2xl font-bold" :class="isDarkMode ? 'text-white' : 'text-gray-900'">${{ stats.total_revenue }}</p>
            </div>
          </div>
        </div>

        <div :class="isDarkMode ? 'bg-gray-800 text-white' : 'bg-white'" class="rounded-lg shadow-sm p-6">
          <div class="flex items-center">
            <div class="p-2 bg-purple-100 rounded-lg">
              <TrendingUp class="h-6 w-6 text-purple-600" />
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium" :class="isDarkMode ? 'text-gray-300' : 'text-gray-600'">Avg Order Value</p>
              <p class="text-2xl font-bold" :class="isDarkMode ? 'text-white' : 'text-gray-900'">${{ stats.average_order_value }}</p>
            </div>
          </div>
        </div>

        <div :class="isDarkMode ? 'bg-gray-800 text-white' : 'bg-white'" class="rounded-lg shadow-sm p-6">
          <div class="flex items-center">
            <div class="p-2 bg-orange-100 rounded-lg">
              <BarChart3 class="h-6 w-6 text-orange-600" />
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium" :class="isDarkMode ? 'text-gray-300' : 'text-gray-600'">Conversion Rate</p>
              <p class="text-2xl font-bold" :class="isDarkMode ? 'text-white' : 'text-gray-900'">{{ stats.conversion_rate }}%</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Filters and Actions -->
      <div :class="isDarkMode ? 'bg-gray-800' : 'bg-white'" class="rounded-lg shadow-sm p-6 mb-6">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 flex-1">
            <!-- Search -->
            <div>
              <Input
                v-model="searchQuery"
                placeholder="Search orders..."
                class="w-full"
                :class="isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : ''"
                @input="debouncedSearch"
              />
            </div>

            <!-- Status Filter -->
            <div>
              <Select v-model="statusFilter" @update:model-value="applyFilters">
                <SelectTrigger :class="isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''">
                  <SelectValue placeholder="All Statuses" />
                </SelectTrigger>
                <SelectContent :class="isDarkMode ? 'bg-gray-700 border-gray-600' : ''">
                  <SelectItem value="all" :class="isDarkMode ? 'text-white hover:bg-gray-600' : ''">All Statuses</SelectItem>
                  <SelectItem 
                    v-for="(label, value) in statusOptions" 
                    :key="value" 
                    :value="value"
                    :class="isDarkMode ? 'text-white hover:bg-gray-600' : ''"
                  >
                    {{ label }}
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <!-- Date From -->
            <div>
              <Input
                v-model="dateFrom"
                type="date"
                placeholder="From date"
                :class="isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''"
                @change="applyFilters"
              />
            </div>

            <!-- Date To -->
            <div>
              <Input
                v-model="dateTo"
                type="date"
                placeholder="To date"
                :class="isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''"
                @change="applyFilters"
              />
            </div>
          </div>

          <!-- Actions -->
          <div class="flex gap-2">
            <Button variant="outline" @click="clearFilters">
              <X class="h-4 w-4 mr-2" />
              Clear
            </Button>
            <Button variant="outline" @click="exportOrders">
              <Download class="h-4 w-4 mr-2" />
              Export
            </Button>
          </div>
        </div>
      </div>

      <!-- Orders Table -->
      <div :class="isDarkMode ? 'bg-gray-800' : 'bg-white'" class="rounded-lg shadow-sm">
        <div class="px-6 py-4" :class="isDarkMode ? 'border-b border-gray-700' : 'border-b border-gray-200'">
          <h3 class="text-lg font-medium" :class="isDarkMode ? 'text-white' : 'text-gray-900'">Recent Orders</h3>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full" :class="isDarkMode ? 'divide-y divide-gray-700' : 'divide-y divide-gray-200'">
            <thead :class="isDarkMode ? 'bg-gray-700' : 'bg-gray-50'">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Order ID
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Customer
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Products
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Amount
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Status
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Date
                </th>
                <th class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider" :class="isDarkMode ? 'text-gray-300' : 'text-gray-500'">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody :class="isDarkMode ? 'bg-gray-800 divide-y divide-gray-700' : 'bg-white divide-y divide-gray-200'">
              <tr v-for="order in orders.data" :key="order.id" :class="isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium" :class="isDarkMode ? 'text-white' : 'text-gray-900'">#{{ order.id }}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm" :class="isDarkMode ? 'text-white' : 'text-gray-900'">{{ order.user?.name || 'Guest' }}</div>
                  <div class="text-sm" :class="isDarkMode ? 'text-gray-400' : 'text-gray-500'">{{ order.user?.email }}</div>
                </td>
                <td class="px-6 py-4">
                  <div class="text-sm" :class="isDarkMode ? 'text-white' : 'text-gray-900'">
                    <div v-for="item in order.items" :key="item.id" class="truncate">
                      {{ item.product?.name || 'Product #' + item.product_id }}
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium" :class="isDarkMode ? 'text-white' : 'text-gray-900'">${{ order.final_amount }}</div>
                  <div v-if="order.discount_amount && order.discount_amount > 0" class="text-xs" :class="isDarkMode ? 'text-gray-400' : 'text-gray-500'">
                    Discount: ${{ order.discount_amount }}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <Badge :variant="getStatusVariant(order.status)">
                    {{ statusOptions[order.status] || order.status }}
                  </Badge>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm" :class="isDarkMode ? 'text-gray-400' : 'text-gray-500'">
                  {{ formatDate(order.created_at) }}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm">
                        <MoreHorizontal class="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" :class="isDarkMode ? 'bg-gray-700 border-gray-600' : ''">
                      <DropdownMenuItem @click="viewOrder(order)" :class="isDarkMode ? 'text-white hover:bg-gray-600' : ''">
                        <Eye class="h-4 w-4 mr-2" />
                        View Details
                      </DropdownMenuItem>
                      <DropdownMenuItem @click="updateOrderStatus(order, 'completed')" v-if="order.status !== 'completed'" :class="isDarkMode ? 'text-white hover:bg-gray-600' : ''">
                        <CheckCircle class="h-4 w-4 mr-2" />
                        Mark Completed
                      </DropdownMenuItem>
                      <DropdownMenuItem @click="updateOrderStatus(order, 'cancelled')" v-if="order.status === 'pending'" :class="isDarkMode ? 'text-white hover:bg-gray-600' : ''">
                        <XCircle class="h-4 w-4 mr-2" />
                        Cancel Order
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div class="px-6 py-4" :class="isDarkMode ? 'border-t border-gray-700' : 'border-t border-gray-200'">
          <div class="flex items-center justify-between">
            <div class="text-sm" :class="isDarkMode ? 'text-gray-300' : 'text-gray-700'">
              Showing {{ orders.from }} to {{ orders.to }} of {{ orders.total }} results
            </div>
            <div class="flex gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                :disabled="!orders.prev_page_url"
                @click="goToPage(orders.current_page - 1)"
              >
                Previous
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                :disabled="!orders.next_page_url"
                @click="goToPage(orders.current_page + 1)"
              >
                Next
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Button } from '@/Components/shadcn/ui/button'
import { Input } from '@/Components/shadcn/ui/input'
import { Badge } from '@/Components/shadcn/ui/badge'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/shadcn/ui/select'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/Components/shadcn/ui/dropdown-menu'
import {
  ShoppingCart,
  DollarSign,
  TrendingUp,
  BarChart3,
  Download,
  X,
  Eye,
  MoreHorizontal,
  CheckCircle,
  XCircle
} from 'lucide-vue-next'

const props = defineProps({
  orders: Object,
  stats: Object,
  recentActivity: Array,
  filters: Object,
  statusOptions: Object,
})

// Dark mode state
const isDarkMode = ref(false)

// Initialize dark mode from localStorage
const initializeDarkMode = () => {
  const saved = localStorage.getItem('adminDarkMode')
  if (saved !== null) {
    isDarkMode.value = JSON.parse(saved)
  }
}

// Listen for dark mode changes
const handleDarkModeChange = (event) => {
  if (event.key === 'adminDarkMode') {
    isDarkMode.value = JSON.parse(event.newValue || 'false')
  }
}

const handleCustomDarkModeChange = (event) => {
  isDarkMode.value = event.detail.isDarkMode
}

// Check localStorage for dark mode preference
onMounted(() => {
  initializeDarkMode()
  
  // Listen for dark mode changes
  window.addEventListener('storage', handleDarkModeChange)
  window.addEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
})

// Filter state
const searchQuery = ref(props.filters.search || '')
const statusFilter = ref(props.filters.status || 'all')
const dateFrom = ref(props.filters.date_from || '')
const dateTo = ref(props.filters.date_to || '')

// Debounced search
let searchTimeout = null
const debouncedSearch = () => {
  clearTimeout(searchTimeout)
  searchTimeout = setTimeout(() => {
    applyFilters()
  }, 500)
}

// Apply filters
const applyFilters = () => {
  const params = {}
  
  if (searchQuery.value) params.search = searchQuery.value
  if (statusFilter.value && statusFilter.value !== 'all') params.status = statusFilter.value
  if (dateFrom.value) params.date_from = dateFrom.value
  if (dateTo.value) params.date_to = dateTo.value
  
  router.get(route('admin.orders.index'), params, {
    preserveState: true,
    preserveScroll: true,
  })
}

// Clear filters
const clearFilters = () => {
  searchQuery.value = ''
  statusFilter.value = 'all'
  dateFrom.value = ''
  dateTo.value = ''
  applyFilters()
}

// Export orders
const exportOrders = () => {
  window.open(route('admin.orders.export'), '_blank')
}

// View order details
const viewOrder = (order) => {
  router.visit(route('admin.orders.show', order.id))
}

// Update order status
const updateOrderStatus = async (order, status) => {
  if (confirm(`Are you sure you want to mark this order as ${status}?`)) {
    router.patch(route('admin.orders.update-status', order.id), { status }, {
      preserveState: true,
      preserveScroll: true,
      onSuccess: () => {
        // Update local state
        order.status = status
      }
    })
  }
}

// Pagination
const goToPage = (page) => {
  const params = { ...props.filters, page }
  router.get(route('admin.orders.index'), params, {
    preserveState: true,
    preserveScroll: true,
  })
}

// Get status badge variant
const getStatusVariant = (status) => {
  const variants = {
    pending: 'secondary',
    processing: 'default',
    completed: 'default',
    cancelled: 'destructive',
    refunded: 'secondary'
  }
  return variants[status] || 'secondary'
}

// Format date
const formatDate = (dateString) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

// Cleanup on unmount
onUnmounted(() => {
  window.removeEventListener('storage', handleDarkModeChange)
  window.removeEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
})
</script>