<template>
  <AdminLayout page-title="Order Details">
    <!-- Back Navigation -->
    <div class="mb-6">
      <Link 
        :href="route('admin.orders.index')" 
        class="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors"
      >
        <ChevronLeft class="w-4 h-4 mr-1" />
        Back to Orders
      </Link>
    </div>

    <!-- Order Header -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">Order #{{ order.id }}</h1>
          <p class="text-sm text-gray-600 mt-1">
            Placed on {{ formatDate(order.created_at) }}
          </p>
        </div>
        <div class="flex items-center gap-4">
          <Badge :variant="getStatusVariant(order.status)" class="text-sm">
            {{ order.status.charAt(0).toUpperCase() + order.status.slice(1) }}
          </Badge>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline">
                <Settings class="h-4 w-4 mr-2" />
                Actions
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem @click="updateStatus('completed')" v-if="order.status !== 'completed'">
                <CheckCircle class="h-4 w-4 mr-2" />
                Mark as Completed
              </DropdownMenuItem>
              <DropdownMenuItem @click="updateStatus('processing')" v-if="order.status === 'pending'">
                <Clock class="h-4 w-4 mr-2" />
                Mark as Processing
              </DropdownMenuItem>
              <DropdownMenuItem @click="updateStatus('cancelled')" v-if="order.status === 'pending'">
                <XCircle class="h-4 w-4 mr-2" />
                Cancel Order
              </DropdownMenuItem>
              <DropdownMenuItem @click="updateStatus('refunded')" v-if="order.status === 'completed'">
                <RefreshCw class="h-4 w-4 mr-2" />
                Refund Order
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Main Content -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Order Items -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Order Items</h3>
          </div>
          <div class="p-6">
            <div class="space-y-4">
              <div 
                v-for="item in order.items" 
                :key="item.id"
                class="flex items-center justify-between py-4 border-b border-gray-100 last:border-b-0"
              >
                                 <div class="flex-1">
                   <h4 class="text-sm font-medium text-gray-900">
                     {{ item.product?.name || 'Product #' + item.product_id }}
                   </h4>
                   <p class="text-sm text-gray-500 mt-1" v-if="item.product?.description">
                     {{ item.product.description.substring(0, 100) }}...
                   </p>
                   <div class="flex items-center gap-4 mt-2 text-xs text-gray-500">
                     <span>Product ID: {{ item.product_id }}</span>
                     <span v-if="item.voucher_id">Voucher ID: {{ item.voucher_id }}</span>
                   </div>
                 </div>
                 <div class="text-right">
                   <div class="text-sm font-medium text-gray-900">
                     ${{ item.price }}
                   </div>
                 </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Payment Information -->
        <div class="bg-white rounded-lg shadow-sm" v-if="order.payments && order.payments.length > 0">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Payment Information</h3>
          </div>
          <div class="p-6">
            <div class="space-y-4">
              <div 
                v-for="payment in order.payments" 
                :key="payment.id"
                class="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0"
              >
                <div>
                  <div class="text-sm font-medium text-gray-900">
                    {{ payment.payment_method || 'Credit Card' }}
                  </div>
                  <div class="text-xs text-gray-500">
                    {{ formatDate(payment.created_at) }}
                  </div>
                </div>
                <div class="text-right">
                  <div class="text-sm font-medium text-gray-900">
                    ${{ payment.amount }}
                  </div>
                  <Badge :variant="payment.status === 'completed' ? 'default' : 'secondary'" class="text-xs">
                    {{ payment.status }}
                  </Badge>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Sidebar -->
      <div class="space-y-6">
        <!-- Customer Information -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Customer</h3>
          </div>
          <div class="p-6">
            <div class="flex items-center gap-3 mb-4">
              <Avatar class="h-10 w-10">
                <AvatarImage :src="`https://ui-avatars.com/api/?name=${order.user?.name}`" />
                <AvatarFallback>{{ order.user?.name?.charAt(0).toUpperCase() || 'G' }}</AvatarFallback>
              </Avatar>
              <div>
                <div class="text-sm font-medium text-gray-900">
                  {{ order.user?.name || 'Guest User' }}
                </div>
                <div class="text-sm text-gray-500">
                  {{ order.user?.email || 'No email' }}
                </div>
              </div>
            </div>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-500">Customer since:</span>
                <span class="text-gray-900">{{ formatDate(order.user?.created_at) }}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Order Summary -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Order Summary</h3>
          </div>
          <div class="p-6">
            <div class="space-y-3">
              <div class="flex justify-between text-sm">
                <span class="text-gray-500">Subtotal:</span>
                <span class="text-gray-900">${{ order.total_amount }}</span>
              </div>
              <div class="flex justify-between text-sm" v-if="order.discount_amount && order.discount_amount > 0">
                <span class="text-gray-500">Discount:</span>
                <span class="text-red-600">-${{ order.discount_amount }}</span>
              </div>
              <div class="flex justify-between text-sm" v-if="order.coupon_id">
                <span class="text-gray-500">Coupon Applied:</span>
                <span class="text-green-600">Yes</span>
              </div>
              <div class="border-t border-gray-200 pt-3">
                <div class="flex justify-between">
                  <span class="text-base font-medium text-gray-900">Total:</span>
                  <span class="text-base font-medium text-gray-900">${{ order.final_amount }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Order Timeline -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Order Timeline</h3>
          </div>
          <div class="p-6">
            <div class="space-y-4">
              <div class="flex items-start gap-3">
                <div class="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                <div>
                  <div class="text-sm font-medium text-gray-900">Order Placed</div>
                  <div class="text-xs text-gray-500">{{ formatDate(order.created_at) }}</div>
                </div>
              </div>
              <div class="flex items-start gap-3" v-if="order.status !== 'pending'">
                <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2"></div>
                <div>
                  <div class="text-sm font-medium text-gray-900">Status: {{ order.status }}</div>
                  <div class="text-xs text-gray-500">{{ formatDate(order.updated_at) }}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { router } from '@inertiajs/vue3'
import { Link } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Button } from '@/Components/shadcn/ui/button'
import { Badge } from '@/Components/shadcn/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/Components/shadcn/ui/avatar'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/Components/shadcn/ui/dropdown-menu'
import {
  ChevronLeft,
  Settings,
  CheckCircle,
  Clock,
  XCircle,
  RefreshCw
} from 'lucide-vue-next'

const props = defineProps({
  order: Object,
})

// Update order status
const updateStatus = (status) => {
  if (confirm(`Are you sure you want to change the order status to ${status}?`)) {
    router.patch(route('admin.orders.update-status', props.order.id), { status }, {
      preserveState: true,
      onSuccess: () => {
        // Update local state
        props.order.status = status
      }
    })
  }
}

// Get status badge variant
const getStatusVariant = (status) => {
  const variants = {
    pending: 'secondary',
    processing: 'default',
    completed: 'default',
    cancelled: 'destructive',
    refunded: 'secondary'
  }
  return variants[status] || 'secondary'
}

// Format date
const formatDate = (dateString) => {
  if (!dateString) return 'N/A'
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}
</script> 