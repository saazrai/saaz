<template>
    <AdminLayout>
        <div class="container mx-auto px-4 py-8">
            <!-- Header -->
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
                <div>
                    <h1 :class="['text-3xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">Course Levels</h1>
                    <p :class="[isDarkMode ? 'text-gray-300' : 'text-gray-600']">Manage course difficulty and progression levels</p>
                </div>
                <div class="flex flex-col sm:flex-row gap-4 mt-4 md:mt-0">
                    <button
                        @click="showCreateModal = true"
                        type="button"
                        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
                    >
                        <PlusIcon class="h-5 w-5" />
                        <span>Create Course Level</span>
                    </button>
                </div>
            </div>

            <!-- Course Levels Table -->
            <div :class="['shadow rounded-lg', isDarkMode ? 'bg-gray-800' : 'bg-white']">
                <div class="overflow-hidden">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead :class="[isDarkMode ? 'bg-gray-700' : 'bg-gray-50']">
                            <tr>
                                <th scope="col" :class="['px-8 py-4 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                    Name
                                </th>
                                <th scope="col" :class="['px-8 py-4 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                    Description
                                </th>
                                <th scope="col" :class="['px-8 py-4 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                    Courses
                                </th>
                                <th scope="col" :class="['px-8 py-4 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                    Created
                                </th>
                                <th scope="col" :class="['px-8 py-4 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                    <span class="sr-only">Actions</span>
                                </th>
                            </tr>
                        </thead>
                        <tbody :class="['divide-y', isDarkMode ? 'bg-gray-800 divide-gray-700' : 'bg-white divide-gray-100']">
                            <tr 
                                v-for="level in courseLevels.data" 
                                :key="level.id"
                                @click="showLevel(level)"
                                :class="[
                                    'cursor-pointer transition-colors',
                                    isDarkMode 
                                        ? 'hover:bg-gray-700' 
                                        : 'hover:bg-gray-50'
                                ]"
                            >
                                <td class="px-8 py-6 whitespace-nowrap">
                                    <div :class="['text-sm font-medium', isDarkMode ? 'text-white' : 'text-gray-900']">
                                        {{ level.name }}
                                    </div>
                                </td>
                                <td class="px-8 py-6 text-sm max-w-xs">
                                    <div :class="['truncate', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                        {{ level.description || 'No description' }}
                                    </div>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap text-sm">
                                    <span :class="[
                                        'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium',
                                        isDarkMode 
                                            ? 'bg-blue-900/30 text-blue-400' 
                                            : 'bg-blue-100 text-blue-800'
                                    ]">
                                        {{ level.courses_count || 0 }}
                                    </span>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap text-sm">
                                    <span :class="[isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                        {{ new Date(level.created_at).toLocaleDateString() }}
                                    </span>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end">
                                        <svg :class="['h-5 w-5', isDarkMode ? 'text-gray-500' : 'text-gray-400']" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                                        </svg>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div v-if="courseLevels.links && courseLevels.total > courseLevels.per_page" :class="[
                    'border-t px-8 py-4',
                    isDarkMode ? 'border-gray-600 bg-gray-800' : 'border-gray-200 bg-white'
                ]">
                    <nav class="flex items-center justify-between">
                        <div class="flex flex-1 justify-between sm:hidden">
                            <Link
                                v-if="courseLevels.prev_page_url"
                                :href="courseLevels.prev_page_url"
                                :class="[
                                    'relative inline-flex items-center rounded-md border px-4 py-2 text-sm font-medium',
                                    isDarkMode 
                                        ? 'border-gray-600 bg-gray-700 text-gray-200 hover:bg-gray-600' 
                                        : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'
                                ]"
                            >
                                Previous
                            </Link>
                            <Link
                                v-if="courseLevels.next_page_url"
                                :href="courseLevels.next_page_url"
                                :class="[
                                    'relative ml-3 inline-flex items-center rounded-md border px-4 py-2 text-sm font-medium',
                                    isDarkMode 
                                        ? 'border-gray-600 bg-gray-700 text-gray-200 hover:bg-gray-600' 
                                        : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'
                                ]"
                            >
                                Next
                            </Link>
                        </div>
                        <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
                            <div>
                                <p :class="[
                                    'text-sm',
                                    isDarkMode ? 'text-gray-300' : 'text-gray-700'
                                ]">
                                    Showing {{ courseLevels.from }} to {{ courseLevels.to }} of {{ courseLevels.total }} results
                                </p>
                            </div>
                            <div class="flex space-x-2">
                                <Link
                                    v-if="courseLevels.prev_page_url"
                                    :href="courseLevels.prev_page_url"
                                    :class="[
                                        'relative inline-flex items-center rounded-md border px-3 py-2 text-sm font-medium',
                                        isDarkMode 
                                            ? 'border-gray-600 bg-gray-700 text-gray-300 hover:bg-gray-600' 
                                            : 'border-gray-300 bg-white text-gray-500 hover:bg-gray-50'
                                    ]"
                                >
                                    Previous
                                </Link>
                                <Link
                                    v-if="courseLevels.next_page_url"
                                    :href="courseLevels.next_page_url"
                                    :class="[
                                        'relative inline-flex items-center rounded-md border px-3 py-2 text-sm font-medium',
                                        isDarkMode 
                                            ? 'border-gray-600 bg-gray-700 text-gray-300 hover:bg-gray-600' 
                                            : 'border-gray-300 bg-white text-gray-500 hover:bg-gray-50'
                                    ]"
                                >
                                    Next
                                </Link>
                            </div>
                        </div>
                    </nav>
                </div>
            </div>
        </div>

        <!-- Create/Edit Modal -->
        <TransitionRoot as="template" :show="showCreateModal || showEditModal">
            <Dialog as="div" class="relative z-10" @close="closeModal">
                <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0" enter-to="opacity-100" leave="ease-in duration-200" leave-from="opacity-100" leave-to="opacity-0">
                    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
                </TransitionChild>

                <div class="fixed inset-0 z-10 overflow-y-auto">
                    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                        <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" enter-to="opacity-100 translate-y-0 sm:scale-100" leave="ease-in duration-200" leave-from="opacity-100 translate-y-0 sm:scale-100" leave-to="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
                            <DialogPanel :class="[
                                'relative transform overflow-hidden rounded-lg px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6',
                                isDarkMode ? 'bg-gray-800' : 'bg-white'
                            ]">
                                <form @submit.prevent="submitForm">
                                    <div>
                                        <div class="mt-3 text-center sm:mt-5">
                                            <DialogTitle :class="[
                                                'text-base font-semibold leading-6',
                                                isDarkMode ? 'text-white' : 'text-gray-900'
                                            ]" as="h3">
                                                {{ showEditModal ? 'Edit Course Level' : 'Create Course Level' }}
                                            </DialogTitle>
                                        </div>
                                    </div>
                                    
                                    <div class="mt-5 space-y-4">
                                        <div>
                                            <label for="name" :class="[
                                                'block text-sm font-medium leading-6',
                                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                                            ]">Level Name</label>
                                            <div class="mt-2">
                                                <input
                                                    id="name"
                                                    v-model="form.name"
                                                    type="text"
                                                    name="name"
                                                    :class="[
                                                        'block w-full rounded-md border-0 py-1.5 shadow-sm ring-1 ring-inset focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6',
                                                        isDarkMode 
                                                            ? 'bg-gray-700 text-white ring-gray-600 placeholder:text-gray-400' 
                                                            : 'bg-white text-gray-900 ring-gray-300 placeholder:text-gray-400'
                                                    ]"
                                                    placeholder="e.g., Beginner, Intermediate, Advanced..."
                                                />
                                            </div>
                                            <p v-if="form.errors.name" class="mt-2 text-sm text-red-600">{{ form.errors.name }}</p>
                                        </div>

                                        <div>
                                            <label for="description" :class="[
                                                'block text-sm font-medium leading-6',
                                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                                            ]">Description</label>
                                            <div class="mt-2">
                                                <textarea
                                                    id="description"
                                                    v-model="form.description"
                                                    name="description"
                                                    rows="3"
                                                    :class="[
                                                        'block w-full rounded-md border-0 py-1.5 shadow-sm ring-1 ring-inset focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6',
                                                        isDarkMode 
                                                            ? 'bg-gray-700 text-white ring-gray-600 placeholder:text-gray-400' 
                                                            : 'bg-white text-gray-900 ring-gray-300 placeholder:text-gray-400'
                                                    ]"
                                                    placeholder="Describe the level and target audience..."
                                                />
                                            </div>
                                            <p v-if="form.errors.description" class="mt-2 text-sm text-red-600">{{ form.errors.description }}</p>
                                        </div>
                                    </div>

                                    <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                                        <button
                                            type="submit"
                                            :disabled="form.processing"
                                            class="inline-flex w-full justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 sm:col-start-2 disabled:opacity-50"
                                        >
                                            {{ form.processing ? 'Saving...' : (showEditModal ? 'Update' : 'Create') }}
                                        </button>
                                        <button
                                            type="button"
                                            @click="closeModal"
                                            :class="[
                                                'mt-3 inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm ring-1 ring-inset sm:col-start-1 sm:mt-0',
                                                isDarkMode 
                                                    ? 'bg-gray-700 text-gray-200 ring-gray-600 hover:bg-gray-600' 
                                                    : 'bg-white text-gray-900 ring-gray-300 hover:bg-gray-50'
                                            ]"
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </form>

                                <!-- Delete Button for Edit Modal -->
                                <div v-if="showEditModal && editingLevel" :class="[
                                    'mt-6 pt-6 border-t',
                                    isDarkMode ? 'border-gray-600' : 'border-gray-200'
                                ]">
                                    <button
                                        @click="deleteLevel(editingLevel)"
                                        type="button"
                                        :disabled="(editingLevel.courses_count || 0) > 0"
                                        :class="[
                                            'w-full inline-flex justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm',
                                            (editingLevel.courses_count || 0) > 0
                                                ? (isDarkMode ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-100 text-gray-400 cursor-not-allowed')
                                                : 'bg-red-600 text-white hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600'
                                        ]"
                                    >
                                        {{ (editingLevel.courses_count || 0) > 0 ? 'Cannot Delete (In Use)' : 'Delete Course Level' }}
                                    </button>
                                </div>
                            </DialogPanel>
                        </TransitionChild>
                    </div>
                </div>
            </Dialog>
        </TransitionRoot>
    </AdminLayout>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import { useForm, Link, router } from '@inertiajs/vue3'
import { PlusIcon } from '@heroicons/vue/24/outline'
import { Dialog, DialogPanel, DialogTitle, TransitionChild, TransitionRoot } from '@headlessui/vue'
import AdminLayout from '@/Layouts/AdminLayout.vue'

const props = defineProps({
    courseLevels: {
        type: Object,
        required: true
    }
})

// Dark mode handling
const isDarkMode = ref(false)

const updateDarkMode = () => {
  isDarkMode.value = localStorage.getItem('adminDarkMode') === 'true'
}

onMounted(() => {
  updateDarkMode()
  window.addEventListener('storage', updateDarkMode)
  window.addEventListener('adminDarkModeChanged', updateDarkMode)
})

onUnmounted(() => {
  window.removeEventListener('storage', updateDarkMode)
  window.removeEventListener('adminDarkModeChanged', updateDarkMode)
})

const showCreateModal = ref(false)
const showEditModal = ref(false)
const editingLevel = ref(null)

const form = useForm({
    name: '',
    description: '',
})

const showLevel = (level) => {
    editLevel(level)
}

const editLevel = (level) => {
    editingLevel.value = level
    form.name = level.name
    form.description = level.description || ''
    showEditModal.value = true
}

const deleteLevel = (level) => {
    if (level.courses_count > 0) {
        alert('Cannot delete course level that is being used by courses')
        return
    }
    
    if (confirm('Are you sure you want to delete this course level?')) {
        router.delete(route('admin.course-levels.destroy', level.id), {
            onSuccess: () => closeModal()
        })
    }
}

const submitForm = () => {
    if (showEditModal.value) {
        form.put(route('admin.course-levels.update', editingLevel.value.id), {
            onSuccess: () => closeModal()
        })
    } else {
        form.post(route('admin.course-levels.store'), {
            onSuccess: () => closeModal()
        })
    }
}

const closeModal = () => {
    showCreateModal.value = false
    showEditModal.value = false
    editingLevel.value = null
    form.reset()
    form.clearErrors()
}
</script>