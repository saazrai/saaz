<template>
    <AdminLayout :pageTitle="profile ? `${profile.course_name} - Difficulty Profile` : 'Loading...'">
        <div class="p-6 max-w-6xl mx-auto" v-if="profile">
            <!-- Header -->
            <div class="mb-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 :class="[
                            'text-2xl font-bold',
                            isDarkMode ? 'text-gray-100' : 'text-gray-900'
                        ]">{{ profile.course_name }}</h1>
                        <p :class="[
                            'text-sm mt-1',
                            isDarkMode ? 'text-gray-400' : 'text-gray-600'
                        ]">Course Difficulty Profile</p>
                    </div>
                    <div class="flex space-x-3">
                        <Link
                            v-if="profile && profile.id"
                            :href="route('admin.settings.learning.course-difficulty-profiles.edit', { course_difficulty_profile: profile.id })"
                            :class="[
                                'inline-flex items-center px-4 py-2 font-medium rounded-lg transition-colors',
                                isDarkMode 
                                    ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                                    : 'bg-blue-600 hover:bg-blue-700 text-white'
                            ]"
                        >
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                            </svg>
                            Edit Profile
                        </Link>
                        <Link
                            :href="route('admin.settings.learning.course-difficulty-profiles.index')"
                            :class="[
                                'inline-flex items-center px-4 py-2 font-medium rounded-lg transition-colors',
                                isDarkMode 
                                    ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' 
                                    : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
                            ]"
                        >
                            Back to List
                        </Link>
                    </div>
                </div>
            </div>

            <!-- Profile Details Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Basic Information -->
                <div :class="[
                    'rounded-lg shadow-sm p-6',
                    isDarkMode ? 'bg-gray-800' : 'bg-white'
                ]">
                    <h3 :class="[
                        'text-lg font-semibold mb-4',
                        isDarkMode ? 'text-gray-100' : 'text-gray-900'
                    ]">Basic Information</h3>
                    
                    <dl class="space-y-4">
                        <div>
                            <dt :class="[
                                'text-sm font-medium',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">Course ID</dt>
                            <dd :class="[
                                'mt-1 text-sm',
                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                            ]">{{ profile.course_id }}</dd>
                        </div>
                        
                        <div>
                            <dt :class="[
                                'text-sm font-medium',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">Base Difficulty</dt>
                            <dd class="mt-1 flex items-center">
                                <span :class="[
                                    'text-sm mr-2',
                                    isDarkMode ? 'text-gray-200' : 'text-gray-900'
                                ]">Level {{ profile.base_difficulty }}</span>
                                <div class="flex">
                                    <svg v-for="i in 5" :key="i" 
                                         :class="[
                                             'w-4 h-4', 
                                             i <= profile.base_difficulty 
                                                 ? 'text-yellow-400' 
                                                 : (isDarkMode ? 'text-gray-600' : 'text-gray-300')
                                         ]"
                                         fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                    </svg>
                                </div>
                            </dd>
                        </div>
                        
                        
                        <div>
                            <dt :class="[
                                'text-sm font-medium',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">Scenario Complexity</dt>
                            <dd :class="[
                                'mt-1 text-sm capitalize',
                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                            ]">{{ profile.scenario_complexity }}</dd>
                        </div>
                    </dl>
                </div>

                <!-- Bloom's Taxonomy Distribution -->
                <div :class="[
                    'rounded-lg shadow-sm p-6',
                    isDarkMode ? 'bg-gray-800' : 'bg-white'
                ]">
                    <h3 :class="[
                        'text-lg font-semibold mb-4',
                        isDarkMode ? 'text-gray-100' : 'text-gray-900'
                    ]">Bloom's Taxonomy Distribution</h3>
                    
                    <div class="space-y-3">
                        <div v-for="(value, key) in bloomLevels" :key="key">
                            <div class="flex justify-between items-center mb-1">
                                <span :class="[
                                    'text-sm font-medium capitalize',
                                    isDarkMode ? 'text-gray-300' : 'text-gray-700'
                                ]">{{ key }}</span>
                                <span :class="[
                                    'text-sm',
                                    isDarkMode ? 'text-gray-400' : 'text-gray-500'
                                ]">{{ (value * 100).toFixed(0) }}%</span>
                            </div>
                            <div :class="[
                                'w-full rounded-full h-2',
                                isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
                            ]">
                                <div 
                                    :style="`width: ${value * 100}%`"
                                    :class="[
                                        'h-2 rounded-full',
                                        key === 'remember' ? 'bg-blue-500' :
                                        key === 'understand' ? 'bg-green-500' :
                                        key === 'apply' ? 'bg-yellow-500' :
                                        key === 'analyze' ? 'bg-orange-500' :
                                        key === 'evaluate' ? 'bg-red-500' :
                                        'bg-purple-500'
                                    ]"
                                ></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Mastery Weights -->
                <div :class="[
                    'rounded-lg shadow-sm p-6',
                    isDarkMode ? 'bg-gray-800' : 'bg-white'
                ]">
                    <h3 :class="[
                        'text-lg font-semibold mb-4',
                        isDarkMode ? 'text-gray-100' : 'text-gray-900'
                    ]">Mastery Weights</h3>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div v-for="(value, key) in masteryWeights" :key="key">
                            <dt :class="[
                                'text-sm font-medium capitalize',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">{{ key.replace('weight_', '').replace('_', ' ') }}</dt>
                            <dd :class="[
                                'mt-1 text-sm',
                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                            ]">{{ (value * 100).toFixed(0) }}%</dd>
                        </div>
                    </div>
                </div>

                <!-- Thresholds & Requirements -->
                <div :class="[
                    'rounded-lg shadow-sm p-6',
                    isDarkMode ? 'bg-gray-800' : 'bg-white'
                ]">
                    <h3 :class="[
                        'text-lg font-semibold mb-4',
                        isDarkMode ? 'text-gray-100' : 'text-gray-900'
                    ]">Thresholds & Requirements</h3>
                    
                    <dl class="space-y-3">
                        <div>
                            <dt :class="[
                                'text-sm font-medium',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">Minimum Accuracy</dt>
                            <dd :class="[
                                'mt-1 text-sm',
                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                            ]">{{ (profile.minimum_accuracy * 100).toFixed(0) }}%</dd>
                        </div>
                        
                        <div>
                            <dt :class="[
                                'text-sm font-medium',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">Consecutive Success Required</dt>
                            <dd :class="[
                                'mt-1 text-sm',
                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                            ]">{{ profile.consecutive_success_required }} correct answers</dd>
                        </div>
                        
                        <div>
                            <dt :class="[
                                'text-sm font-medium',
                                isDarkMode ? 'text-gray-400' : 'text-gray-500'
                            ]">Time Pressure Factor</dt>
                            <dd :class="[
                                'mt-1 text-sm',
                                isDarkMode ? 'text-gray-200' : 'text-gray-900'
                            ]">{{ profile.time_pressure_factor }}x</dd>
                        </div>
                        
                    </dl>
                </div>
            </div>

            <!-- Timestamps -->
            <div :class="[
                'mt-6 text-sm',
                isDarkMode ? 'text-gray-400' : 'text-gray-500'
            ]">
                <p>Created: {{ new Date(profile.created_at).toLocaleString() }}</p>
                <p>Last Updated: {{ new Date(profile.updated_at).toLocaleString() }}</p>
            </div>
        </div>
        
        <!-- Loading state -->
        <div v-else class="p-6 max-w-6xl mx-auto">
            <div class="flex items-center justify-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span class="ml-3 text-gray-600">Loading profile data...</span>
            </div>
        </div>
    </AdminLayout>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';
import { Link } from '@inertiajs/vue3';
import AdminLayout from '@/Layouts/AdminLayout.vue';

const props = defineProps({
    profile: Object,
});

// Dark mode state
const isDarkMode = ref(false)

// Load dark mode preference and watch for changes
onMounted(() => {
    const saved = localStorage.getItem('adminDarkMode')
    isDarkMode.value = saved === 'true'
    
    // Watch for localStorage changes
    const handleStorageChange = () => {
        const saved = localStorage.getItem('adminDarkMode')
        isDarkMode.value = saved === 'true'
    }
    
    window.addEventListener('storage', handleStorageChange)
    window.addEventListener('adminDarkModeChanged', handleStorageChange)
    
    // Cleanup on unmount
    return () => {
        window.removeEventListener('storage', handleStorageChange)
        window.removeEventListener('adminDarkModeChanged', handleStorageChange)
    }
})

// Computed properties for organized data
const bloomLevels = computed(() => {
    if (!props.profile) return {};
    return {
        remember: parseFloat(props.profile.bloom_remember || 0),
        understand: parseFloat(props.profile.bloom_understand || 0),
        apply: parseFloat(props.profile.bloom_apply || 0),
        analyze: parseFloat(props.profile.bloom_analyze || 0),
        evaluate: parseFloat(props.profile.bloom_evaluate || 0),
        create: parseFloat(props.profile.bloom_create || 0),
    };
});

const masteryWeights = computed(() => {
    if (!props.profile) return {};
    return {
        weight_accuracy: parseFloat(props.profile.weight_accuracy || 0),
        weight_consistency: parseFloat(props.profile.weight_consistency || 0),
        weight_depth: parseFloat(props.profile.weight_depth || 0),
        weight_transfer: parseFloat(props.profile.weight_transfer || 0),
        weight_retention: parseFloat(props.profile.weight_retention || 0),
        weight_speed: parseFloat(props.profile.weight_speed || 0),
    };
});
</script>