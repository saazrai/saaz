<template>
    <AdminLayout pageTitle="Create Course Difficulty Profile">
        <div class="p-6">
            <!-- Header -->
            <div class="mb-6">
                <h1 class="text-2xl font-bold text-gray-900">Create Course Difficulty Profile</h1>
                <p class="text-gray-600 mt-1">Configure adaptive learning parameters for a course</p>
            </div>

            <form @submit.prevent="submit" class="space-y-8">
                <!-- Course Selection -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Course Selection</h2>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Course</label>
                        <select
                            v-model="form.course_id"
                            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                            required
                        >
                            <option value="">Select a course</option>
                            <option v-for="course in courses" :key="course.id" :value="course.id">
                                {{ course.name }} ({{ course.code }})
                            </option>
                        </select>
                        <p v-if="errors.course_id" class="mt-1 text-sm text-red-600">{{ errors.course_id }}</p>
                    </div>
                </div>

                <!-- Basic Settings -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Basic Settings</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Base Difficulty (1-5)</label>
                            <input
                                v-model.number="form.base_difficulty"
                                type="number"
                                min="1"
                                max="5"
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                            <p class="mt-1 text-xs text-gray-500">1 = Beginner, 5 = Expert</p>
                        </div>


                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Scenario Complexity</label>
                            <select
                                v-model="form.scenario_complexity"
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                                <option value="low">Low - Simple scenarios</option>
                                <option value="medium">Medium - Multi-step scenarios</option>
                                <option value="high">High - Complex scenarios</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Time Pressure Factor</label>
                            <input
                                v-model.number="form.time_pressure_factor"
                                type="number"
                                min="0.5"
                                max="2"
                                step="0.1"
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                            <p class="mt-1 text-xs text-gray-500">1.0 = Normal, >1 = More pressure</p>
                        </div>
                    </div>
                </div>

                <!-- Bloom's Taxonomy Distribution -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Bloom's Taxonomy Distribution</h2>
                    <p class="text-sm text-gray-600 mb-4">Set the percentage distribution for each cognitive level. Total must equal 100%.</p>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div v-for="level in bloomLevels" :key="level.key">
                            <label class="block text-sm font-medium text-gray-700 mb-2">{{ level.label }}</label>
                            <div class="flex items-center">
                                <input
                                    v-model.number="form[level.key]"
                                    type="number"
                                    min="0"
                                    max="100"
                                    step="1"
                                    @input="updateBloomPercentage(level.key)"
                                    class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                                <span class="ml-2 text-gray-500">%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <div class="flex items-center justify-between">
                            <span class="text-sm font-medium text-gray-700">Total:</span>
                            <span :class="['text-sm font-bold', bloomTotal === 100 ? 'text-green-600' : 'text-red-600']">
                                {{ bloomTotal }}%
                            </span>
                        </div>
                        <p v-if="errors.bloom_distribution" class="mt-1 text-sm text-red-600">{{ errors.bloom_distribution }}</p>
                    </div>
                </div>

                <!-- Mastery Weights -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Mastery Dimension Weights</h2>
                    <p class="text-sm text-gray-600 mb-4">Set the weight for each mastery dimension. Total must equal 100%.</p>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div v-for="weight in masteryWeights" :key="weight.key">
                            <label class="block text-sm font-medium text-gray-700 mb-2">{{ weight.label }}</label>
                            <div class="flex items-center">
                                <input
                                    v-model.number="form[weight.key]"
                                    type="number"
                                    min="0"
                                    max="100"
                                    step="1"
                                    @input="updateWeightPercentage(weight.key)"
                                    class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                                <span class="ml-2 text-gray-500">%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <div class="flex items-center justify-between">
                            <span class="text-sm font-medium text-gray-700">Total:</span>
                            <span :class="['text-sm font-bold', weightTotal === 100 ? 'text-green-600' : 'text-red-600']">
                                {{ weightTotal }}%
                            </span>
                        </div>
                        <p v-if="errors.mastery_weights" class="mt-1 text-sm text-red-600">{{ errors.mastery_weights }}</p>
                    </div>
                </div>

                <!-- Thresholds and Requirements -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Thresholds and Requirements</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Minimum Accuracy (%)</label>
                            <input
                                v-model.number="form.minimum_accuracy"
                                type="number"
                                min="0"
                                max="100"
                                step="1"
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Consecutive Successes Required</label>
                            <input
                                v-model.number="form.consecutive_success_required"
                                type="number"
                                min="1"
                                max="10"
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                        </div>

                    </div>
                </div>

                <!-- Actions -->
                <div class="flex justify-end space-x-3">
                    <Link
                        :href="route('admin.settings.learning.course-difficulty-profiles.index')"
                        class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                    >
                        Cancel
                    </Link>
                    <button
                        type="submit"
                        :disabled="processing"
                        class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
                    >
                        {{ processing ? 'Creating...' : 'Create Profile' }}
                    </button>
                </div>
            </form>
        </div>
    </AdminLayout>
</template>

<script setup>
import { ref, computed, reactive } from 'vue';
import { Link, router, useForm } from '@inertiajs/vue3';
import AdminLayout from '@/Layouts/AdminLayout.vue';

const props = defineProps({
    courses: Array,
    defaultValues: Object,
    errors: Object,
});

const bloomLevels = [
    { key: 'bloom_remember', label: 'Remember' },
    { key: 'bloom_understand', label: 'Understand' },
    { key: 'bloom_apply', label: 'Apply' },
    { key: 'bloom_analyze', label: 'Analyze' },
    { key: 'bloom_evaluate', label: 'Evaluate' },
    { key: 'bloom_create', label: 'Create' },
];

const masteryWeights = [
    { key: 'weight_accuracy', label: 'Accuracy' },
    { key: 'weight_consistency', label: 'Consistency' },
    { key: 'weight_depth', label: 'Depth' },
    { key: 'weight_transfer', label: 'Transfer' },
    { key: 'weight_retention', label: 'Retention' },
    { key: 'weight_speed', label: 'Speed' },
];

const form = reactive({
    course_id: '',
    base_difficulty: props.defaultValues.base_difficulty,
    scenario_complexity: props.defaultValues.scenario_complexity,
    time_pressure_factor: props.defaultValues.time_pressure_factor,
    
    // Bloom levels (percentages)
    bloom_remember: props.defaultValues.bloom_remember * 100,
    bloom_understand: props.defaultValues.bloom_understand * 100,
    bloom_apply: props.defaultValues.bloom_apply * 100,
    bloom_analyze: props.defaultValues.bloom_analyze * 100,
    bloom_evaluate: props.defaultValues.bloom_evaluate * 100,
    bloom_create: props.defaultValues.bloom_create * 100,
    
    // Mastery weights (percentages)
    weight_accuracy: props.defaultValues.weight_accuracy * 100,
    weight_consistency: props.defaultValues.weight_consistency * 100,
    weight_depth: props.defaultValues.weight_depth * 100,
    weight_transfer: props.defaultValues.weight_transfer * 100,
    weight_retention: props.defaultValues.weight_retention * 100,
    weight_speed: props.defaultValues.weight_speed * 100,
    
    // Thresholds
    minimum_accuracy: props.defaultValues.minimum_accuracy * 100,
    consecutive_success_required: props.defaultValues.consecutive_success_required,
});

const processing = ref(false);

const bloomTotal = computed(() => {
    return Math.round(
        form.bloom_remember + form.bloom_understand + form.bloom_apply +
        form.bloom_analyze + form.bloom_evaluate + form.bloom_create
    );
});

const weightTotal = computed(() => {
    return Math.round(
        form.weight_accuracy + form.weight_consistency + form.weight_depth +
        form.weight_transfer + form.weight_retention + form.weight_speed
    );
});

const updateBloomPercentage = (key) => {
    form[key] = Math.max(0, Math.min(100, form[key]));
};

const updateWeightPercentage = (key) => {
    form[key] = Math.max(0, Math.min(100, form[key]));
};

const submit = () => {
    processing.value = true;
    
    // Convert percentages back to decimals
    const data = {
        ...form,
        bloom_remember: form.bloom_remember / 100,
        bloom_understand: form.bloom_understand / 100,
        bloom_apply: form.bloom_apply / 100,
        bloom_analyze: form.bloom_analyze / 100,
        bloom_evaluate: form.bloom_evaluate / 100,
        bloom_create: form.bloom_create / 100,
        weight_accuracy: form.weight_accuracy / 100,
        weight_consistency: form.weight_consistency / 100,
        weight_depth: form.weight_depth / 100,
        weight_transfer: form.weight_transfer / 100,
        weight_retention: form.weight_retention / 100,
        weight_speed: form.weight_speed / 100,
        minimum_accuracy: form.minimum_accuracy / 100,
    };
    
    router.post(route('admin.settings.learning.course-difficulty-profiles.store'), data, {
        onFinish: () => {
            processing.value = false;
        },
    });
};
</script>