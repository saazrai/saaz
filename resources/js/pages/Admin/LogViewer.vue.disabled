<template>
  <AdminLayout pageTitle="Log Viewer">
    <!-- Header -->
    <div class="mb-6">
      <div class="flex justify-between items-center">
        <div>
          <h1 :class="[
            'text-3xl font-bold',
            isDarkMode ? 'text-white' : 'text-gray-900'
          ]">Laravel Log Viewer</h1>
          <p :class="[
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">Monitor application logs and system events in real-time.</p>
        </div>
        <div class="flex items-center gap-3">
          <!-- Auto-refresh toggle -->
          <div class="flex items-center gap-2" v-if="activeTab === 'realtime'">
            <input
              type="checkbox"
              id="autoRefresh"
              v-model="autoRefresh"
              :class="[
                'rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-500 focus:ring-blue-500',
                isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white'
              ]"
            />
            <label for="autoRefresh" :class="[
              'text-sm',
              isDarkMode ? 'text-gray-300' : 'text-gray-700'
            ]">Auto-refresh</label>
          </div>
          
          <!-- Clear logs dropdown -->
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                <Trash2 class="h-4 w-4 mr-2" />
                Clear Logs
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem @click="clearLogs(selectedFile)" class="text-orange-600">
                Clear {{ selectedFile }}
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem @click="clearLogs('all')" class="text-red-600">
                Clear All Logs
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <!-- Download button -->
          <Button variant="outline" size="sm" @click="downloadLog">
            <Download class="h-4 w-4 mr-2" />
            Download
          </Button>
        </div>
      </div>
    </div>

    <!-- File selector and info -->
    <div :class="[
      'rounded-lg shadow-sm border mb-6',
      isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
    ]">
      <div class="p-4">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center gap-4">
            <div>
              <label for="logFile" :class="[
                'block text-sm font-medium mb-1',
                isDarkMode ? 'text-gray-300' : 'text-gray-700'
              ]">Log File</label>
              <select
                id="logFile"
                v-model="selectedFile"
                @change="onFileChange"
                :class="[
                  'block w-64 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500',
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white' 
                    : 'bg-white border-gray-300 text-gray-900'
                ]"
              >
                <option v-for="file in logFiles" :key="file.name" :value="file.name">
                  {{ file.name }}
                </option>
              </select>
            </div>
            
            <div v-if="fileInfo" :class="[
              'text-sm',
              isDarkMode ? 'text-gray-400' : 'text-gray-600'
            ]">
              <div>Size: {{ formatFileSize(fileInfo.size) }}</div>
              <div>Modified: {{ fileInfo.lastModified }}</div>
            </div>
          </div>

          <!-- Refresh button -->
          <Button variant="outline" size="sm" @click="refreshData" :disabled="loading">
            <RefreshCw class="h-4 w-4 mr-2" :class="{ 'animate-spin': loading }" />
            Refresh
          </Button>
        </div>
      </div>
    </div>

    <!-- Tab Navigation -->
    <div class="mb-6">
      <nav class="flex space-x-8" aria-label="Tabs">
        <button
          v-for="tab in tabs"
          :key="tab.id"
          @click="activeTab = tab.id"
          :class="[
            activeTab === tab.id
              ? 'border-blue-500 text-blue-600'
              : isDarkMode 
                ? 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
            'whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm flex items-center'
          ]"
        >
          <component :is="tab.icon" class="w-4 h-4 mr-2" />
          {{ tab.name }}
        </button>
      </nav>
    </div>

    <!-- Tab Content -->
    <div class="space-y-6">
      <!-- Raw Logs Tab -->
      <div v-show="activeTab === 'raw'" :class="[
        'rounded-lg shadow-sm border',
        isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
      ]">
        <div :class="[
          'p-4 border-b',
          isDarkMode ? 'border-gray-700' : 'border-gray-200'
        ]">
          <div class="flex items-center justify-between">
            <h3 :class="[
              'text-lg font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">Raw Log Content</h3>
            <div class="flex items-center gap-2">
              <label for="rawLines" :class="[
                'text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-700'
              ]">Lines:</label>
              <select
                id="rawLines"
                v-model="rawLinesCount"
                @change="loadRawLogs"
                :class="[
                  'text-sm rounded',
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white' 
                    : 'bg-white border-gray-300 text-gray-900'
                ]"
              >
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
              </select>
            </div>
          </div>
        </div>
        <div class="p-4">
          <div :class="[
            'p-4 rounded-lg font-mono text-sm overflow-x-auto max-h-96 overflow-y-auto',
            isDarkMode ? 'bg-gray-900 text-green-400' : 'bg-gray-900 text-green-400'
          ]">
            <pre v-if="rawContent">{{ rawContent }}</pre>
            <div v-else :class="[
              isDarkMode ? 'text-gray-500' : 'text-gray-500'
            ]">No log content available</div>
          </div>
        </div>
      </div>

      <!-- Parsed Logs Tab -->
      <div v-show="activeTab === 'parsed'" :class="[
        'rounded-lg shadow-sm border',
        isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
      ]">
        <div :class="[
          'p-4 border-b',
          isDarkMode ? 'border-gray-700' : 'border-gray-200'
        ]">
          <div class="flex items-center justify-between mb-4">
            <h3 :class="[
              'text-lg font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">Parsed Log Entries</h3>
            <div class="flex items-center gap-4">
              <!-- Search -->
              <div class="relative">
                <Search :class="[
                  'absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4',
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                ]" />
                <input
                  type="text"
                  v-model="searchTerm"
                  @input="debouncedSearch"
                  placeholder="Search logs..."
                  :class="[
                    'pl-10 pr-4 py-2 border rounded-md text-sm focus:ring-blue-500 focus:border-blue-500',
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  ]"
                />
              </div>
              
              <!-- Level filter -->
              <select
                v-model="selectedLevel"
                @change="loadParsedLogs"
                :class="[
                  'text-sm rounded',
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white' 
                    : 'bg-white border-gray-300 text-gray-900'
                ]"
              >
                <option value="">All Levels</option>
                <option v-for="level in logLevels" :key="level" :value="level">
                  {{ level.charAt(0).toUpperCase() + level.slice(1) }}
                </option>
              </select>
              
              <!-- Lines count -->
              <select
                v-model="parsedLinesCount"
                @change="loadParsedLogs"
                :class="[
                  'text-sm rounded',
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white' 
                    : 'bg-white border-gray-300 text-gray-900'
                ]"
              >
                <option value="50">50 entries</option>
                <option value="100">100 entries</option>
                <option value="500">500 entries</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="max-h-96 overflow-y-auto">
          <div v-if="parsedLogs.length === 0" :class="[
            'p-8 text-center',
            isDarkMode ? 'text-gray-400' : 'text-gray-500'
          ]">
            No log entries found matching your criteria
          </div>
          <div v-else :class="[
            'divide-y',
            isDarkMode ? 'divide-gray-700' : 'divide-gray-200'
          ]">
            <div
              v-for="(log, index) in parsedLogs"
              :key="index"
              :class="[
                'p-4',
                isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50',
                getLogLevelClass(log.level, isDarkMode)
              ]"
            >
              <div class="flex items-start gap-4">
                <div class="flex-shrink-0">
                  <span
                    class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                    :class="getLogLevelBadgeClass(log.level, isDarkMode)"
                  >
                    {{ log.level.toUpperCase() }}
                  </span>
                </div>
                <div class="flex-1 min-w-0">
                  <div class="flex items-center gap-2 mb-1">
                    <span :class="[
                      'text-sm font-mono',
                      isDarkMode ? 'text-gray-400' : 'text-gray-500'
                    ]">{{ log.timestamp }}</span>
                  </div>
                  <p :class="[
                    'text-sm break-words',
                    isDarkMode ? 'text-gray-200' : 'text-gray-900'
                  ]">{{ log.message }}</p>
                  <div v-if="log.context.trim()" class="mt-2">
                    <button
                      @click="toggleContext(index)"
                      class="text-xs text-blue-600 hover:text-blue-800"
                    >
                      {{ expandedContexts.has(index) ? 'Hide' : 'Show' }} Details
                    </button>
                    <div v-if="expandedContexts.has(index)" class="mt-2">
                      <pre :class="[
                        'text-xs p-2 rounded overflow-x-auto',
                        isDarkMode ? 'bg-gray-900 text-gray-300' : 'bg-gray-100 text-gray-800'
                      ]">{{ log.context.trim() }}</pre>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Real-time Logs Tab -->
      <div v-show="activeTab === 'realtime'" :class="[
        'rounded-lg shadow-sm border',
        isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
      ]">
        <div :class="[
          'p-4 border-b',
          isDarkMode ? 'border-gray-700' : 'border-gray-200'
        ]">
          <div class="flex items-center justify-between">
            <h3 :class="[
              'text-lg font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">Real-time Log Stream</h3>
            <div class="flex items-center gap-2">
              <div class="flex items-center gap-2">
                <div 
                  class="w-2 h-2 rounded-full"
                  :class="realtimeConnected ? 'bg-green-500' : 'bg-red-500'"
                ></div>
                <span :class="[
                  'text-sm',
                  isDarkMode ? 'text-gray-400' : 'text-gray-600'
                ]">
                  {{ realtimeConnected ? 'Connected' : 'Disconnected' }}
                </span>
              </div>
              <Button variant="outline" size="sm" @click="clearRealtimeLogs">
                Clear Stream
              </Button>
            </div>
          </div>
        </div>
        
        <div class="max-h-96 overflow-y-auto" ref="realtimeContainer">
          <div v-if="realtimeLogs.length === 0" :class="[
            'p-8 text-center',
            isDarkMode ? 'text-gray-400' : 'text-gray-500'
          ]">
            Waiting for new log entries...
          </div>
          <div v-else :class="[
            'divide-y',
            isDarkMode ? 'divide-gray-700' : 'divide-gray-200'
          ]">
            <div
              v-for="(log, index) in realtimeLogs"
              :key="`realtime-${index}`"
              :class="[
                'p-3 animate-fade-in',
                isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50',
                getLogLevelClass(log.level, isDarkMode)
              ]"
            >
              <div class="flex items-start gap-3">
                <div class="flex-shrink-0">
                  <span
                    class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium"
                    :class="getLogLevelBadgeClass(log.level, isDarkMode)"
                  >
                    {{ log.level.toUpperCase() }}
                  </span>
                </div>
                <div class="flex-1 min-w-0">
                  <div class="flex items-center gap-2 mb-1">
                    <span :class="[
                      'text-sm font-mono',
                      isDarkMode ? 'text-gray-400' : 'text-gray-500'
                    ]">{{ log.timestamp }}</span>
                  </div>
                  <p :class="[
                    'text-sm break-words',
                    isDarkMode ? 'text-gray-200' : 'text-gray-900'
                  ]">{{ log.message }}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Statistics Tab -->
      <div v-show="activeTab === 'stats'" class="space-y-6">
        <!-- Stats Overview Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div :class="[
            'rounded-lg shadow-sm border p-6',
            isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
          ]">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <FileText class="h-8 w-8 text-blue-600" />
              </div>
              <div class="ml-4">
                <p :class="[
                  'text-sm font-medium',
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                ]">Total Logs</p>
                <p :class="[
                  'text-2xl font-bold',
                  isDarkMode ? 'text-white' : 'text-gray-900'
                ]">{{ stats.performance?.totalLogs || 0 }}</p>
              </div>
            </div>
          </div>
          
          <div :class="[
            'rounded-lg shadow-sm border p-6',
            isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
          ]">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <AlertTriangle class="h-8 w-8 text-red-600" />
              </div>
              <div class="ml-4">
                <p :class="[
                  'text-sm font-medium',
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                ]">Critical</p>
                <p class="text-2xl font-bold text-red-600">{{ stats.performance?.criticalCount || 0 }}</p>
              </div>
            </div>
          </div>
          
          <div :class="[
            'rounded-lg shadow-sm border p-6',
            isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
          ]">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <XCircle class="h-8 w-8 text-orange-600" />
              </div>
              <div class="ml-4">
                <p :class="[
                  'text-sm font-medium',
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                ]">Errors</p>
                <p class="text-2xl font-bold text-orange-600">{{ stats.performance?.errorCount || 0 }}</p>
              </div>
            </div>
          </div>
          
          <div :class="[
            'rounded-lg shadow-sm border p-6',
            isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
          ]">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <AlertTriangle class="h-8 w-8 text-yellow-600" />
              </div>
              <div class="ml-4">
                <p :class="[
                  'text-sm font-medium',
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                ]">Warnings</p>
                <p class="text-2xl font-bold text-yellow-600">{{ stats.performance?.warningCount || 0 }}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Log Level Distribution -->
        <div :class="[
          'rounded-lg shadow-sm border',
          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
        ]">
          <div :class="[
            'p-4 border-b',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <h3 :class="[
              'text-lg font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">Log Level Distribution</h3>
          </div>
          <div class="p-4">
            <div class="space-y-3">
              <div
                v-for="(count, level) in stats.levelCounts"
                :key="level"
                class="flex items-center justify-between"
              >
                <div class="flex items-center gap-3">
                  <span
                    class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                    :class="getLogLevelBadgeClass(level, isDarkMode)"
                  >
                    {{ level.toUpperCase() }}
                  </span>
                  <span :class="[
                    'text-sm',
                    isDarkMode ? 'text-gray-300' : 'text-gray-700'
                  ]">{{ level.charAt(0).toUpperCase() + level.slice(1) }}</span>
                </div>
                <div class="flex items-center gap-2">
                  <div :class="[
                    'w-32 rounded-full h-2',
                    isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
                  ]">
                    <div
                      class="h-2 rounded-full"
                      :class="getLogLevelBarClass(level)"
                      :style="`width: ${getPercentage(count, stats.performance?.totalLogs)}%`"
                    ></div>
                  </div>
                  <span :class="[
                    'text-sm font-medium w-8 text-right',
                    isDarkMode ? 'text-gray-200' : 'text-gray-900'
                  ]">{{ count }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Critical Events -->
        <div v-if="stats.criticalEvents?.length > 0" :class="[
          'rounded-lg shadow-sm border',
          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
        ]">
          <div :class="[
            'p-4 border-b',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <h3 :class="[
              'text-lg font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">Recent Critical Events</h3>
          </div>
          <div :class="[
            'divide-y',
            isDarkMode ? 'divide-gray-700' : 'divide-gray-200'
          ]">
            <div
              v-for="(event, index) in stats.criticalEvents"
              :key="index"
              class="p-4"
            >
              <div class="flex items-start gap-3">
                <span
                  class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800"
                >
                  {{ event.level.toUpperCase() }}
                </span>
                <div class="flex-1">
                  <p :class="[
                    'text-sm',
                    isDarkMode ? 'text-gray-200' : 'text-gray-900'
                  ]">{{ event.message }}</p>
                  <p :class="[
                    'text-xs mt-1',
                    isDarkMode ? 'text-gray-400' : 'text-gray-500'
                  ]">{{ event.timestamp }}</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Top Errors -->
        <div v-if="stats.topErrors?.length > 0" :class="[
          'rounded-lg shadow-sm border',
          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
        ]">
          <div :class="[
            'p-4 border-b',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <h3 :class="[
              'text-lg font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">Most Frequent Errors</h3>
          </div>
          <div :class="[
            'divide-y',
            isDarkMode ? 'divide-gray-700' : 'divide-gray-200'
          ]">
            <div
              v-for="(error, index) in stats.topErrors"
              :key="index"
              class="p-4"
            >
              <div class="flex items-center justify-between">
                <p :class="[
                  'text-sm flex-1 mr-4',
                  isDarkMode ? 'text-gray-200' : 'text-gray-900'
                ]">{{ error.message }}</p>
                <span class="text-sm font-medium text-red-600">{{ error.count }} times</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, reactive, onMounted, onUnmounted, nextTick, computed, watch } from 'vue'
import { router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Button } from '@/Components/shadcn/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/Components/shadcn/ui/dropdown-menu'
import {
  FileText,
  Eye,
  Activity,
  BarChart3,
  Search,
  RefreshCw,
  Download,
  Trash2,
  AlertTriangle,
  XCircle,
} from 'lucide-vue-next'

// Props
const props = defineProps({
  logFiles: Array,
  selectedFile: String,
  logLevels: Array,
})

// Custom debounce function
const debounce = (func, wait) => {
  let timeout
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout)
      func(...args)
    }
    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

// Dark mode state management
const isDarkMode = ref(false)

// Initialize dark mode from localStorage
const initializeDarkMode = () => {
  const saved = localStorage.getItem('adminDarkMode')
  if (saved !== null) {
    isDarkMode.value = JSON.parse(saved)
  }
}

// Listen for dark mode changes
const handleDarkModeChange = (event) => {
  if (event.key === 'adminDarkMode') {
    isDarkMode.value = JSON.parse(event.newValue || 'false')
  }
}

const handleCustomDarkModeChange = (event) => {
  isDarkMode.value = event.detail.isDarkMode
}

// Reactive data
const loading = ref(false)
const selectedFile = ref(props.selectedFile)
const activeTab = ref('parsed')
const fileInfo = ref(null)

// Raw logs
const rawContent = ref('')
const rawLinesCount = ref(100)

// Parsed logs
const parsedLogs = ref([])
const parsedLinesCount = ref(100)
const selectedLevel = ref('')
const searchTerm = ref('')
const expandedContexts = ref(new Set())

// Real-time logs
const realtimeLogs = ref([])
const autoRefresh = ref(false)
const realtimeConnected = ref(false)
const realtimeInterval = ref(null)
const filePosition = ref(0)
const realtimeContainer = ref(null)

// Statistics
const stats = ref({})

// Tab configuration
const tabs = [
  { id: 'parsed', name: 'Parsed Logs', icon: Eye },
  { id: 'raw', name: 'Raw Logs', icon: FileText },
  { id: 'realtime', name: 'Real-time', icon: Activity },
  { id: 'stats', name: 'Statistics', icon: BarChart3 },
]

// Computed
const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

const getPercentage = (value, total) => {
  if (!total || total === 0) return 0
  return Math.round((value / total) * 100)
}

// Log level styling
const getLogLevelClass = (level, isDark = false) => {
  if (isDark) {
    const darkClasses = {
      emergency: 'border-l-4 border-red-500 bg-red-900/20',
      alert: 'border-l-4 border-red-500 bg-red-900/20',
      critical: 'border-l-4 border-red-500 bg-red-900/20',
      error: 'border-l-4 border-orange-500 bg-orange-900/20',
      warning: 'border-l-4 border-yellow-500 bg-yellow-900/20',
      notice: 'border-l-4 border-blue-500 bg-blue-900/20',
      info: 'border-l-4 border-green-500 bg-green-900/20',
      debug: 'border-l-4 border-gray-500 bg-gray-900/20',
    }
    return darkClasses[level] || ''
  }
  
  const classes = {
    emergency: 'border-l-4 border-red-600 bg-red-50',
    alert: 'border-l-4 border-red-500 bg-red-50',
    critical: 'border-l-4 border-red-500 bg-red-50',
    error: 'border-l-4 border-orange-500 bg-orange-50',
    warning: 'border-l-4 border-yellow-500 bg-yellow-50',
    notice: 'border-l-4 border-blue-500 bg-blue-50',
    info: 'border-l-4 border-green-500 bg-green-50',
    debug: 'border-l-4 border-gray-500 bg-gray-50',
  }
  return classes[level] || ''
}

const getLogLevelBadgeClass = (level, isDark = false) => {
  if (isDark) {
    const darkClasses = {
      emergency: 'bg-red-900/50 text-red-300 border border-red-700',
      alert: 'bg-red-900/50 text-red-300 border border-red-700',
      critical: 'bg-red-900/50 text-red-300 border border-red-700',
      error: 'bg-orange-900/50 text-orange-300 border border-orange-700',
      warning: 'bg-yellow-900/50 text-yellow-300 border border-yellow-700',
      notice: 'bg-blue-900/50 text-blue-300 border border-blue-700',
      info: 'bg-green-900/50 text-green-300 border border-green-700',
      debug: 'bg-gray-900/50 text-gray-300 border border-gray-700',
    }
    return darkClasses[level] || 'bg-gray-900/50 text-gray-300 border border-gray-700'
  }
  
  const classes = {
    emergency: 'bg-red-100 text-red-800',
    alert: 'bg-red-100 text-red-800',
    critical: 'bg-red-100 text-red-800',
    error: 'bg-orange-100 text-orange-800',
    warning: 'bg-yellow-100 text-yellow-800',
    notice: 'bg-blue-100 text-blue-800',
    info: 'bg-green-100 text-green-800',
    debug: 'bg-gray-100 text-gray-800',
  }
  return classes[level] || 'bg-gray-100 text-gray-800'
}

const getLogLevelBarClass = (level) => {
  const classes = {
    emergency: 'bg-red-600',
    alert: 'bg-red-500',
    critical: 'bg-red-500',
    error: 'bg-orange-500',
    warning: 'bg-yellow-500',
    notice: 'bg-blue-500',
    info: 'bg-green-500',
    debug: 'bg-gray-500',
  }
  return classes[level] || 'bg-gray-500'
}

// Methods
const onFileChange = () => {
  refreshData()
}

const refreshData = async () => {
  loading.value = true
  try {
    await Promise.all([
      loadFileInfo(),
      loadDataForActiveTab(),
    ])
  } finally {
    loading.value = false
  }
}

const loadDataForActiveTab = async () => {
  switch (activeTab.value) {
    case 'raw':
      await loadRawLogs()
      break
    case 'parsed':
      await loadParsedLogs()
      break
    case 'realtime':
      startRealtimePolling()
      break
    case 'stats':
      await loadStats()
      break
  }
}

const loadFileInfo = async () => {
  const file = props.logFiles.find(f => f.name === selectedFile.value)
  if (file) {
    fileInfo.value = file
  }
}

const loadRawLogs = async () => {
  try {
    const response = await fetch(`/admin/logs/raw?file=${selectedFile.value}&lines=${rawLinesCount.value}`)
    const data = await response.json()
    
    if (data.error) {
      console.error(data.error)
      return
    }
    
    rawContent.value = data.content
    fileInfo.value = {
      size: data.size,
      lastModified: data.lastModified,
    }
  } catch (error) {
    console.error('Failed to load raw logs:', error)
  }
}

const loadParsedLogs = async () => {
  try {
    const params = new URLSearchParams({
      file: selectedFile.value,
      lines: parsedLinesCount.value,
    })
    
    if (selectedLevel.value) {
      params.append('level', selectedLevel.value)
    }
    
    if (searchTerm.value) {
      params.append('search', searchTerm.value)
    }
    
    const response = await fetch(`/admin/logs/parsed?${params}`)
    const data = await response.json()
    
    if (data.error) {
      console.error(data.error)
      return
    }
    
    parsedLogs.value = data.logs
  } catch (error) {
    console.error('Failed to load parsed logs:', error)
  }
}

const loadStats = async () => {
  try {
    const response = await fetch(`/admin/logs/stats?file=${selectedFile.value}&hours=24`)
    const data = await response.json()
    
    if (data.error) {
      console.error(data.error)
      return
    }
    
    stats.value = data
  } catch (error) {
    console.error('Failed to load log statistics:', error)
  }
}

const startRealtimePolling = () => {
  stopRealtimePolling()
  
  if (autoRefresh.value) {
    realtimeConnected.value = true
    realtimeInterval.value = setInterval(pollRealtimeLogs, 2000)
  }
}

const stopRealtimePolling = () => {
  if (realtimeInterval.value) {
    clearInterval(realtimeInterval.value)
    realtimeInterval.value = null
  }
  realtimeConnected.value = false
}

const pollRealtimeLogs = async () => {
  try {
    const response = await fetch(`/admin/logs/realtime?file=${selectedFile.value}&position=${filePosition.value}`)
    const data = await response.json()
    
    if (data.error) {
      console.error(data.error)
      return
    }
    
    if (data.hasNewContent) {
      realtimeLogs.value.push(...data.logs)
      filePosition.value = data.position
      
      // Limit the number of realtime logs to prevent memory issues
      if (realtimeLogs.value.length > 500) {
        realtimeLogs.value = realtimeLogs.value.slice(-300)
      }
      
      // Auto-scroll to bottom
      await nextTick()
      if (realtimeContainer.value) {
        realtimeContainer.value.scrollTop = realtimeContainer.value.scrollHeight
      }
    }
  } catch (error) {
    console.error('Failed to poll realtime logs:', error)
    realtimeConnected.value = false
  }
}

const clearRealtimeLogs = () => {
  realtimeLogs.value = []
  filePosition.value = 0
}

const clearLogs = async (file) => {
  if (!confirm(`Are you sure you want to clear ${file === 'all' ? 'all log files' : file}?`)) {
    return
  }
  
  try {
    const response = await fetch('/admin/logs/clear', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
      },
      body: JSON.stringify({ file }),
    })
    
    const data = await response.json()
    
    if (data.error) {
      alert(data.error)
      return
    }
    
    alert(data.message)
    refreshData()
  } catch (error) {
    console.error('Failed to clear logs:', error)
    alert('Failed to clear logs')
  }
}

const downloadLog = () => {
  window.open(`/admin/logs/download?file=${selectedFile.value}`, '_blank')
}

const toggleContext = (index) => {
  if (expandedContexts.value.has(index)) {
    expandedContexts.value.delete(index)
  } else {
    expandedContexts.value.add(index)
  }
}

// Debounced search
const debouncedSearch = debounce(() => {
  loadParsedLogs()
}, 500)

// Watch for tab changes
watch(activeTab, () => {
  if (activeTab.value === 'realtime' && autoRefresh.value) {
    startRealtimePolling()
  } else {
    stopRealtimePolling()
  }
  
  loadDataForActiveTab()
})

// Watch for auto-refresh changes
watch(autoRefresh, () => {
  if (activeTab.value === 'realtime') {
    if (autoRefresh.value) {
      startRealtimePolling()
    } else {
      stopRealtimePolling()
    }
  }
})

// Lifecycle
onMounted(() => {
  // Initialize dark mode
  initializeDarkMode()
  
  // Listen for dark mode changes
  window.addEventListener('storage', handleDarkModeChange)
  window.addEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
  
  refreshData()
})

onUnmounted(() => {
  stopRealtimePolling()
  
  // Remove event listeners
  window.removeEventListener('storage', handleDarkModeChange)
  window.removeEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
})
</script>

<style scoped>
@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}

pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}
</style>
