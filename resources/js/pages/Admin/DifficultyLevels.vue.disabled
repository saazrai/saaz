<template>
  <AdminLayout>
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 :class="['text-3xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">Difficulty Levels</h1>
          <p :class="[isDarkMode ? 'text-gray-300' : 'text-gray-600']">Manage difficulty levels for assessments</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-4 mt-4 md:mt-0">
          <button
            @click="showCreateModal = true"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
          >
            <PlusIcon class="h-5 w-5" />
            <span>Create Difficulty Level</span>
          </button>
        </div>
      </div>

      <!-- Table -->
      <div :class="['rounded-lg shadow-sm', isDarkMode ? 'bg-gray-800' : 'bg-white']">
        <table class="min-w-full">
          <thead>
            <tr :class="['border-b', isDarkMode ? 'border-gray-700' : 'border-gray-200']">
              <th :class="['px-8 py-4 text-left text-sm font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Name
              </th>
              <th :class="['px-8 py-4 text-left text-sm font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Score
              </th>
              <th :class="['px-8 py-4 text-left text-sm font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Description
              </th>
              <th :class="['px-8 py-4 text-left text-sm font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Questions
              </th>
              <th :class="['px-8 py-4 text-right text-sm font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                
              </th>
            </tr>
          </thead>
          <tbody>
            <tr 
              v-for="level in difficultyLevels.data" 
              :key="level.id" 
              @click="showLevel(level)"
              :class="[
                'border-b cursor-pointer transition-colors',
                isDarkMode 
                  ? 'border-gray-700 hover:bg-gray-700' 
                  : 'border-gray-100 hover:bg-gray-50'
              ]"
            >
              <td class="px-8 py-6">
                <div :class="['font-medium', isDarkMode ? 'text-white' : 'text-gray-900']">{{ level.name }}</div>
              </td>
              <td class="px-8 py-6">
                <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium"
                      :class="getDifficultyBadgeClass(level.difficulty_score)">
                    {{ level.difficulty_score }}
                </span>
              </td>
              <td class="px-8 py-6">
                <div :class="['max-w-xs truncate', isDarkMode ? 'text-gray-300' : 'text-gray-600']">{{ level.description || 'No description' }}</div>
              </td>
              <td class="px-8 py-6">
                <div :class="[isDarkMode ? 'text-gray-300' : 'text-gray-600']">{{ level.questions_count || 0 }}</div>
              </td>
              <td class="px-8 py-6 text-right">
                <span :class="[isDarkMode ? 'text-gray-500' : 'text-gray-400']" class="text-xl">â€º</span>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div v-if="difficultyLevels.links" class="mt-6 flex justify-center">
        <nav class="flex items-center gap-2">
          <Link
            v-if="difficultyLevels.prev_page_url"
            :href="difficultyLevels.prev_page_url"
            :class="[
              'px-3 py-2 text-sm font-medium border rounded-lg transition-colors',
              isDarkMode 
                ? 'text-gray-300 bg-gray-800 border-gray-600 hover:bg-gray-700'
                : 'text-gray-500 bg-white border-gray-300 hover:bg-gray-50'
            ]"
          >
            Previous
          </Link>
          <Link
            v-if="difficultyLevels.next_page_url"
            :href="difficultyLevels.next_page_url"
            :class="[
              'px-3 py-2 text-sm font-medium border rounded-lg transition-colors',
              isDarkMode 
                ? 'text-gray-300 bg-gray-800 border-gray-600 hover:bg-gray-700'
                : 'text-gray-500 bg-white border-gray-300 hover:bg-gray-50'
            ]"
          >
            Next
          </Link>
        </nav>
      </div>
    </div>

        <!-- Create/Edit Modal -->
        <TransitionRoot as="template" :show="showCreateModal || showEditModal">
            <Dialog as="div" class="relative z-10" @close="closeModal">
                <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0" enter-to="opacity-100" leave="ease-in duration-200" leave-from="opacity-100" leave-to="opacity-0">
                    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
                </TransitionChild>

                <div class="fixed inset-0 z-10 overflow-y-auto">
                    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                        <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" enter-to="opacity-100 translate-y-0 sm:scale-100" leave="ease-in duration-200" leave-from="opacity-100 translate-y-0 sm:scale-100" leave-to="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
                            <DialogPanel :class="['relative transform overflow-hidden rounded-lg px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6', isDarkMode ? 'bg-gray-800' : 'bg-white']">
                                <form @submit.prevent="submitForm">
                                    <div>
                                        <h3 :class="['text-lg font-medium leading-6', isDarkMode ? 'text-white' : 'text-gray-900']">
                                            {{ showEditModal ? 'Edit Difficulty Level' : 'Create Difficulty Level' }}
                                        </h3>
                                        <div class="mt-6 space-y-4">
                                            <div>
                                                <label for="name" :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Name</label>
                                                <input
                                                    v-model="form.name"
                                                    type="text"
                                                    id="name"
                                                    required
                                                    :class="[
                                                      'mt-1 block w-full rounded-md shadow-sm focus:ring-indigo-500 sm:text-sm',
                                                      isDarkMode 
                                                        ? 'bg-gray-700 border-gray-600 text-white focus:border-indigo-400' 
                                                        : 'bg-white border-gray-300 text-gray-900 focus:border-indigo-500'
                                                    ]"
                                                />
                                                <div v-if="form.errors.name" class="mt-1 text-sm text-red-600">{{ form.errors.name }}</div>
                                            </div>

                                            <div>
                                                <label for="difficulty_score" :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Difficulty Score (1-10)</label>
                                                <input
                                                    v-model.number="form.difficulty_score"
                                                    type="number"
                                                    id="difficulty_score"
                                                    min="1"
                                                    max="10"
                                                    required
                                                    :class="[
                                                      'mt-1 block w-full rounded-md shadow-sm focus:ring-indigo-500 sm:text-sm',
                                                      isDarkMode 
                                                        ? 'bg-gray-700 border-gray-600 text-white focus:border-indigo-400' 
                                                        : 'bg-white border-gray-300 text-gray-900 focus:border-indigo-500'
                                                    ]"
                                                />
                                                <div v-if="form.errors.difficulty_score" class="mt-1 text-sm text-red-600">{{ form.errors.difficulty_score }}</div>
                                            </div>

                                            <div>
                                                <label for="description" :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Description</label>
                                                <textarea
                                                    v-model="form.description"
                                                    id="description"
                                                    rows="3"
                                                    :class="[
                                                      'mt-1 block w-full rounded-md shadow-sm focus:ring-indigo-500 sm:text-sm',
                                                      isDarkMode 
                                                        ? 'bg-gray-700 border-gray-600 text-white focus:border-indigo-400 placeholder-gray-400' 
                                                        : 'bg-white border-gray-300 text-gray-900 focus:border-indigo-500 placeholder-gray-500'
                                                    ]"
                                                    placeholder="Optional description..."
                                                ></textarea>
                                                <div v-if="form.errors.description" class="mt-1 text-sm text-red-600">{{ form.errors.description }}</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                                        <button
                                            type="submit"
                                            :disabled="form.processing"
                                            class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2 disabled:opacity-50"
                                        >
                                            {{ form.processing ? 'Saving...' : (showEditModal ? 'Update' : 'Create') }}
                                        </button>
                                        <button
                                            type="button"
                                            @click="closeModal"
                                            :class="[
                                              'mt-3 inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm ring-1 ring-inset sm:col-start-1 sm:mt-0',
                                              isDarkMode 
                                                ? 'bg-gray-700 text-gray-300 ring-gray-600 hover:bg-gray-600' 
                                                : 'bg-white text-gray-900 ring-gray-300 hover:bg-gray-50'
                                            ]"
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </form>
                            </DialogPanel>
                        </TransitionChild>
                    </div>
                </div>
            </Dialog>
        </TransitionRoot>
    </AdminLayout>
</template>

<script setup>
import { ref, reactive, onMounted, onUnmounted } from 'vue'
import { useForm, Link, router } from '@inertiajs/vue3'
import { Dialog, DialogPanel, TransitionChild, TransitionRoot } from '@headlessui/vue'
import { PlusIcon } from '@heroicons/vue/24/outline'
import AdminLayout from '@/Layouts/AdminLayout.vue'

const props = defineProps({
    difficultyLevels: Object,
})

// Dark mode handling
const isDarkMode = ref(false)

const updateDarkMode = () => {
  isDarkMode.value = localStorage.getItem('adminDarkMode') === 'true'
}

onMounted(() => {
  updateDarkMode()
  window.addEventListener('storage', updateDarkMode)
  window.addEventListener('adminDarkModeChanged', updateDarkMode)
})

onUnmounted(() => {
  window.removeEventListener('storage', updateDarkMode)
  window.removeEventListener('adminDarkModeChanged', updateDarkMode)
})

const showCreateModal = ref(false)
const showEditModal = ref(false)
const editingLevel = ref(null)

const form = useForm({
    name: '',
    difficulty_score: 1,
    description: '',
})

// Difficulty badge color function with dark mode support
const getDifficultyBadgeClass = (score) => {
  if (isDarkMode.value) {
    if (score <= 3) return 'bg-green-900/30 text-green-400 border border-green-800'
    if (score <= 6) return 'bg-yellow-900/30 text-yellow-400 border border-yellow-800'
    if (score <= 8) return 'bg-orange-900/30 text-orange-400 border border-orange-800'
    return 'bg-red-900/30 text-red-400 border border-red-800'
  } else {
    if (score <= 3) return 'bg-green-100 text-green-800 border border-green-200'
    if (score <= 6) return 'bg-yellow-100 text-yellow-800 border border-yellow-200'
    if (score <= 8) return 'bg-orange-100 text-orange-800 border border-orange-200'
    return 'bg-red-100 text-red-800 border border-red-200'
  }
}

const showLevel = (level) => {
    // For now, redirect to edit since there's no Show page for difficulty levels
    editLevel(level)
}

const editLevel = (level) => {
    editingLevel.value = level
    form.name = level.name
    form.difficulty_score = level.difficulty_score
    form.description = level.description || ''
    showEditModal.value = true
}

const deleteLevel = (level) => {
    if (level.questions_count > 0) {
        alert('Cannot delete difficulty level that is being used by questions')
        return
    }
    
    if (confirm('Are you sure you want to delete this difficulty level?')) {
        router.delete(route('admin.difficulty-levels.destroy', level.id))
    }
}

const submitForm = () => {
    if (showEditModal.value) {
        form.put(route('admin.difficulty-levels.update', editingLevel.value.id), {
            onSuccess: () => closeModal()
        })
    } else {
        form.post(route('admin.difficulty-levels.store'), {
            onSuccess: () => closeModal()
        })
    }
}

const closeModal = () => {
    showCreateModal.value = false
    showEditModal.value = false
    editingLevel.value = null
    form.reset()
    form.clearErrors()
}
</script>
