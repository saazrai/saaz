<template>
  <AdminLayout pageTitle="Learner Progress Details">
    <!-- Back Navigation -->
    <div class="mb-6">
      <Link 
        :href="route('admin.learner-progress.index')" 
        class="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors"
      >
        <ChevronLeft class="w-4 h-4 mr-1" />
        Back to Learner Progress
      </Link>
    </div>

    <!-- Learner Header -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-4">
          <Avatar class="h-16 w-16">
            <AvatarImage :src="`https://ui-avatars.com/api/?name=${learner.name}&size=64`" />
            <AvatarFallback class="text-lg">{{ learner.name?.charAt(0).toUpperCase() || 'L' }}</AvatarFallback>
          </Avatar>
          <div>
            <h1 class="text-2xl font-bold text-gray-900">{{ learner.name }}</h1>
            <p class="text-sm text-gray-600">{{ learner.email }}</p>
            <p class="text-xs text-gray-500 mt-1">
              Member since {{ formatDate(learner.created_at) }}
            </p>
          </div>
        </div>
        <div class="text-right">
          <div class="text-sm text-gray-500">Overall Progress</div>
          <div class="flex items-center gap-2 mt-1">
            <Progress :value="overallProgress" class="w-24" />
            <span class="text-lg font-semibold">{{ Math.round(overallProgress) }}%</span>
          </div>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Main Content -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Course Progress -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Course Progress</h3>
          </div>
          <div class="p-6">
            <div class="space-y-6" v-if="learner.course_progress && learner.course_progress.length > 0">
              <div 
                v-for="courseProgress in learner.course_progress" 
                :key="courseProgress.id"
                class="border border-gray-200 rounded-lg p-4"
              >
                <div class="flex items-start justify-between mb-3">
                  <div class="flex-1">
                    <h4 class="text-sm font-medium text-gray-900">
                      {{ courseProgress.course?.name || 'Course #' + courseProgress.course_id }}
                    </h4>
                    <p class="text-xs text-gray-500 mt-1" v-if="courseProgress.course?.code">
                      {{ courseProgress.course.code }}
                    </p>
                  </div>
                  <div class="text-right">
                    <div class="text-sm font-medium text-gray-900">
                      {{ Math.round(courseProgress.progress_percentage || 0) }}%
                    </div>
                  </div>
                </div>
                
                <Progress :value="courseProgress.progress_percentage || 0" class="mb-3" />
                
                <div class="grid grid-cols-2 gap-4 text-xs text-gray-500">
                  <div>
                    <span class="font-medium">Started:</span>
                    {{ formatDate(courseProgress.created_at) }}
                  </div>
                  <div>
                    <span class="font-medium">Last Activity:</span>
                    {{ formatDate(courseProgress.updated_at) }}
                  </div>
                  <div v-if="courseProgress.completed_at">
                    <span class="font-medium">Completed:</span>
                    {{ formatDate(courseProgress.completed_at) }}
                  </div>
                  <div>
                    <span class="font-medium">Status:</span>
                    <Badge :variant="getProgressStatusVariant(courseProgress)" class="ml-1">
                      {{ getProgressStatus(courseProgress) }}
                    </Badge>
                  </div>
                </div>

                <!-- Lesson Progress if available -->
                <div v-if="courseProgress.lesson_progress && courseProgress.lesson_progress.length > 0" class="mt-4">
                  <h5 class="text-xs font-medium text-gray-700 mb-2">Lesson Progress</h5>
                  <div class="space-y-2">
                    <div 
                      v-for="lessonProgress in courseProgress.lesson_progress" 
                      :key="lessonProgress.id"
                      class="flex items-center justify-between text-xs"
                    >
                      <span class="text-gray-600">{{ lessonProgress.lesson?.title || 'Lesson #' + lessonProgress.lesson_id }}</span>
                      <div class="flex items-center gap-2">
                        <Progress :value="lessonProgress.progress_percentage || 0" class="w-16 h-1" />
                        <span class="text-gray-500 w-8">{{ Math.round(lessonProgress.progress_percentage || 0) }}%</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div v-else class="text-center py-8 text-gray-500">
              <BookOpen class="h-12 w-12 mx-auto mb-3 text-gray-300" />
              <p>No course progress found for this learner.</p>
            </div>
          </div>
        </div>

        <!-- Quiz Results -->
        <div class="bg-white rounded-lg shadow-sm" v-if="learner.quiz_attempts && learner.quiz_attempts.length > 0">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Quiz Results</h3>
          </div>
          <div class="p-6">
            <div class="space-y-4">
              <div 
                v-for="attempt in learner.quiz_attempts" 
                :key="attempt.id"
                class="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0"
              >
                <div class="flex-1">
                  <div class="text-sm font-medium text-gray-900">
                    {{ attempt.quiz?.title || 'Quiz #' + attempt.quiz_id }}
                  </div>
                  <div class="text-xs text-gray-500 mt-1">
                    Attempted on {{ formatDate(attempt.created_at) }}
                  </div>
                </div>
                <div class="text-right">
                  <div class="text-sm font-medium text-gray-900">
                    {{ attempt.score }}%
                  </div>
                  <Badge :variant="getQuizScoreVariant(attempt.score)" class="text-xs">
                    {{ getQuizScoreLabel(attempt.score) }}
                  </Badge>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Sidebar -->
      <div class="space-y-6">
        <!-- Learner Statistics -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Statistics</h3>
          </div>
          <div class="p-6">
            <div class="space-y-4">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">Courses Enrolled:</span>
                <span class="text-sm font-medium text-gray-900">{{ learner.course_progress?.length || 0 }}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">Courses Completed:</span>
                <span class="text-sm font-medium text-gray-900">{{ completedCoursesCount }}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">Quiz Attempts:</span>
                <span class="text-sm font-medium text-gray-900">{{ learner.quiz_attempts?.length || 0 }}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">Average Quiz Score:</span>
                <span class="text-sm font-medium text-gray-900">{{ averageQuizScore }}%</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">Last Activity:</span>
                <span class="text-sm font-medium text-gray-900">{{ formatDate(lastActivity) }}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Account Information -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Account Info</h3>
          </div>
          <div class="p-6">
            <div class="space-y-3">
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Email</label>
                <div class="text-sm text-gray-900 mt-1">{{ learner.email }}</div>
              </div>
              <div v-if="learner.phone">
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Phone</label>
                <div class="text-sm text-gray-900 mt-1">{{ learner.phone }}</div>
              </div>
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Status</label>
                <div class="mt-1">
                  <Badge :variant="learner.email_verified_at ? 'default' : 'secondary'">
                    {{ learner.email_verified_at ? 'Verified' : 'Unverified' }}
                  </Badge>
                </div>
              </div>
              <div>
                <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Joined</label>
                <div class="text-sm text-gray-900 mt-1">{{ formatDate(learner.created_at) }}</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white rounded-lg shadow-sm">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Quick Actions</h3>
          </div>
          <div class="p-6 space-y-3">
            <Button variant="outline" class="w-full justify-start" @click="exportLearnerData">
              <Download class="h-4 w-4 mr-2" />
              Export Progress Data
            </Button>
            <Button variant="outline" class="w-full justify-start" @click="sendProgressReport">
              <Mail class="h-4 w-4 mr-2" />
              Send Progress Report
            </Button>
            <Button variant="outline" class="w-full justify-start" @click="resetProgress" v-if="canResetProgress">
              <RefreshCw class="h-4 w-4 mr-2" />
              Reset Progress
            </Button>
          </div>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { computed } from 'vue'
import { Link, router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/Components/shadcn/ui/card'
import { Button } from '@/Components/shadcn/ui/button'
import { Progress } from '@/Components/shadcn/ui/progress'
import { Badge } from '@/Components/shadcn/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/Components/shadcn/ui/avatar'
import { ChevronLeft, BookOpen, Download, Mail, RefreshCw } from 'lucide-vue-next'

const props = defineProps({
  learner: Object,
  canResetProgress: {
    type: Boolean,
    default: false
  }
})

const overallProgress = computed(() => {
  if (!props.learner.course_progress || props.learner.course_progress.length === 0) return 0
  const total = props.learner.course_progress.reduce((sum, cp) => sum + (cp.progress_percentage || 0), 0)
  return total / props.learner.course_progress.length
})

const completedCoursesCount = computed(() => {
  if (!props.learner.course_progress) return 0
  return props.learner.course_progress.filter(cp => cp.progress_percentage >= 100 || cp.completed_at).length
})

const averageQuizScore = computed(() => {
  if (!props.learner.quiz_attempts || props.learner.quiz_attempts.length === 0) return 0
  const total = props.learner.quiz_attempts.reduce((sum, attempt) => sum + (attempt.score || 0), 0)
  return Math.round(total / props.learner.quiz_attempts.length)
})

const lastActivity = computed(() => {
  const dates = []
  
  if (props.learner.course_progress) {
    dates.push(...props.learner.course_progress.map(cp => new Date(cp.updated_at)))
  }
  
  if (props.learner.quiz_attempts) {
    dates.push(...props.learner.quiz_attempts.map(qa => new Date(qa.created_at)))
  }
  
  if (dates.length === 0) return props.learner.updated_at
  
  return new Date(Math.max(...dates))
})

const formatDate = (date) => {
  if (!date) return 'Never'
  return new Date(date).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  })
}

const getProgressStatus = (courseProgress) => {
  if (courseProgress.completed_at) return 'Completed'
  if (courseProgress.progress_percentage >= 100) return 'Completed'
  if (courseProgress.progress_percentage > 0) return 'In Progress'
  return 'Not Started'
}

const getProgressStatusVariant = (courseProgress) => {
  const status = getProgressStatus(courseProgress)
  switch (status) {
    case 'Completed': return 'default'
    case 'In Progress': return 'secondary'
    default: return 'outline'
  }
}

const getQuizScoreVariant = (score) => {
  if (score >= 80) return 'default'
  if (score >= 60) return 'secondary'
  return 'destructive'
}

const getQuizScoreLabel = (score) => {
  if (score >= 80) return 'Excellent'
  if (score >= 60) return 'Good'
  return 'Needs Improvement'
}

const exportLearnerData = () => {
  router.post(`/admin/learner-progress/${props.learner.id}/export`)
}

const sendProgressReport = () => {
  router.post(`/admin/learner-progress/${props.learner.id}/send-report`)
}

const resetProgress = () => {
  if (confirm('Are you sure you want to reset this learner\'s progress? This action cannot be undone.')) {
    router.post(`/admin/learner-progress/${props.learner.id}/reset`)
  }
}
</script> 