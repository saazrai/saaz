<template>
  <AdminLayout>
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 :class="[
            'text-3xl font-bold',
            isDarkMode ? 'text-gray-100' : 'text-gray-900'
          ]">Topics</h1>
          <p :class="[
            'text-gray-600',
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">Manage course topics and learning domains</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-4 mt-4 md:mt-0">
          <Link
            :href="route('admin.content.topics.create')"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
          >
            Create Topic
          </Link>
        </div>
      </div>

      <!-- Filters -->
      <div :class="[
        'rounded-lg shadow-sm p-6 mb-6',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <!-- Search Filter -->
          <div>
            <input
              v-model="searchQuery"
              type="text"
              placeholder="Search topics..."
              @input="onSearchChange"
              :class="[
                'w-full px-3 py-2 rounded-md border transition-colors',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                  : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
              ]"
            />
          </div>

          <!-- Course Filter -->
          <div>
            <Select v-model="selectedCourse" @update:model-value="onCourseChange">
              <SelectTrigger :class="[
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white' 
                  : 'bg-white border-gray-300 text-gray-900'
              ]">
                <SelectValue placeholder="Select a course" />
              </SelectTrigger>
              <SelectContent :class="[
                isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
              ]">
                <SelectItem value="all" :class="[
                  isDarkMode ? 'text-white hover:bg-gray-600' : 'text-gray-900 hover:bg-gray-100'
                ]">All Courses</SelectItem>
                <SelectItem 
                  v-for="course in courses" 
                  :key="course.id" 
                  :value="course.id.toString()"
                  :class="[
                    isDarkMode ? 'text-white hover:bg-gray-600' : 'text-gray-900 hover:bg-gray-100'
                  ]"
                >
                  {{ course.name }}
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <!-- Domain Filter -->
          <div>
            <Select 
              v-model="selectedDomain" 
              @update:model-value="onDomainChange"
              :disabled="!selectedCourse || selectedCourse === 'all' || availableDomains.length === 0"
            >
              <SelectTrigger :class="[
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white' 
                  : 'bg-white border-gray-300 text-gray-900',
                (!selectedCourse || selectedCourse === 'all' || availableDomains.length === 0) ? 'opacity-50' : ''
              ]">
                <SelectValue placeholder="Select a domain" />
              </SelectTrigger>
              <SelectContent :class="[
                isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
              ]">
                <SelectItem value="all" :class="[
                  isDarkMode ? 'text-white hover:bg-gray-600' : 'text-gray-900 hover:bg-gray-100'
                ]">All Domains</SelectItem>
                <SelectItem 
                  v-for="domain in availableDomains" 
                  :key="domain.id" 
                  :value="domain.id.toString()"
                  :class="[
                    isDarkMode ? 'text-white hover:bg-gray-600' : 'text-gray-900 hover:bg-gray-100'
                  ]"
                >
                  {{ domain.name }}
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <!-- Lesson Filter -->
          <div>
            <Select 
              v-model="selectedLesson" 
              @update:model-value="onLessonChange"
              :disabled="!selectedDomain || selectedDomain === 'all' || availableLessons.length === 0"
            >
              <SelectTrigger :class="[
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white' 
                  : 'bg-white border-gray-300 text-gray-900',
                (!selectedDomain || selectedDomain === 'all' || availableLessons.length === 0) ? 'opacity-50' : ''
              ]">
                <SelectValue placeholder="Select a lesson" />
              </SelectTrigger>
              <SelectContent :class="[
                isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
              ]">
                <SelectItem value="all" :class="[
                  isDarkMode ? 'text-white hover:bg-gray-600' : 'text-gray-900 hover:bg-gray-100'
                ]">All Lessons</SelectItem>
                <SelectItem 
                  v-for="lesson in availableLessons" 
                  :key="lesson.id" 
                  :value="lesson.id.toString()"
                  :class="[
                    isDarkMode ? 'text-white hover:bg-gray-600' : 'text-gray-900 hover:bg-gray-100'
                  ]"
                >
                  {{ lesson.name }}
                </SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>
    
      <!-- Table -->
      <div :class="[
        'rounded-lg shadow-sm',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <table class="min-w-full">
          <thead>
            <tr :class="[
              'border-b',
              isDarkMode ? 'border-gray-700' : 'border-gray-200'
            ]">
              <th :class="[
                'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Name
              </th>
              <th :class="[
                'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Course
              </th>
              <th :class="[
                'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Domain
              </th>
              <th :class="[
                'px-8 py-4 text-center text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Sort Order
              </th>
              <th :class="[
                'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Description
              </th>
              <th :class="[
                'px-8 py-4 text-right text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                
              </th>
            </tr>
          </thead>
          <tbody>
            <tr 
              v-for="topic in topics.data" 
              :key="topic.id" 
              @click="showTopic(topic)"
              :class="[
                'border-b cursor-pointer transition-colors',
                isDarkMode 
                  ? 'border-gray-700 hover:bg-gray-700' 
                  : 'border-gray-100 hover:bg-gray-50'
              ]"
            >
              <td class="px-8 py-6">
                <div :class="[
                  'font-medium',
                  isDarkMode ? 'text-gray-200' : 'text-gray-900'
                ]">{{ topic.name }}</div>
                <div v-if="topic.code" :class="[
                  'text-sm',
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                ]">{{ topic.code }}</div>
              </td>
              <td class="px-8 py-6">
                <span v-if="topic.course" :class="[
                  'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  isDarkMode 
                    ? 'bg-purple-900 text-purple-200' 
                    : 'bg-purple-100 text-purple-800'
                ]">
                  {{ topic.course.name }}
                </span>
                <span v-else :class="[
                  'text-sm',
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                ]">No Course</span>
              </td>
              <td class="px-8 py-6">
                <span v-if="topic.domain" :class="[
                  'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  isDarkMode 
                    ? 'bg-blue-900 text-blue-200' 
                    : 'bg-blue-100 text-blue-800'
                ]">
                  {{ topic.domain.name }}
                </span>
                <span v-else :class="[
                  'text-sm',
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                ]">No Domain</span>
              </td>
              <td class="px-8 py-6 text-center">
                <span :class="[
                  'inline-flex items-center px-2 py-1 rounded text-xs font-medium',
                  isDarkMode 
                    ? 'bg-gray-700 text-gray-300' 
                    : 'bg-gray-100 text-gray-700'
                ]">
                  {{ topic.sort_order || 0 }}
                </span>
              </td>
              <td class="px-8 py-6">
                <div :class="[
                  'max-w-md truncate',
                  isDarkMode ? 'text-gray-400' : 'text-gray-600'
                ]">{{ topic.description || 'No description' }}</div>
              </td>
              <td class="px-8 py-6 text-right">
                <span :class="[
                  'text-xl',
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                ]">›</span>
              </td>
            </tr>
          </tbody>
        </table>

        <!-- Pagination -->
        <Pagination :links="topics" />
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { Link, router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import Pagination from '@/Components/Pagination.vue'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/Components/shadcn/ui/select'

const props = defineProps({ 
  topics: Object,
  courses: {
    type: Array,
    default: () => []
  },
  domains: {
    type: Array,
    default: () => []
  },
  lessons: {
    type: Array,
    default: () => []
  },
  filters: {
    type: Object,
    default: () => ({})
  }
})

// Filter state
const searchQuery = ref(props.filters.search || '')
const selectedCourse = ref(props.filters.course_id || 'all')
const selectedDomain = ref(props.filters.domain_id || 'all')
const selectedLesson = ref(props.filters.lesson_id || 'all')
const availableDomains = ref(props.domains || [])
const availableLessons = ref(props.lessons || [])

// Dark mode state
const isDarkMode = ref(false)

// Load dark mode preference and watch for changes
onMounted(() => {
    const saved = localStorage.getItem('adminDarkMode')
    isDarkMode.value = saved === 'true'
    
    // Watch for localStorage changes (when dark mode is toggled from AdminLayout)
    const handleStorageChange = () => {
        const saved = localStorage.getItem('adminDarkMode')
        isDarkMode.value = saved === 'true'
    }
    
    window.addEventListener('storage', handleStorageChange)
    // Also watch for custom events from AdminLayout
    window.addEventListener('adminDarkModeChanged', handleStorageChange)
    
    // Cleanup on unmount
    return () => {
        window.removeEventListener('storage', handleStorageChange)
        window.removeEventListener('adminDarkModeChanged', handleStorageChange)
    }
})

// Search handling with debounce
let searchTimeout = null
const onSearchChange = () => {
  clearTimeout(searchTimeout)
  searchTimeout = setTimeout(() => {
    applyFilters()
  }, 500)
}

// Handle course change
const onCourseChange = async (courseId) => {
  selectedCourse.value = courseId
  selectedDomain.value = 'all' // Reset domain selection
  selectedLesson.value = 'all' // Reset lesson selection
  
  if (courseId && courseId !== 'all') {
    // Fetch domains for the selected course
    try {
      const response = await fetch(`/admin/content/topics/domains-by-course?course_id=${courseId}`)
      const domains = await response.json()
      availableDomains.value = domains
    } catch (error) {
      console.error('Error fetching domains:', error)
      availableDomains.value = []
    }
  } else {
    availableDomains.value = []
  }
  
  availableLessons.value = []
  applyFilters()
}

// Handle domain change
const onDomainChange = async (domainId) => {
  selectedDomain.value = domainId
  selectedLesson.value = 'all' // Reset lesson selection
  
  if (domainId && domainId !== 'all') {
    // Fetch lessons for the selected domain
    try {
      const response = await fetch(`/admin/content/topics/lessons-by-domain?domain_id=${domainId}`)
      const lessons = await response.json()
      availableLessons.value = lessons
    } catch (error) {
      console.error('Error fetching lessons:', error)
      availableLessons.value = []
    }
  } else {
    availableLessons.value = []
  }
  
  applyFilters()
}

// Handle lesson change
const onLessonChange = (lessonId) => {
  selectedLesson.value = lessonId
  applyFilters()
}

// Apply filters by navigating with query parameters
const applyFilters = () => {
  const params = {}
  
  if (searchQuery.value.trim()) {
    params.search = searchQuery.value.trim()
  }
  
  if (selectedCourse.value && selectedCourse.value !== 'all') {
    params.course_id = selectedCourse.value
  }
  
  if (selectedDomain.value && selectedDomain.value !== 'all') {
    params.domain_id = selectedDomain.value
  }
  
  if (selectedLesson.value && selectedLesson.value !== 'all') {
    params.lesson_id = selectedLesson.value
  }
  
  router.get(route('admin.content.topics.index'), params, {
    preserveState: true,
    preserveScroll: true,
  })
}

function showTopic(topic) {
  router.visit(route('admin.content.topics.show', topic.slug || topic.id))
}

function destroy(id) {
  if (confirm('Are you sure you want to delete this topic?')) {
    router.delete(route('admin.content.topics.destroy', id))
  }
}
</script>
