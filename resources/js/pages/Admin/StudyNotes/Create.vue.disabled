<template>
  <AdminLayout page-title="Create Study Note">
    <div :class="['p-6', isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900']">
      <!-- Breadcrumb -->
      <div class="mb-6">
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li>
              <Link :href="route('admin.content.study-notes.index')" :class="[
                'transition-colors',
                isDarkMode ? 'text-gray-400 hover:text-gray-200' : 'text-gray-500 hover:text-gray-700'
              ]">
                Study Notes
              </Link>
            </li>
            <li>
              <div class="flex items-center">
                <svg :class="['w-6 h-6', isDarkMode ? 'text-gray-500' : 'text-gray-400']" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
                <span :class="[
                  'ml-1 text-sm font-medium',
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                ]">Create Study Note</span>
              </div>
            </li>
          </ol>
        </nav>
        <h1 :class="[
          'mt-4 text-2xl font-bold',
          isDarkMode ? 'text-white' : 'text-gray-900'
        ]">Create New Study Note</h1>
        <p :class="[
          'mt-1 text-sm',
          isDarkMode ? 'text-gray-400' : 'text-gray-600'
        ]">Generate AI-powered study notes for topics</p>
      </div>

      <div :class="[
        'shadow-sm rounded-lg',
        isDarkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white border border-gray-200'
      ]">
        <form @submit.prevent="submit" class="p-6 space-y-6">
          <!-- Topic Selection -->
          <div>
            <label for="topic_id" :class="[
              'block text-sm font-medium',
              isDarkMode ? 'text-gray-300' : 'text-gray-700'
            ]">Topic *</label>
            <select 
              id="topic_id"
              v-model="form.topic_id" 
              :class="[
                'mt-1 block w-full rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white' 
                  : 'bg-white border-gray-300 text-gray-900'
              ]"
              required
              @change="updateTopicInfo"
            >
              <option value="">Select a topic...</option>
              <optgroup v-for="course in groupedTopics" :key="course.name" :label="course.name">
                <option 
                  v-for="topic in course.topics" 
                  :key="topic.id" 
                  :value="topic.id"
                >
                  {{ topic.name }}
                </option>
              </optgroup>
            </select>
            <div v-if="form.errors.topic_id" class="mt-2 text-sm text-red-600">{{ form.errors.topic_id }}</div>
            
            <!-- Topic Info -->
            <div v-if="selectedTopic" :class="[
              'mt-2 p-3 rounded-md',
              isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-gray-50 border border-gray-200'
            ]">
              <p :class="[
                'text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">
                <strong>Course:</strong> {{ getTopicCourse(selectedTopic) }}<br>
                <strong>Lessons:</strong> {{ getTopicLessons(selectedTopic) }}
              </p>
            </div>
          </div>
          
          <!-- Level Selection -->
          <div>
            <label for="level" :class="[
              'block text-sm font-medium',
              isDarkMode ? 'text-gray-300' : 'text-gray-700'
            ]">Difficulty Level *</label>
            <select 
              id="level"
              v-model="form.level" 
              :class="[
                'mt-1 block w-full rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white' 
                  : 'bg-white border-gray-300 text-gray-900'
              ]"
              required
            >
              <option value="">Select level...</option>
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="advanced">Advanced</option>
            </select>
            <div v-if="form.errors.level" class="mt-2 text-sm text-red-600">{{ form.errors.level }}</div>
          </div>
          
          <!-- AI Content Generation Options -->
          <div :class="[
            'border-t pt-6',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <div class="flex items-center justify-between mb-4">
              <h3 :class="[
                'text-lg font-medium',
                isDarkMode ? 'text-white' : 'text-gray-900'
              ]">AI Content Generation</h3>
              <div class="flex items-center">
                <input
                  id="generate_content"
                  v-model="form.generate_content"
                  type="checkbox"
                  :class="[
                    'h-4 w-4 text-indigo-600 focus:ring-indigo-500 rounded',
                    isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
                  ]"
                />
                <label for="generate_content" :class="[
                  'ml-2 block text-sm',
                  isDarkMode ? 'text-gray-300' : 'text-gray-900'
                ]">
                  Generate content using AI
                </label>
              </div>
            </div>
            
            <!-- AI Prompt -->
            <div v-if="form.generate_content">
              <label for="ai_prompt" :class="[
                'block text-sm font-medium',
                isDarkMode ? 'text-gray-300' : 'text-gray-700'
              ]">
                Custom AI Prompt (Optional)
              </label>
              <textarea 
                id="ai_prompt"
                v-model="form.ai_prompt" 
                rows="4"
                :class="[
                  'mt-1 block w-full rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm',
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                    : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                ]"
                placeholder="Enter a custom prompt to guide the AI content generation. If left empty, the system will use default prompts based on the topic and level."
              ></textarea>
              <p :class="[
                'mt-2 text-sm',
                isDarkMode ? 'text-gray-400' : 'text-gray-500'
              ]">
                The AI will generate comprehensive study notes including explanations, examples, and practice questions.
              </p>
              <div v-if="form.errors.ai_prompt" class="mt-2 text-sm text-red-600">{{ form.errors.ai_prompt }}</div>
              
              <!-- AI Vendor Info -->
              <div v-if="aiVendors.length > 0" :class="[
                'mt-4 p-3 rounded-md',
                isDarkMode ? 'bg-blue-900 border border-blue-700' : 'bg-blue-50 border border-blue-200'
              ]">
                <p :class="[
                  'text-sm',
                  isDarkMode ? 'text-blue-200' : 'text-blue-900'
                ]">
                  <strong>Available AI Vendors:</strong> {{ aiVendors.join(', ') }}
                </p>
                <p :class="[
                  'text-xs mt-1',
                  isDarkMode ? 'text-blue-300' : 'text-blue-700'
                ]">
                  The system will automatically use the configured AI vendor to generate content.
                </p>
              </div>
            </div>
            
            <div v-else :class="[
              'p-4 rounded-md',
              isDarkMode ? 'bg-yellow-900 border border-yellow-700' : 'bg-yellow-50 border border-yellow-200'
            ]">
              <p :class="[
                'text-sm',
                isDarkMode ? 'text-yellow-200' : 'text-yellow-800'
              ]">
                <strong>Manual Mode:</strong> An empty study note will be created for you to edit manually.
              </p>
            </div>
          </div>

          <!-- Form Actions -->
          <div :class="[
            'flex justify-end space-x-3 pt-6 border-t',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <Link 
              :href="route('admin.content.study-notes.index')" 
              :class="[
                'inline-flex items-center px-4 py-2 border shadow-sm text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500',
                isDarkMode 
                  ? 'border-gray-600 text-gray-300 bg-gray-800 hover:bg-gray-700' 
                  : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50'
              ]"
            >
              Cancel
            </Link>
            <button 
              type="submit" 
              :disabled="form.processing"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
            >
              <svg v-if="form.processing" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <Sparkles v-if="form.generate_content && !form.processing" class="h-4 w-4 mr-2" />
              {{ form.processing ? 'Creating...' : (form.generate_content ? 'Generate Study Note' : 'Create Empty Note') }}
            </button>
          </div>
        </form>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useForm, Link } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Sparkles } from 'lucide-vue-next'

// Dark mode state management
const isDarkMode = ref(false)

const initializeDarkMode = () => {
  const saved = localStorage.getItem('adminDarkMode')
  if (saved !== null) {
    isDarkMode.value = JSON.parse(saved)
  }
}

const handleDarkModeChange = (event) => {
  if (event.key === 'adminDarkMode') {
    isDarkMode.value = JSON.parse(event.newValue || 'false')
  }
}

const handleAdminDarkModeChange = (event) => {
  isDarkMode.value = event.detail
}

onMounted(() => {
  initializeDarkMode()
  window.addEventListener('storage', handleDarkModeChange)
  window.addEventListener('adminDarkModeChanged', handleAdminDarkModeChange)
})

onUnmounted(() => {
  window.removeEventListener('storage', handleDarkModeChange)
  window.removeEventListener('adminDarkModeChanged', handleAdminDarkModeChange)
})

const props = defineProps({
  topics: Array,
  levels: Array,
  aiVendors: Array
})

const form = useForm({
  topic_id: '',
  level: '',
  ai_prompt: '',
  generate_content: true
})

const selectedTopic = ref(null)

// Group topics by course
const groupedTopics = computed(() => {
  const groups = {}
  
  props.topics.forEach(topic => {
    const courseName = getTopicCourse(topic)
    if (!groups[courseName]) {
      groups[courseName] = {
        name: courseName,
        topics: []
      }
    }
    groups[courseName].topics.push(topic)
  })
  
  return Object.values(groups).sort((a, b) => a.name.localeCompare(b.name))
})

const updateTopicInfo = () => {
  selectedTopic.value = props.topics.find(t => t.id === parseInt(form.topic_id))
}

const getTopicCourse = (topic) => {
  if (!topic?.lessons || topic.lessons.length === 0) {
    return 'No Course'
  }
  return topic.lessons[0]?.domain?.course?.name || 'Unknown Course'
}

const getTopicLessons = (topic) => {
  if (!topic?.lessons || topic.lessons.length === 0) {
    return 'No lessons'
  }
  return topic.lessons.map(l => l.name).join(', ')
}

function submit() {
  form.post(route('admin.content.study-notes.store'), {
    onSuccess: () => {
      // Will redirect to edit page
    }
  })
}
</script>