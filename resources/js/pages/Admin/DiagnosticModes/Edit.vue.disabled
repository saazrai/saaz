<template>
    <AdminLayout title="Edit Diagnostic Mode">
        <div class="p-6">
            <div class="max-w-6xl mx-auto">
                <h1 class="text-2xl font-semibold text-gray-900 dark:text-white mb-6">Edit Diagnostic Mode</h1>
                
                <form @submit.prevent="submit" class="space-y-6">
                    <!-- Basic Information Card -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Basic Information</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Slug (URL identifier)
                                </label>
                                <input 
                                    v-model="form.slug" 
                                    type="text" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    placeholder="e.g., quick, standard"
                                    required
                                />
                                <p v-if="form.errors.slug" class="mt-1 text-sm text-red-600">{{ form.errors.slug }}</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Name
                                </label>
                                <input 
                                    v-model="form.name" 
                                    type="text" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    placeholder="e.g., Quick Diagnostic"
                                    required
                                />
                                <p v-if="form.errors.name" class="mt-1 text-sm text-red-600">{{ form.errors.name }}</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Question Count
                                </label>
                                <input 
                                    v-model.number="form.question_count" 
                                    type="number" 
                                    min="1"
                                    @change="updateDomainDefaults"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    required
                                />
                                <p v-if="form.errors.question_count" class="mt-1 text-sm text-red-600">{{ form.errors.question_count }}</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Duration (minutes)
                                </label>
                                <input 
                                    v-model.number="form.duration_minutes" 
                                    type="number" 
                                    min="1"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    required
                                />
                                <p v-if="form.errors.duration_minutes" class="mt-1 text-sm text-red-600">{{ form.errors.duration_minutes }}</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Cooldown Hours
                                </label>
                                <input 
                                    v-model.number="form.cooldown_hours" 
                                    type="number" 
                                    min="0"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                />
                                <p v-if="form.errors.cooldown_hours" class="mt-1 text-sm text-red-600">{{ form.errors.cooldown_hours }}</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Sort Order
                                </label>
                                <input 
                                    v-model.number="form.sort_order" 
                                    type="number" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                />
                            </div>
                        </div>
                    </div>

                    <!-- Visual Settings Card -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Visual Settings</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Color Scheme
                                </label>
                                <select 
                                    v-model="form.color_scheme" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    required
                                >
                                    <option value="orange">Orange</option>
                                    <option value="green">Green</option>
                                    <option value="blue">Blue</option>
                                    <option value="purple">Purple</option>
                                    <option value="red">Red</option>
                                    <option value="yellow">Yellow</option>
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Icon
                                </label>
                                <select 
                                    v-model="form.icon" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                >
                                    <option value="">None</option>
                                    <option value="beaker">Beaker</option>
                                    <option value="lightning-bolt">Lightning Bolt</option>
                                    <option value="check-circle">Check Circle</option>
                                    <option value="clipboard-list">Clipboard List</option>
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Badge Text
                                </label>
                                <input 
                                    v-model="form.badge_text" 
                                    type="text" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    placeholder="e.g., RECOMMENDED, TEST MODE"
                                />
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Price
                                </label>
                                <input 
                                    v-model.number="form.price" 
                                    type="number" 
                                    min="0" 
                                    step="0.01"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                />
                            </div>
                        </div>

                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Description
                            </label>
                            <textarea 
                                v-model="form.description" 
                                rows="3"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                            ></textarea>
                        </div>

                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Display Features (one per line)
                            </label>
                            <textarea 
                                v-model="displayFeaturesText" 
                                rows="4"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                placeholder="Quick functionality test&#10;Sample questions only&#10;For testing purposes"
                            ></textarea>
                        </div>
                    </div>

                    <!-- Domain Selection Configuration -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Domain Selection Configuration</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Total Domains
                                </label>
                                <input 
                                    v-model.number="domainConfig.total_domains" 
                                    type="number" 
                                    min="1"
                                    max="20"
                                    @change="validateDomainConfig"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                />
                                <p class="text-xs text-gray-500 mt-1">Must multiply with questions per domain to equal total questions</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Questions per Domain
                                </label>
                                <input 
                                    v-model.number="domainConfig.questions_per_domain" 
                                    type="number" 
                                    min="1"
                                    max="10"
                                    @change="validateDomainConfig"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                />
                            </div>
                        </div>

                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Domain Selection Strategy
                            </label>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">Foundational</label>
                                    <input 
                                        v-model.number="domainConfig.selection_strategy.foundational" 
                                        type="number" 
                                        min="0"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    />
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">Technical</label>
                                    <input 
                                        v-model.number="domainConfig.selection_strategy.technical" 
                                        type="number" 
                                        min="0"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    />
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">Managerial</label>
                                    <input 
                                        v-model.number="domainConfig.selection_strategy.managerial" 
                                        type="number" 
                                        min="0"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    />
                                </div>
                            </div>
                            <p class="text-xs text-gray-500 mt-2">Total should equal number of domains</p>
                        </div>
                    </div>

                    <!-- Question Selection Configuration -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Question Selection Configuration</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Starting Bloom Level
                                </label>
                                <select 
                                    v-model.number="questionConfig.starting_bloom_level" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                >
                                    <option :value="1">1 - Remember</option>
                                    <option :value="2">2 - Understand</option>
                                    <option :value="3">3 - Apply</option>
                                    <option :value="4">4 - Analyze</option>
                                    <option :value="5">5 - Evaluate</option>
                                    <option :value="6">6 - Create</option>
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Fallback Strategy
                                </label>
                                <select 
                                    v-model="questionConfig.fallback_strategy" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                >
                                    <option value="adjacent_bloom">Adjacent Bloom Level</option>
                                    <option value="random">Random</option>
                                    <option value="lower_bloom">Lower Bloom Only</option>
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Domain Balancing
                                </label>
                                <select 
                                    v-model="questionConfig.domain_balancing" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                >
                                    <option value="strict">Strict</option>
                                    <option value="flexible">Flexible</option>
                                    <option value="none">None</option>
                                </select>
                            </div>

                            <div class="flex items-center">
                                <input 
                                    v-model="questionConfig.adaptive_progression" 
                                    type="checkbox" 
                                    class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                />
                                <label class="text-sm text-gray-700 dark:text-gray-300">
                                    Enable Adaptive Progression
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Algorithm Configuration -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Algorithm Configuration</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Algorithm Type
                                </label>
                                <select 
                                    v-model="algorithmConfig.type" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                >
                                    <option value="standard">Standard</option>
                                    <option value="adaptive">Adaptive</option>
                                    <option value="simple">Simple</option>
                                </select>
                            </div>

                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input 
                                        v-model="algorithmConfig.adaptive_enabled" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Adaptive Enabled</span>
                                </label>

                                <label class="flex items-center">
                                    <input 
                                        v-model="algorithmConfig.early_stopping" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Early Stopping</span>
                                </label>

                                <label class="flex items-center">
                                    <input 
                                        v-model="algorithmConfig.domain_balancing" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Domain Balancing</span>
                                </label>

                                <label class="flex items-center">
                                    <input 
                                        v-model="algorithmConfig.difficulty_adaptation" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Difficulty Adaptation</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Early Termination Configuration -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Early Termination Configuration</h2>
                        
                        <div class="mb-4">
                            <label class="flex items-center">
                                <input 
                                    v-model="terminationConfig.enabled" 
                                    type="checkbox" 
                                    class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                />
                                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Enable Early Termination</span>
                            </label>
                        </div>

                        <div v-if="terminationConfig.enabled" class="space-y-6">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                        Minimum Questions
                                    </label>
                                    <input 
                                        v-model.number="terminationConfig.min_questions" 
                                        type="number" 
                                        min="1"
                                        :max="form.question_count"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                        Mastery Threshold (%)
                                    </label>
                                    <input 
                                        v-model.number="masteryThresholdPercent" 
                                        type="number" 
                                        min="0"
                                        max="100"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    />
                                </div>
                            </div>

                            <div>
                                <h3 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-3">Poor Performance Rules</h3>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div>
                                        <label class="block text-sm text-gray-700 dark:text-gray-300 mb-1">
                                            Consecutive Failures
                                        </label>
                                        <input 
                                            v-model.number="terminationConfig.poor_performance.consecutive_failures" 
                                            type="number" 
                                            min="1"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                        />
                                    </div>

                                    <div>
                                        <label class="block text-sm text-gray-700 dark:text-gray-300 mb-1">
                                            Accuracy Threshold (%)
                                        </label>
                                        <input 
                                            v-model.number="poorPerformanceAccuracyPercent" 
                                            type="number" 
                                            min="0"
                                            max="100"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                        />
                                    </div>

                                    <div>
                                        <label class="block text-sm text-gray-700 dark:text-gray-300 mb-1">
                                            Min Questions Before Stop
                                        </label>
                                        <input 
                                            v-model.number="terminationConfig.poor_performance.min_questions_before_stop" 
                                            type="number" 
                                            min="1"
                                            :max="form.question_count"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Timing Configuration -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Timing Configuration</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input 
                                        v-model="timingConfig.strict_timing" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Strict Timing</span>
                                </label>

                                <label class="flex items-center">
                                    <input 
                                        v-model="timingConfig.pause_allowed" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Pause Allowed</span>
                                </label>

                                <label class="flex items-center">
                                    <input 
                                        v-model="timingConfig.auto_submit" 
                                        type="checkbox" 
                                        class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                    />
                                    <span class="text-sm text-gray-700 dark:text-gray-300">Auto Submit When Time Expires</span>
                                </label>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Time Warnings (minutes, comma-separated)
                                </label>
                                <input 
                                    v-model="timeWarningsText" 
                                    type="text" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                    placeholder="15, 5"
                                />
                            </div>
                        </div>
                    </div>

                    <!-- Settings Toggles -->
                    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Settings</h2>
                        <div class="flex space-x-6">
                            <label class="flex items-center">
                                <input 
                                    v-model="form.is_active" 
                                    type="checkbox" 
                                    class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                />
                                <span class="text-sm text-gray-700 dark:text-gray-300">Active</span>
                            </label>

                            <label class="flex items-center">
                                <input 
                                    v-model="form.is_dev_only" 
                                    type="checkbox" 
                                    class="mr-2 h-4 w-4 text-blue-600 rounded border-gray-300"
                                />
                                <span class="text-sm text-gray-700 dark:text-gray-300">Development Only</span>
                            </label>
                        </div>
                    </div>

                    <!-- Configuration Validation -->
                    <div v-if="validationErrors.length > 0" class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
                        <h3 class="text-lg font-semibold text-red-800 dark:text-red-200 mb-3">Configuration Errors</h3>
                        <ul class="list-disc list-inside space-y-1">
                            <li v-for="(error, index) in validationErrors" :key="index" class="text-red-700 dark:text-red-300">
                                {{ error }}
                            </li>
                        </ul>
                    </div>

                    <!-- Actions -->
                    <div class="flex justify-end space-x-4">
                        <Link 
                            :href="typeof route !== 'undefined' ? route('admin.diagnostic-modes.index') : '/admin/diagnostic-modes'"
                            class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold rounded-lg transition-colors"
                        >
                            Cancel
                        </Link>
                        <button 
                            type="submit"
                            :disabled="form.processing || validationErrors.length > 0"
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors disabled:opacity-50"
                        >
                            Update Mode
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </AdminLayout>
</template>

<script setup>
import { ref, computed, watch, onMounted } from 'vue';
import { Link, useForm } from '@inertiajs/vue3';
import AdminLayout from '@/Layouts/AdminLayout.vue';

const props = defineProps({
    mode: Object,
    available_domains: Array
});

// Initialize form with existing data
const form = useForm({
    slug: props.mode.slug,
    name: props.mode.name,
    question_count: props.mode.question_count,
    duration_minutes: props.mode.duration_minutes,
    cooldown_hours: props.mode.cooldown_hours,
    is_active: props.mode.is_active,
    is_dev_only: props.mode.is_dev_only,
    sort_order: props.mode.sort_order,
    color_scheme: props.mode.color_scheme,
    icon: props.mode.icon || '',
    description: props.mode.description || '',
    features: {},
    price: props.mode.price,
    badge_text: props.mode.badge_text || '',
});

// Configuration objects
const domainConfig = ref(props.mode.domain_config || {
    total_domains: 10,
    questions_per_domain: 5,
    selection_strategy: { foundational: 3, technical: 5, managerial: 2 }
});

const questionConfig = ref(props.mode.question_config || {
    starting_bloom_level: 3,
    adaptive_progression: true,
    fallback_strategy: 'adjacent_bloom',
    domain_balancing: 'strict'
});

const terminationConfig = ref(props.mode.termination_config || {
    enabled: true,
    min_questions: 20,
    mastery_threshold: 0.8,
    poor_performance: {
        consecutive_failures: 8,
        accuracy_threshold: 0.2,
        min_questions_before_stop: 25
    }
});

const algorithmConfig = ref(props.mode.algorithm_config || {
    type: 'standard',
    adaptive_enabled: true,
    early_stopping: true,
    domain_balancing: true,
    difficulty_adaptation: true
});

const timingConfig = ref(props.mode.timing_config || {
    strict_timing: false,
    time_warnings: [15, 5],
    pause_allowed: true,
    auto_submit: true
});

// Helper refs for display features and time warnings
const displayFeaturesText = ref('');
const timeWarningsText = ref('');

// Percentage helpers
const masteryThresholdPercent = ref((terminationConfig.value.mastery_threshold * 100).toFixed(0));
const poorPerformanceAccuracyPercent = ref((terminationConfig.value.poor_performance.accuracy_threshold * 100).toFixed(0));

// Validation errors
const validationErrors = computed(() => {
    const errors = [];
    
    // Validate domain configuration
    const totalFromDomains = domainConfig.value.total_domains * domainConfig.value.questions_per_domain;
    if (totalFromDomains !== form.question_count) {
        errors.push(`Domain configuration doesn't match question count: ${domainConfig.value.total_domains} × ${domainConfig.value.questions_per_domain} = ${totalFromDomains}, expected ${form.question_count}`);
    }
    
    // Validate bloom level
    if (questionConfig.value.starting_bloom_level < 1 || questionConfig.value.starting_bloom_level > 6) {
        errors.push("Starting bloom level must be between 1 and 6");
    }
    
    // Validate termination config
    if (terminationConfig.value.enabled && terminationConfig.value.min_questions > form.question_count) {
        errors.push("Minimum questions for termination cannot exceed total questions");
    }
    
    return errors;
});

// Initialize display features
onMounted(() => {
    if (props.mode.display_features && props.mode.display_features.length > 0) {
        displayFeaturesText.value = props.mode.display_features.join('\n');
    }
    
    if (timingConfig.value.time_warnings && timingConfig.value.time_warnings.length > 0) {
        timeWarningsText.value = timingConfig.value.time_warnings.join(', ');
    }
    
    // Check if domain configuration is valid, if not, fix it
    const totalFromDomains = domainConfig.value.total_domains * domainConfig.value.questions_per_domain;
    if (totalFromDomains !== form.question_count) {
        updateDomainDefaults();
    }
});

// Watch for changes
watch(displayFeaturesText, (newValue) => {
    form.features.display_features = newValue.split('\n').filter(f => f.trim());
});

watch(timeWarningsText, (newValue) => {
    timingConfig.value.time_warnings = newValue.split(',').map(t => parseInt(t.trim())).filter(t => !isNaN(t));
});

watch(masteryThresholdPercent, (newValue) => {
    terminationConfig.value.mastery_threshold = parseFloat(newValue) / 100;
});

watch(poorPerformanceAccuracyPercent, (newValue) => {
    terminationConfig.value.poor_performance.accuracy_threshold = parseFloat(newValue) / 100;
});

// Update domain defaults when question count changes
const updateDomainDefaults = () => {
    // Try to find a good domain/question split
    const questionCount = form.question_count;
    
    // Common divisors for question counts
    const possibleQuestionsPerDomain = [5, 4, 3, 2, 1];
    
    for (const qpd of possibleQuestionsPerDomain) {
        if (questionCount % qpd === 0) {
            const domains = questionCount / qpd;
            if (domains >= 1 && domains <= 20) {
                domainConfig.value.total_domains = domains;
                domainConfig.value.questions_per_domain = qpd;
                break;
            }
        }
    }
    
    // Update strategy based on domain count
    const domains = domainConfig.value.total_domains;
    if (domains <= 5) {
        // For 4 domains: 1 + 2 + 1 = 4
        domainConfig.value.selection_strategy = { 
            foundational: Math.floor(domains * 0.25), 
            technical: Math.floor(domains * 0.5), 
            managerial: domains - Math.floor(domains * 0.25) - Math.floor(domains * 0.5)
        };
    } else if (domains <= 10) {
        // For 10 domains: 3 + 5 + 2 = 10
        domainConfig.value.selection_strategy = { 
            foundational: Math.floor(domains * 0.3), 
            technical: Math.floor(domains * 0.5), 
            managerial: domains - Math.floor(domains * 0.3) - Math.floor(domains * 0.5)
        };
    } else if (domains <= 15) {
        // For 15 domains: 4 + 8 + 3 = 15
        domainConfig.value.selection_strategy = { 
            foundational: Math.floor(domains * 0.27), 
            technical: Math.floor(domains * 0.53), 
            managerial: domains - Math.floor(domains * 0.27) - Math.floor(domains * 0.53)
        };
    } else {
        // For 20 domains: 5 + 10 + 5 = 20
        domainConfig.value.selection_strategy = { 
            foundational: Math.floor(domains * 0.25), 
            technical: Math.floor(domains * 0.5), 
            managerial: domains - Math.floor(domains * 0.25) - Math.floor(domains * 0.5)
        };
    }
    
    validateDomainConfig();
};

// Validate domain configuration
const validateDomainConfig = () => {
    const total = domainConfig.value.total_domains * domainConfig.value.questions_per_domain;
    if (total !== form.question_count) {
        // Try to adjust questions per domain
        domainConfig.value.questions_per_domain = Math.floor(form.question_count / domainConfig.value.total_domains);
    }
};

// Submit form
const submit = () => {
    // Prepare features object
    form.features = {
        display_features: displayFeaturesText.value.split('\n').filter(f => f.trim()),
        domain_selection: domainConfig.value,
        question_selection: questionConfig.value,
        early_termination: terminationConfig.value,
        algorithm: algorithmConfig.value,
        timing: timingConfig.value,
        scoring: {
            domain_mastery_bloom: 6,
            report_detail_level: 'standard'
        }
    };
    
    form.put(typeof route !== 'undefined' ? route('admin.diagnostic-modes.update', props.mode.id) : `/admin/diagnostic-modes/${props.mode.id}`);
};
</script>