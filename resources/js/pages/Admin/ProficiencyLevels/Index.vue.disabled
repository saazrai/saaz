<template>
  <AdminLayout pageTitle="Proficiency Levels">
    <div class="p-6">
      <!-- Header -->
      <div class="flex justify-between items-center mb-6">
        <div>
          <h1 :class="['text-3xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">Proficiency Levels</h1>
          <p :class="['mt-1', isDarkMode ? 'text-gray-400' : 'text-gray-600']">Manage score-based proficiency level definitions</p>
        </div>
        <Link 
          :href="route('admin.settings.learning.proficiency-levels.create')"
          class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
        >
          <PlusIcon class="h-5 w-5" />
          <span>Add Proficiency Level</span>
        </Link>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div :class="['rounded-lg shadow-sm p-6', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200']">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <AcademicCapIcon class="h-8 w-8 text-blue-600" />
            </div>
            <div class="ml-4">
              <p :class="['text-sm font-medium', isDarkMode ? 'text-gray-400' : 'text-gray-500']">Total Levels</p>
              <p :class="['text-2xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">{{ proficiencyLevels.data.length }}</p>
            </div>
          </div>
        </div>
        
        <div :class="['rounded-lg shadow-sm p-6', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200']">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <CheckCircleIcon class="h-8 w-8 text-green-600" />
            </div>
            <div class="ml-4">
              <p :class="['text-sm font-medium', isDarkMode ? 'text-gray-400' : 'text-gray-500']">Active Levels</p>
              <p :class="['text-2xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">{{ activeLevelsCount }}</p>
            </div>
          </div>
        </div>
        
        <div :class="['rounded-lg shadow-sm p-6', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200']">
          <div class="flex items-center">
            <div class="p-2 bg-yellow-100 rounded-lg">
              <ChartBarIcon class="h-8 w-8 text-yellow-600" />
            </div>
            <div class="ml-4">
              <p :class="['text-sm font-medium', isDarkMode ? 'text-gray-400' : 'text-gray-500']">Score Range</p>
              <p :class="['text-2xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">0-100</p>
            </div>
          </div>
        </div>
        
        <div :class="['rounded-lg shadow-sm p-6', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200']">
          <div class="flex items-center">
            <div class="p-2 bg-purple-100 rounded-lg">
              <CogIcon class="h-8 w-8 text-purple-600" />
            </div>
            <div class="ml-4">
              <p :class="['text-sm font-medium', isDarkMode ? 'text-gray-400' : 'text-gray-500']">Coverage</p>
              <p :class="['text-2xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">100%</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Search and Filters -->
      <div :class="['rounded-lg shadow-sm p-4 mb-6', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white']">
        <div class="flex flex-col sm:flex-row gap-4">
          <div class="flex-1">
            <input 
              v-model="searchTerm" 
              type="text" 
              placeholder="Search proficiency levels..."
              :class="[
                'w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                  : 'border-gray-300'
              ]" 
            />
          </div>
          <div class="flex gap-2">
            <select 
              v-model="statusFilter"
              :class="[
                'px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white' 
                  : 'border-gray-300'
              ]"
            >
              <option value="">All Status</option>
              <option value="1">Active</option>
              <option value="0">Inactive</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Proficiency Levels Table -->
      <div :class="['rounded-lg shadow-sm overflow-hidden', isDarkMode ? 'bg-gray-800' : 'bg-white']">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead :class="[isDarkMode ? 'bg-gray-700' : 'bg-gray-50']">
            <tr>
              <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Level
              </th>
              <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Score Range
              </th>
              <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Color
              </th>
              <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Order
              </th>
              <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Status
              </th>
              <th :class="['px-6 py-3 text-right text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                Actions
              </th>
            </tr>
          </thead>
          <tbody :class="['divide-y', isDarkMode ? 'bg-gray-800 divide-gray-700' : 'bg-white divide-gray-200']">
            <tr 
              v-for="level in filteredLevels" 
              :key="level.id" 
              :class="[isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50']"
            >
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div 
                    class="w-4 h-4 rounded-full mr-3"
                    :style="{ backgroundColor: level.color_code }"
                  ></div>
                  <div>
                    <div :class="['text-sm font-medium', isDarkMode ? 'text-white' : 'text-gray-900']">
                      {{ level.display_name }}
                    </div>
                    <div :class="['text-sm', isDarkMode ? 'text-gray-400' : 'text-gray-500']">
                      {{ level.name }}
                    </div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span :class="['inline-flex px-2 py-1 text-xs font-semibold rounded-full', isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800']">
                  {{ level.min_score }} - {{ level.max_score }}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div 
                    class="w-6 h-6 rounded-full border-2 border-gray-300"
                    :style="{ backgroundColor: level.color_code }"
                  ></div>
                  <span :class="['ml-2 text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-600']">
                    {{ level.color_code }}
                  </span>
                </div>
              </td>
              <td :class="['px-6 py-4 whitespace-nowrap text-sm', isDarkMode ? 'text-white' : 'text-gray-900']">
                {{ level.sort_order }}
              </td>
              <td class="px-6 py-4">
                <Switch 
                  :checked="level.is_active" 
                  @update:checked="(checked) => toggleStatus(level, checked)"
                  :disabled="togglingStatus === level.id"
                />
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <div class="flex justify-end space-x-2">
                  <Link 
                    :href="route('admin.settings.learning.proficiency-levels.edit', level.id)"
                    :class="[isDarkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-900']"
                  >
                    <PencilIcon class="h-4 w-4" />
                  </Link>
                  <button 
                    @click="confirmDelete(level)"
                    :class="[isDarkMode ? 'text-red-400 hover:text-red-300' : 'text-red-600 hover:text-red-900']"
                  >
                    <TrashIcon class="h-4 w-4" />
                  </button>
                </div>
              </td>
            </tr>
          </tbody>
        </table>

        <!-- Empty State -->
        <div v-if="filteredLevels.length === 0" class="text-center py-12">
          <AcademicCapIcon :class="['w-12 h-12 mx-auto mb-4', isDarkMode ? 'text-gray-400' : 'text-gray-300']" />
          <div :class="[isDarkMode ? 'text-gray-400' : 'text-gray-500']">No proficiency levels found</div>
        </div>
      </div>

      <!-- Pagination -->
      <div v-if="proficiencyLevels.links" class="mt-6">
        <nav class="flex items-center justify-between">
          <div class="flex justify-between flex-1 sm:hidden">
            <Link
              v-if="proficiencyLevels.prev_page_url"
              :href="proficiencyLevels.prev_page_url"
              :class="['relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-md', isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600' : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50']"
            >
              Previous
            </Link>
            <Link
              v-if="proficiencyLevels.next_page_url"
              :href="proficiencyLevels.next_page_url"
              :class="['ml-3 relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-md', isDarkMode ? 'bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600' : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50']"
            >
              Next
            </Link>
          </div>
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p :class="['text-sm', isDarkMode ? 'text-gray-400' : 'text-gray-700']">
                Showing
                <span class="font-medium">{{ proficiencyLevels.from || 0 }}</span>
                to
                <span class="font-medium">{{ proficiencyLevels.to || 0 }}</span>
                of
                <span class="font-medium">{{ proficiencyLevels.total || 0 }}</span>
                results
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                <template v-for="link in proficiencyLevels.links" :key="link.label">
                  <Link
                    v-if="link.url"
                    :href="link.url"
                    :class="[
                      link.active
                        ? (isDarkMode 
                            ? 'z-10 bg-indigo-900/50 border-indigo-500 text-indigo-400' 
                            : 'z-10 bg-indigo-50 border-indigo-500 text-indigo-600')
                        : (isDarkMode 
                            ? 'bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700' 
                            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'),
                      'relative inline-flex items-center px-4 py-2 border text-sm font-medium transition-colors'
                    ]"
                    v-html="link.label"
                  />
                  <span
                    v-else
                    :class="[
                      'relative inline-flex items-center px-4 py-2 border text-sm font-medium cursor-not-allowed',
                      isDarkMode 
                        ? 'bg-gray-800 border-gray-600 text-gray-500' 
                        : 'bg-white border-gray-300 text-gray-400'
                    ]"
                    v-html="link.label"
                  />
                </template>
              </nav>
            </div>
          </div>
        </nav>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { Link, router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Switch } from '@/Components/shadcn/ui/switch'
import { 
  PlusIcon, 
  PencilIcon, 
  TrashIcon, 
  AcademicCapIcon, 
  CheckCircleIcon, 
  ChartBarIcon, 
  CogIcon 
} from '@heroicons/vue/24/outline'
import { showError, showSuccess, showConfirm, showLoading } from '@/Utils/dialog-service'

const props = defineProps({
  proficiencyLevels: {
    type: Object,
    required: true
  }
})

// Dark mode state
const isDarkMode = ref(false)

// Load dark mode preference and watch for changes
onMounted(() => {
  const saved = localStorage.getItem('adminDarkMode')
  isDarkMode.value = saved === 'true'
  
  // Watch for localStorage changes (when dark mode is toggled from AdminLayout)
  const handleStorageChange = () => {
    const saved = localStorage.getItem('adminDarkMode')
    isDarkMode.value = saved === 'true'
  }
  
  window.addEventListener('storage', handleStorageChange)
  // Also watch for custom events from AdminLayout
  window.addEventListener('adminDarkModeChanged', handleStorageChange)
  
  // Cleanup on unmount
  return () => {
    window.removeEventListener('storage', handleStorageChange)
    window.removeEventListener('adminDarkModeChanged', handleStorageChange)
  }
})

// Filter states
const searchTerm = ref('')
const statusFilter = ref('')
const togglingStatus = ref(null)

// Computed properties
const activeLevelsCount = computed(() => {
  return props.proficiencyLevels.data.filter(level => level.is_active).length
})

const filteredLevels = computed(() => {
  let levels = props.proficiencyLevels.data

  // Search filter
  if (searchTerm.value) {
    const search = searchTerm.value.toLowerCase()
    levels = levels.filter(level => 
      level.name.toLowerCase().includes(search) ||
      level.display_name.toLowerCase().includes(search) ||
      level.description?.toLowerCase().includes(search)
    )
  }

  // Status filter
  if (statusFilter.value !== '') {
    const isActive = statusFilter.value === '1'
    levels = levels.filter(level => level.is_active === isActive)
  }

  return levels
})

// Methods
const toggleStatus = async (level, checked) => {
  try {
    togglingStatus.value = level.id
    
    await router.patch(
      route('admin.settings.learning.proficiency-levels.status.toggle', level.id),
      { is_active: checked },
      {
        preserveState: true,
        preserveScroll: true,
        onSuccess: () => {
          // Update the level status in the local data
          const levelIndex = props.proficiencyLevels.data.findIndex(l => l.id === level.id)
          if (levelIndex !== -1) {
            props.proficiencyLevels.data[levelIndex].is_active = checked
          }
        },
        onError: (errors) => {
          console.error('Toggle status error:', errors)
          showError('Error', 'Failed to update status')
        },
        onFinish: () => {
          togglingStatus.value = null
        }
      }
    )
  } catch (error) {
    console.error('Toggle status error:', error)
    togglingStatus.value = null
  }
}

const confirmDelete = (level) => {
  showConfirm(
    'Delete Proficiency Level',
    `Are you sure you want to delete "${level.display_name}"? This action cannot be undone.`,
    'Yes, Delete',
    'Cancel'
  ).then((result) => {
    if (result.isConfirmed) {
      deleteLevel(level)
    }
  })
}

const deleteLevel = async (level) => {
  try {
    await router.delete(route('admin.settings.learning.proficiency-levels.destroy', level.id), {
      onSuccess: () => {
        showSuccess(
          'Deleted!',
          'Proficiency level has been deleted.'
        )
      },
      onError: (errors) => {
        console.error('Delete error:', errors)
        showError(
          'Error',
          errors.message || 'Failed to delete proficiency level'
        )
      }
    })
  } catch (error) {
    console.error('Delete error:', error)
    showError(
      'Error',
      'Failed to delete proficiency level'
    )
  }
}
</script>
