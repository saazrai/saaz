<template>
  <AdminLayout>
    <Head title="Edit Proficiency Level" />
    
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
            Edit Proficiency Level
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Modify the proficiency level settings and score ranges
          </p>
        </div>
        <Link 
          :href="route('admin.settings.learning.proficiency-levels.index')"
          class="inline-flex items-center px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white font-medium rounded-lg transition-colors duration-200"
        >
          <ArrowLeftIcon class="w-4 h-4 mr-2" />
          Back to List
        </Link>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Form Column -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">
            Level Details
          </h2>

          <form @submit.prevent="updateLevel" class="space-y-6">
            <!-- Name -->
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Level Name *
              </label>
              <input
                id="name"
                v-model="form.name"
                type="text"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                placeholder="e.g., novice, competent, mastery"
              />
              <div v-if="errors.name" class="mt-1 text-sm text-red-600 dark:text-red-400">
                {{ errors.name }}
              </div>
            </div>

            <!-- Display Name -->
            <div>
              <label for="display_name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Display Name *
              </label>
              <input
                id="display_name"
                v-model="form.display_name"
                type="text"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                placeholder="e.g., Novice, Competent, Mastery"
              />
              <div v-if="errors.display_name" class="mt-1 text-sm text-red-600 dark:text-red-400">
                {{ errors.display_name }}
              </div>
            </div>

            <!-- Score Range -->
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label for="min_score" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Min Score *
                </label>
                <input
                  id="min_score"
                  v-model.number="form.min_score"
                  type="number"
                  min="0"
                  max="100"
                  required
                  class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                  placeholder="0"
                />
                <div v-if="errors.min_score" class="mt-1 text-sm text-red-600 dark:text-red-400">
                  {{ errors.min_score }}
                </div>
              </div>
              <div>
                <label for="max_score" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Max Score *
                </label>
                <input
                  id="max_score"
                  v-model.number="form.max_score"
                  type="number"
                  min="0"
                  max="100"
                  required
                  class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                  placeholder="100"
                />
                <div v-if="errors.max_score" class="mt-1 text-sm text-red-600 dark:text-red-400">
                  {{ errors.max_score }}
                </div>
              </div>
            </div>

            <!-- Score Range Validation -->
            <div v-if="scoreRangeError" class="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
              <p class="text-sm text-red-600 dark:text-red-400">
                {{ scoreRangeError }}
              </p>
            </div>

            <!-- Description -->
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Description
              </label>
              <textarea
                id="description"
                v-model="form.description"
                rows="3"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                placeholder="Describe this proficiency level..."
              ></textarea>
              <div v-if="errors.description" class="mt-1 text-sm text-red-600 dark:text-red-400">
                {{ errors.description }}
              </div>
            </div>

            <!-- Color Code -->
            <div>
              <label for="color_code" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Color Code *
              </label>
              <div class="flex items-center space-x-3">
                <input
                  id="color_code"
                  v-model="form.color_code"
                  type="color"
                  class="w-12 h-12 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer"
                />
                <input
                  v-model="form.color_code"
                  type="text"
                  class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                  placeholder="#3B82F6"
                />
              </div>
              <div v-if="errors.color_code" class="mt-1 text-sm text-red-600 dark:text-red-400">
                {{ errors.color_code }}
              </div>
            </div>

            <!-- Sort Order -->
            <div>
              <label for="sort_order" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Sort Order *
              </label>
              <input
                id="sort_order"
                v-model.number="form.sort_order"
                type="number"
                min="1"
                required
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                placeholder="1"
              />
              <div v-if="errors.sort_order" class="mt-1 text-sm text-red-600 dark:text-red-400">
                {{ errors.sort_order }}
              </div>
            </div>

            <!-- Status -->
            <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <label for="is_active" class="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Active Status
                </label>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  Enable this proficiency level for use
                </p>
              </div>
              <label class="relative inline-flex items-center cursor-pointer">
                <input
                  id="is_active"
                  v-model="form.is_active"
                  type="checkbox"
                  class="sr-only peer"
                />
                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
              </label>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end pt-6">
              <button
                type="submit"
                :disabled="processing || !!scoreRangeError"
                class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-medium rounded-lg transition-colors duration-200 disabled:cursor-not-allowed"
              >
                <CheckIcon v-if="!processing" class="w-4 h-4 mr-2" />
                <svg v-else class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                {{ processing ? 'Updating...' : 'Update Level' }}
              </button>
            </div>
          </form>
        </div>

        <!-- Preview Column -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">
            Live Preview
          </h2>

          <!-- Preview Card -->
          <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-3">
                <div 
                  class="w-4 h-4 rounded-full"
                  :style="{ backgroundColor: form.color_code || '#6B7280' }"
                ></div>
                <span class="font-medium text-gray-900 dark:text-white">
                  {{ form.display_name || 'Display Name' }}
                </span>
              </div>
              <span 
                class="px-2 py-1 text-xs font-medium rounded-full"
                :class="form.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'"
              >
                {{ form.is_active ? 'Active' : 'Inactive' }}
              </span>
            </div>

            <div class="space-y-2">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600 dark:text-gray-400">Score Range:</span>
                <span class="font-medium text-gray-900 dark:text-white">
                  {{ form.min_score || 0 }}% - {{ form.max_score || 0 }}%
                </span>
              </div>
              <div class="flex justify-between text-sm">
                <span class="text-gray-600 dark:text-gray-400">Sort Order:</span>
                <span class="font-medium text-gray-900 dark:text-white">
                  {{ form.sort_order || 1 }}
                </span>
              </div>
              <div v-if="form.description" class="pt-2 border-t border-gray-200 dark:border-gray-700">
                <p class="text-sm text-gray-600 dark:text-gray-400">
                  {{ form.description }}
                </p>
              </div>
            </div>
          </div>

          <!-- Score Range Visualization -->
          <div class="mt-6">
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              Score Range Visualization
            </h3>
            <div class="relative">
              <div class="h-8 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden">
                <div 
                  class="h-full transition-all duration-300"
                  :style="{ 
                    backgroundColor: form.color_code || '#6B7280',
                    width: `${Math.max(0, (form.max_score || 0) - (form.min_score || 0))}%`,
                    marginLeft: `${form.min_score || 0}%`
                  }"
                ></div>
              </div>
              <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
                <span>0%</span>
                <span>50%</span>
                <span>100%</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { Head, Link, useForm } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { ArrowLeftIcon, CheckIcon } from '@heroicons/vue/24/outline'

const props = defineProps({
  level: {
    type: Object,
    required: true
  },
  errors: {
    type: Object,
    default: () => ({})
  }
})

const form = useForm({
  name: props.level.name,
  display_name: props.level.display_name,
  min_score: props.level.min_score,
  max_score: props.level.max_score,
  description: props.level.description,
  color_code: props.level.color_code,
  sort_order: props.level.sort_order,
  is_active: props.level.is_active
})

const processing = computed(() => form.processing)

const scoreRangeError = computed(() => {
  if (!form.min_score && form.min_score !== 0) return null
  if (!form.max_score && form.max_score !== 0) return null
  
  if (form.min_score < 0 || form.min_score > 100) {
    return 'Minimum score must be between 0 and 100'
  }
  
  if (form.max_score < 0 || form.max_score > 100) {
    return 'Maximum score must be between 0 and 100'
  }
  
  if (form.min_score >= form.max_score) {
    return 'Minimum score must be less than maximum score'
  }
  
  return null
})

const updateLevel = () => {
  if (scoreRangeError.value) return
  
  form.put(route('admin.settings.learning.proficiency-levels.update', props.level.id), {
    onSuccess: () => {
      // Success message will be handled by the flash data
    }
  })
}

onMounted(() => {
  // Ensure reactive data is properly set
  form.defaults({
    name: props.level.name,
    display_name: props.level.display_name,
    min_score: props.level.min_score,
    max_score: props.level.max_score,
    description: props.level.description,
    color_code: props.level.color_code,
    sort_order: props.level.sort_order,
    is_active: props.level.is_active
  })
})
</script>
