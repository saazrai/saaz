<template>
  <AdminLayout>
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 :class="[
            'text-3xl font-bold',
            isDarkMode ? 'text-gray-100' : 'text-gray-900'
          ]">Products</h1>
          <p :class="[
            'text-gray-600',
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">Manage your course products and offerings</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-4 mt-4 md:mt-0">
          <button
            @click="showCreateModal = true"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
          >
            <PlusIcon class="h-5 w-5" />
            <span>Create Product</span>
          </button>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div :class="[
          'rounded-lg shadow p-6',
          isDarkMode ? 'bg-gray-800' : 'bg-white'
        ]">
          <div class="flex items-center">
            <div :class="[
              'p-2 rounded-lg',
              isDarkMode ? 'bg-blue-900' : 'bg-blue-100'
            ]">
              <CubeIcon :class="[
                'h-6 w-6',
                isDarkMode ? 'text-blue-400' : 'text-blue-600'
              ]" />
            </div>
            <div class="ml-4">
              <p :class="[
                'text-sm font-medium',
                isDarkMode ? 'text-gray-400' : 'text-gray-600'
              ]">Total Products</p>
              <p :class="[
                'text-2xl font-semibold',
                isDarkMode ? 'text-gray-200' : 'text-gray-900'
              ]">{{ stats.total || 0 }}</p>
            </div>
          </div>
        </div>
        <div :class="[
          'rounded-lg shadow p-6',
          isDarkMode ? 'bg-gray-800' : 'bg-white'
        ]">
          <div class="flex items-center">
            <div :class="[
              'p-2 rounded-lg',
              isDarkMode ? 'bg-green-900' : 'bg-green-100'
            ]">
              <CheckCircleIcon :class="[
                'h-6 w-6',
                isDarkMode ? 'text-green-400' : 'text-green-600'
              ]" />
            </div>
            <div class="ml-4">
              <p :class="[
                'text-sm font-medium',
                isDarkMode ? 'text-gray-400' : 'text-gray-600'
              ]">Published</p>
              <p :class="[
                'text-2xl font-semibold',
                isDarkMode ? 'text-gray-200' : 'text-gray-900'
              ]">{{ stats.published || 0 }}</p>
            </div>
          </div>
        </div>
        <div :class="[
          'rounded-lg shadow p-6',
          isDarkMode ? 'bg-gray-800' : 'bg-white'
        ]">
          <div class="flex items-center">
            <div :class="[
              'p-2 rounded-lg',
              isDarkMode ? 'bg-yellow-900' : 'bg-yellow-100'
            ]">
              <ClockIcon :class="[
                'h-6 w-6',
                isDarkMode ? 'text-yellow-400' : 'text-yellow-600'
              ]" />
            </div>
            <div class="ml-4">
              <p :class="[
                'text-sm font-medium',
                isDarkMode ? 'text-gray-400' : 'text-gray-600'
              ]">Draft</p>
              <p :class="[
                'text-2xl font-semibold',
                isDarkMode ? 'text-gray-200' : 'text-gray-900'
              ]">{{ stats.draft || 0 }}</p>
            </div>
          </div>
        </div>
        <div :class="[
          'rounded-lg shadow p-6',
          isDarkMode ? 'bg-gray-800' : 'bg-white'
        ]">
          <div class="flex items-center">
            <div :class="[
              'p-2 rounded-lg',
              isDarkMode ? 'bg-red-900' : 'bg-red-100'
            ]">
              <XCircleIcon :class="[
                'h-6 w-6',
                isDarkMode ? 'text-red-400' : 'text-red-600'
              ]" />
            </div>
            <div class="ml-4">
              <p :class="[
                'text-sm font-medium',
                isDarkMode ? 'text-gray-400' : 'text-gray-600'
              ]">Archived</p>
              <p :class="[
                'text-2xl font-semibold',
                isDarkMode ? 'text-gray-200' : 'text-gray-900'
              ]">{{ stats.archived || 0 }}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Table -->
      <div :class="[
        'rounded-lg shadow-sm',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <table class="min-w-full">
          <thead>
            <tr :class="[
              'border-b',
              isDarkMode ? 'border-gray-700' : 'border-gray-200'
            ]">
              <th :class="[
                'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Image
              </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Course
            </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Duration
            </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Status
            </th>
            <th :class="[
              'px-8 py-4 text-left text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              Sales
            </th>
            <th :class="[
              'px-8 py-4 text-right text-sm font-medium uppercase tracking-wider',
              isDarkMode ? 'text-gray-300' : 'text-gray-500'
            ]">
              
            </th>
          </tr>
        </thead>
        <tbody>
          <tr 
            v-for="product in products.data" 
            :key="product.id" 
            @click="showProduct(product)"
            :class="[
              'border-b cursor-pointer transition-colors',
              isDarkMode 
                ? 'border-gray-700 hover:bg-gray-700' 
                : 'border-gray-100 hover:bg-gray-50'
            ]"
          >
            <td class="px-8 py-6">
              <div class="flex items-center">
                <div class="h-10 w-10 flex-shrink-0">
                  <img v-if="product.image" :src="product.image" :alt="product.title" class="h-10 w-10 rounded-lg object-cover" />
                  <div v-else :class="[
                    'h-10 w-10 rounded-lg flex items-center justify-center',
                    isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
                  ]">
                    <CubeIcon :class="[
                      'h-6 w-6',
                      isDarkMode ? 'text-gray-400' : 'text-gray-400'
                    ]" />
                  </div>
                </div>
                <div class="ml-4">
                  <div :class="[
                    'font-medium',
                    isDarkMode ? 'text-gray-100' : 'text-gray-900'
                  ]">{{ product.name }}</div>
                  <div :class="[
                    'text-sm',
                    isDarkMode ? 'text-gray-400' : 'text-gray-500'
                  ]">{{ truncate(product.short_description || product.description, 50) }}</div>
                </div>
              </div>
            </td>
            <td class="px-8 py-6">
              <div :class="[
                'text-sm',
                isDarkMode ? 'text-gray-100' : 'text-gray-900'
              ]">
                {{ product.course?.name || 'No Course' }}
              </div>
              <div :class="[
                'text-xs',
                isDarkMode ? 'text-gray-400' : 'text-gray-500'
              ]">{{ product.course?.code }}</div>
            </td>
            <td class="px-8 py-6">
              <div :class="[
                'text-sm',
                isDarkMode ? 'text-gray-100' : 'text-gray-900'
              ]">
                {{ formatDateRange(product.starts_at, product.ends_at) }}
              </div>
            </td>
            <td class="px-8 py-6">
              <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium"
                    :class="getStatusBadgeClass(product.is_active)">
                {{ product.is_active ? 'Active' : 'Inactive' }}
              </span>
            </td>
            <td class="px-8 py-6">
              <div :class="[
                'text-sm',
                isDarkMode ? 'text-gray-100' : 'text-gray-900'
              ]">{{ product.sales_count || 0 }} sales</div>
              <div :class="[
                'text-xs',
                isDarkMode ? 'text-gray-400' : 'text-gray-500'
              ]">Revenue: {{ product.total_revenue || 0 }}</div>
            </td>
            <td class="px-8 py-6 text-right">
              <span :class="[
                isDarkMode ? 'text-gray-400' : 'text-gray-400'
              ]">â€º</span>
            </td>
          </tr>
        </tbody>
      </table>

      <!-- Pagination -->
      <div v-if="products.last_page > 1" :class="[
        'px-4 py-3 flex items-center justify-between border-t',
        isDarkMode 
          ? 'bg-gray-800 border-gray-700' 
          : 'bg-white border-gray-200'
      ]">
        <div class="flex-1 flex justify-between sm:hidden">
          <Link :href="products.prev_page_url" 
                :class="[
                  'relative inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md',
                  isDarkMode
                    ? 'border-gray-600 text-gray-300 bg-gray-700 hover:bg-gray-600'
                    : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50',
                  { 'opacity-50 cursor-not-allowed': !products.prev_page_url }
                ]">
            Previous
          </Link>
          <Link :href="products.next_page_url"
                :class="[
                  'ml-3 relative inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md',
                  isDarkMode
                    ? 'border-gray-600 text-gray-300 bg-gray-700 hover:bg-gray-600'
                    : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50',
                  { 'opacity-50 cursor-not-allowed': !products.next_page_url }
                ]">
            Next
          </Link>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p :class="[
              'text-sm',
              isDarkMode ? 'text-gray-300' : 'text-gray-700'
            ]">
              Showing <span class="font-medium">{{ products.from }}</span> to <span class="font-medium">{{ products.to }}</span> of <span class="font-medium">{{ products.total }}</span> results
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Product Modal -->
    <TransitionRoot appear :show="showCreateModal" as="template">
      <Dialog as="div" @close="showCreateModal = false" class="relative z-10">
        <TransitionChild
          as="template"
          enter="duration-300 ease-out"
          enter-from="opacity-0"
          enter-to="opacity-100"
          leave="duration-200 ease-in"
          leave-from="opacity-100"
          leave-to="opacity-0"
        >
          <div class="fixed inset-0 bg-black bg-opacity-25" />
        </TransitionChild>

        <div class="fixed inset-0 overflow-y-auto">
          <div class="flex min-h-full items-center justify-center p-4 text-center">
            <TransitionChild
              as="template"
              enter="duration-300 ease-out"
              enter-from="opacity-0 scale-95"
              enter-to="opacity-100 scale-100"
              leave="duration-200 ease-in"
              leave-from="opacity-100 scale-100"
              leave-to="opacity-0 scale-95"
            >
              <DialogPanel :class="[
                isDarkMode ? 'bg-gray-800' : 'bg-white',
                'w-full max-w-md transform overflow-hidden rounded-2xl p-6 text-left align-middle shadow-xl transition-all'
              ]">
                <DialogTitle as="h3" :class="[isDarkMode ? 'text-white' : 'text-gray-900', 'text-lg font-medium leading-6']">
                  Create Product
                </DialogTitle>
                <form @submit.prevent="createProduct" class="mt-4">
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Name</label>
                    <input v-model="form.name" type="text" required :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500'
                    ]" />
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Short Description</label>
                    <textarea v-model="form.short_description" rows="2" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500'
                    ]"></textarea>
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Description</label>
                    <textarea v-model="form.description" rows="3" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500'
                    ]"></textarea>
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Course</label>
                    <select v-model="form.course_id" required :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]">
                      <option value="">Select Course</option>
                      <option v-for="course in courses" :key="course.id" :value="course.id">{{ course.name }} ({{ course.code }})</option>
                    </select>
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Start Date</label>
                    <input v-model="form.starts_at" type="datetime-local" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]" />
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">End Date</label>
                    <input v-model="form.ends_at" type="datetime-local" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]" />
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Status</label>
                    <select v-model="form.is_active" required :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]">
                      <option :value="true">Active</option>
                      <option :value="false">Inactive</option>
                    </select>
                  </div>
                  <div class="mt-6 flex justify-end space-x-3">
                    <button
                      type="button"
                      @click="showCreateModal = false"
                      :class="[
                        'px-4 py-2 text-sm font-medium rounded-md',
                        isDarkMode 
                          ? 'text-gray-300 bg-gray-700 hover:bg-gray-600' 
                          : 'text-gray-700 bg-gray-100 hover:bg-gray-200'
                      ]"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      :disabled="form.processing"
                      class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50"
                    >
                      Create Product
                    </button>
                  </div>
                </form>
              </DialogPanel>
            </TransitionChild>
          </div>
        </div>
      </Dialog>
    </TransitionRoot>

    <!-- Edit Product Modal -->
    <TransitionRoot appear :show="showEditModal" as="template">
      <Dialog as="div" @close="showEditModal = false" class="relative z-10">
        <TransitionChild
          as="template"
          enter="duration-300 ease-out"
          enter-from="opacity-0"
          enter-to="opacity-100"
          leave="duration-200 ease-in"
          leave-from="opacity-100"
          leave-to="opacity-0"
        >
          <div class="fixed inset-0 bg-black bg-opacity-25" />
        </TransitionChild>

        <div class="fixed inset-0 overflow-y-auto">
          <div class="flex min-h-full items-center justify-center p-4 text-center">
            <TransitionChild
              as="template"
              enter="duration-300 ease-out"
              enter-from="opacity-0 scale-95"
              enter-to="opacity-100 scale-100"
              leave="duration-200 ease-in"
              leave-from="opacity-100 scale-100"
              leave-to="opacity-0 scale-95"
            >
              <DialogPanel :class="[
                'w-full max-w-md transform overflow-hidden rounded-2xl p-6 text-left align-middle shadow-xl transition-all',
                isDarkMode ? 'bg-gray-800' : 'bg-white'
              ]">
                <DialogTitle as="h3" :class="[
                  'text-lg font-medium leading-6',
                  isDarkMode ? 'text-white' : 'text-gray-900'
                ]">
                  Edit Product
                </DialogTitle>
                <form @submit.prevent="updateProduct" class="mt-4">
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Name</label>
                    <input v-model="editForm.name" type="text" required :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500'
                    ]" />
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Short Description</label>
                    <textarea v-model="editForm.short_description" rows="2" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500'
                    ]"></textarea>
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Description</label>
                    <textarea v-model="editForm.description" rows="3" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500'
                    ]"></textarea>
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Course</label>
                    <select v-model="editForm.course_id" required :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]">
                      <option value="">Select Course</option>
                      <option v-for="course in courses" :key="course.id" :value="course.id">{{ course.name }} ({{ course.code }})</option>
                    </select>
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Start Date</label>
                    <input v-model="editForm.starts_at" type="datetime-local" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]" />
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">End Date</label>
                    <input v-model="editForm.ends_at" type="datetime-local" :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]" />
                  </div>
                  <div class="mb-4">
                    <label :class="[
                      'block text-sm font-medium',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]">Status</label>
                    <select v-model="editForm.is_active" required :class="[
                      'mt-1 block w-full rounded-md shadow-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500 focus:ring-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500'
                    ]">
                      <option :value="true">Active</option>
                      <option :value="false">Inactive</option>
                    </select>
                  </div>
                  <div class="mt-6 flex justify-end space-x-3">
                    <button
                      type="button"
                      @click="showEditModal = false"
                      :class="[
                        'px-4 py-2 text-sm font-medium rounded-md',
                        isDarkMode 
                          ? 'text-gray-300 bg-gray-700 hover:bg-gray-600' 
                          : 'text-gray-700 bg-gray-100 hover:bg-gray-200'
                      ]"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      @click="deleteProduct"
                      class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700"
                    >
                      Delete
                    </button>
                    <button
                      type="submit"
                      :disabled="editForm.processing"
                      class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50"
                    >
                      Update Product
                    </button>
                  </div>
                </form>
              </DialogPanel>
            </TransitionChild>
          </div>
        </div>
      </Dialog>
    </TransitionRoot>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import { Link, useForm } from '@inertiajs/vue3'
import { PlusIcon } from '@heroicons/vue/24/outline'
import { Dialog, DialogPanel, DialogTitle, TransitionChild, TransitionRoot } from '@headlessui/vue'
import { CubeIcon, CheckCircleIcon, ClockIcon, XCircleIcon } from '@heroicons/vue/24/outline'
import AdminLayout from '@/Layouts/AdminLayout.vue'

// Dark mode management
const isDarkMode = ref(false)

onMounted(() => {
  // Initialize dark mode state
  isDarkMode.value = localStorage.getItem('adminDarkMode') === 'true'
  
  // Listen for storage changes
  const handleStorageChange = (e) => {
    if (e.key === 'adminDarkMode') {
      isDarkMode.value = e.newValue === 'true'
    }
  }
  
  // Listen for custom dark mode events
  const handleDarkModeToggle = (e) => {
    isDarkMode.value = e.detail
  }
  
  window.addEventListener('storage', handleStorageChange)
  window.addEventListener('adminDarkModeToggle', handleDarkModeToggle)
  
  // Cleanup listeners on unmount
  onUnmounted(() => {
    window.removeEventListener('storage', handleStorageChange)
    window.removeEventListener('adminDarkModeToggle', handleDarkModeToggle)
  })
})

const props = defineProps({
  products: Object,
  stats: Object,
  courses: Array,
  filters: Object,
})

const showCreateModal = ref(false)
const showEditModal = ref(false)
const editingProduct = ref(null)

const form = useForm({
  name: '',
  short_description: '',
  description: '',
  course_id: '',
  starts_at: '',
  ends_at: '',
  is_active: true,
})

const editForm = useForm({
  name: '',
  short_description: '',
  description: '',
  course_id: '',
  starts_at: '',
  ends_at: '',
  is_active: true,
})

const showProduct = (product) => {
  editProduct(product)
}

const editProduct = (product) => {
  editingProduct.value = product
  editForm.name = product.name
  editForm.short_description = product.short_description
  editForm.description = product.description
  editForm.course_id = product.course_id
  editForm.starts_at = product.starts_at
  editForm.ends_at = product.ends_at
  editForm.is_active = product.is_active
  showEditModal.value = true
}

const createProduct = () => {
  form.post(route('admin.commerce.products.store'), {
    onSuccess: () => {
      showCreateModal.value = false
      form.reset()
    }
  })
}

const updateProduct = () => {
  editForm.put(route('admin.commerce.products.update', editingProduct.value.slug || editingProduct.value.id), {
    onSuccess: () => {
      showEditModal.value = false
      editForm.reset()
    }
  })
}

const deleteProduct = () => {
  if (confirm('Are you sure you want to delete this product?')) {
    editForm.delete(route('admin.commerce.products.destroy', editingProduct.value.slug || editingProduct.value.id), {
      onSuccess: () => {
        showEditModal.value = false
      }
    })
  }
}

const getStatusBadgeClass = (isActive) => {
  if (isDarkMode.value) {
    return isActive 
      ? 'bg-green-900 text-green-200' 
      : 'bg-red-900 text-red-200'
  } else {
    return isActive 
      ? 'bg-green-100 text-green-800' 
      : 'bg-red-100 text-red-800'
  }
}

const formatDateRange = (startDate, endDate) => {
  if (!startDate && !endDate) return 'No dates set'
  
  const formatDate = (date) => {
    if (!date) return null
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }
  
  const start = formatDate(startDate)
  const end = formatDate(endDate)
  
  if (start && end) {
    return `${start} - ${end}`
  } else if (start) {
    return `From ${start}`
  } else if (end) {
    return `Until ${end}`
  }
  
  return 'No dates set'
}

const truncate = (text, length) => {
  if (!text) return ''
  return text.length > length ? text.substring(0, length) + '...' : text
}
</script>
