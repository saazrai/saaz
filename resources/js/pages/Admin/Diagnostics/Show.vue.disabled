<template>
  <AdminLayout>
    <!-- Header -->
    <div :class="[
      'px-8 py-4 rounded-lg mb-6',
      isDarkMode ? 'bg-gray-800 text-white' : 'bg-gray-100 text-gray-900'
    ]">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-semibold">Diagnostic Test Report</h1>
          <p :class="[
            'mt-1',
            isDarkMode ? 'text-gray-300' : 'text-gray-600'
          ]">{{ diagnostic.user?.name || 'Unknown User' }} - {{ formatDate(diagnostic.created_at) }}</p>
        </div>
        <div class="flex gap-2">
          <Link
            :href="route('admin.diagnostics.index')"
            :class="[
              'px-4 py-2 rounded-md transition-colors',
              isDarkMode 
                ? 'bg-gray-600 hover:bg-gray-700 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-gray-900'
            ]"
          >
            Back to List
          </Link>
        </div>
      </div>
    </div>

    <!-- User & Test Info -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
      <!-- User Information -->
      <div :class="[
        'rounded-lg shadow-sm p-6',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <h2 :class="[
          'text-lg font-semibold mb-4',
          isDarkMode ? 'text-white' : 'text-gray-900'
        ]">User Information</h2>
        <div class="space-y-3">
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Name:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ diagnostic.user?.name || 'Unknown' }}</span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Email:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ diagnostic.user?.email || 'No email' }}</span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Test Started:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ formatDate(diagnostic.created_at) }}</span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Last Updated:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ formatDate(diagnostic.updated_at) }}</span>
          </div>
        </div>
      </div>

      <!-- Test Overview -->
      <div :class="[
        'rounded-lg shadow-sm p-6',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <h2 :class="[
          'text-lg font-semibold mb-4',
          isDarkMode ? 'text-white' : 'text-gray-900'
        ]">Test Overview</h2>
        <div class="space-y-3">
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Status:</span>
            <span 
              :class="[
                'inline-flex px-2 py-1 text-xs font-semibold rounded-full',
                diagnostic.status === 'completed' && (isDarkMode 
                  ? 'bg-green-900/50 text-green-300 border border-green-700' 
                  : 'bg-green-100 text-green-800'),
                diagnostic.status === 'in_progress' && (isDarkMode 
                  ? 'bg-blue-900/50 text-blue-300 border border-blue-700' 
                  : 'bg-blue-100 text-blue-800'),
                diagnostic.status === 'paused' && (isDarkMode 
                  ? 'bg-yellow-900/50 text-yellow-300 border border-yellow-700' 
                  : 'bg-yellow-100 text-yellow-800')
              ]"
            >
              {{ formatStatus(diagnostic.status) }}
            </span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Questions Answered:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ report.total_answered }} / {{ report.total_questions }}</span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Overall Score:</span>
            <span :class="[
              'font-medium text-lg',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ report.score }}%</span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Total Time:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ formatDuration(report.total_time) }}</span>
          </div>
          <div class="flex justify-between">
            <span :class="isDarkMode ? 'text-gray-400' : 'text-gray-600'">Avg. Time/Question:</span>
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ formatDuration(report.average_time_per_question) }}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Performance Analysis -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
      <!-- Domain Performance -->
      <div :class="[
        'rounded-lg shadow-sm p-6',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <h2 :class="[
          'text-lg font-semibold mb-4',
          isDarkMode ? 'text-white' : 'text-gray-900'
        ]">Performance by Domain</h2>
        <div class="space-y-3">
          <div v-for="domain in report.domain_performance" :key="domain.name" :class="[
            'border rounded-lg p-3',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <div class="flex justify-between items-center mb-2">
              <span :class="[
                'font-medium',
                isDarkMode ? 'text-white' : 'text-gray-900'
              ]">{{ domain.name }}</span>
              <span :class="[
                'text-lg font-semibold',
                isDarkMode ? 'text-blue-400' : 'text-blue-600'
              ]">{{ domain.score }}%</span>
            </div>
            <div :class="[
              'flex justify-between text-sm mb-2',
              isDarkMode ? 'text-gray-400' : 'text-gray-600'
            ]">
              <span>{{ domain.correct_count }} / {{ domain.total_answered }} correct</span>
              <span>{{ domain.total_answered }} questions</span>
            </div>
            <div :class="[
              'w-full rounded-full h-2',
              isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
            ]">
              <div 
                :class="[
                  'h-2 rounded-full',
                  isDarkMode ? 'bg-blue-500' : 'bg-blue-600'
                ]" 
                :style="{ width: `${domain.score}%` }"
              ></div>
            </div>
          </div>
          <div v-if="report.domain_performance.length === 0" :class="[
            'text-center py-4',
            isDarkMode ? 'text-gray-500' : 'text-gray-500'
          ]">
            No domain data available
          </div>
        </div>
      </div>

      <!-- Difficulty Analysis -->
      <div :class="[
        'rounded-lg shadow-sm p-6',
        isDarkMode ? 'bg-gray-800' : 'bg-white'
      ]">
        <h2 :class="[
          'text-lg font-semibold mb-4',
          isDarkMode ? 'text-white' : 'text-gray-900'
        ]">Performance by Difficulty</h2>
        <div class="space-y-3">
          <div v-for="difficulty in report.difficulty_performance" :key="difficulty.name" :class="[
            'border rounded-lg p-3',
            isDarkMode ? 'border-gray-700' : 'border-gray-200'
          ]">
            <div class="flex justify-between items-center mb-2">
              <span :class="[
                'font-medium',
                isDarkMode ? 'text-white' : 'text-gray-900'
              ]">{{ difficulty.name }}</span>
              <span :class="[
                'text-lg font-semibold',
                isDarkMode ? 'text-purple-400' : 'text-purple-600'
              ]">{{ difficulty.score }}%</span>
            </div>
            <div :class="[
              'flex justify-between text-sm mb-2',
              isDarkMode ? 'text-gray-400' : 'text-gray-600'
            ]">
              <span>{{ difficulty.correct_count }} / {{ difficulty.total_answered }} correct</span>
              <span>{{ difficulty.total_answered }} questions</span>
            </div>
            <div :class="[
              'w-full rounded-full h-2',
              isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
            ]">
              <div 
                :class="[
                  'h-2 rounded-full',
                  isDarkMode ? 'bg-purple-500' : 'bg-purple-600'
                ]" 
                :style="{ width: `${difficulty.score}%` }"
              ></div>
            </div>
          </div>
          <div v-if="report.difficulty_performance.length === 0" :class="[
            'text-center py-4',
            isDarkMode ? 'text-gray-500' : 'text-gray-500'
          ]">
            No difficulty data available
          </div>
        </div>
      </div>
    </div>

    <!-- Bloom Level Analysis -->
    <div :class="[
      'rounded-lg shadow-sm p-6 mb-6',
      isDarkMode ? 'bg-gray-800' : 'bg-white'
    ]">
      <h2 :class="[
        'text-lg font-semibold mb-4',
        isDarkMode ? 'text-white' : 'text-gray-900'
      ]">Performance by Bloom's Taxonomy Level</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <div v-for="bloom in report.bloom_performance" :key="bloom.name" :class="[
          'border rounded-lg p-4',
          isDarkMode ? 'border-gray-700' : 'border-gray-200'
        ]">
          <div class="flex justify-between items-center mb-2">
            <span :class="[
              'font-medium',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ bloom.name }}</span>
            <span :class="[
              'text-lg font-semibold',
              isDarkMode ? 'text-green-400' : 'text-green-600'
            ]">{{ bloom.score }}%</span>
          </div>
          <div :class="[
            'flex justify-between text-sm mb-2',
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">
            <span>{{ bloom.correct_count }} / {{ bloom.total_answered }} correct</span>
          </div>
          <div :class="[
            'w-full rounded-full h-2',
            isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
          ]">
            <div 
              :class="[
                'h-2 rounded-full',
                isDarkMode ? 'bg-green-500' : 'bg-green-600'
              ]" 
              :style="{ width: `${bloom.score}%` }"
            ></div>
          </div>
        </div>
        <div v-if="report.bloom_performance.length === 0" :class="[
          'text-center py-4 col-span-full',
          isDarkMode ? 'text-gray-500' : 'text-gray-500'
        ]">
          No Bloom level data available
        </div>
      </div>
    </div>

    <!-- Skills Dimension Analysis (Managerial/Technical) -->
    <div :class="[
      'rounded-lg shadow-sm p-6 mb-6',
      isDarkMode ? 'bg-gray-800' : 'bg-white'
    ]">
      <h2 :class="[
        'text-lg font-semibold mb-4',
        isDarkMode ? 'text-white' : 'text-gray-900'
      ]">Performance by Skills Dimension</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div v-for="dimension in report.dimension_performance" :key="dimension.name" :class="[
          'border rounded-lg p-6',
          isDarkMode ? 'border-gray-700' : 'border-gray-200'
        ]">
          <div class="flex justify-between items-center mb-4">
            <span :class="[
              'font-medium text-lg',
              isDarkMode ? 'text-white' : 'text-gray-900'
            ]">{{ dimension.name }} Skills</span>
            <span :class="[
              'text-2xl font-bold',
              isDarkMode ? 'text-orange-400' : 'text-orange-600'
            ]">{{ dimension.score }}%</span>
          </div>
          <div :class="[
            'flex justify-between text-sm mb-3',
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">
            <span>{{ dimension.correct_count }} / {{ dimension.total_answered }} correct</span>
            <span>{{ dimension.total_answered }} questions</span>
          </div>
          <div :class="[
            'w-full rounded-full h-3',
            isDarkMode ? 'bg-gray-700' : 'bg-gray-200'
          ]">
            <div 
              :class="[
                'h-3 rounded-full transition-all duration-300',
                isDarkMode ? 'bg-orange-500' : 'bg-orange-600'
              ]" 
              :style="{ width: `${dimension.score}%` }"
            ></div>
          </div>
          <div :class="[
            'mt-3 text-xs',
            isDarkMode ? 'text-gray-500' : 'text-gray-500'
          ]">
            <span v-if="dimension.score >= 80" :class="[
              'font-medium',
              isDarkMode ? 'text-green-400' : 'text-green-600'
            ]">Strong performance</span>
            <span v-else-if="dimension.score >= 60" :class="[
              'font-medium',
              isDarkMode ? 'text-yellow-400' : 'text-yellow-600'
            ]">Good performance</span>
            <span v-else :class="[
              'font-medium',
              isDarkMode ? 'text-red-400' : 'text-red-600'
            ]">Needs improvement</span>
          </div>
        </div>
        <div v-if="report.dimension_performance.length === 0" :class="[
          'text-center py-8 col-span-full',
          isDarkMode ? 'text-gray-500' : 'text-gray-500'
        ]">
          No dimension data available
        </div>
      </div>
    </div>

    <!-- Detailed Responses -->
    <div :class="[
      'rounded-lg shadow-sm p-6',
      isDarkMode ? 'bg-gray-800' : 'bg-white'
    ]">
      <h2 :class="[
        'text-lg font-semibold mb-4',
        isDarkMode ? 'text-white' : 'text-gray-900'
      ]">Detailed Question Responses</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full">
          <thead>
            <tr :class="[
              'border-b',
              isDarkMode ? 'border-gray-700' : 'border-gray-200'
            ]">
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Question #
              </th>
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Domain
              </th>
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Topic
              </th>
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Difficulty
              </th>
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Bloom Level
              </th>
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Result
              </th>
              <th :class="[
                'px-4 py-3 text-left text-xs font-medium uppercase tracking-wider',
                isDarkMode ? 'text-gray-300' : 'text-gray-500'
              ]">
                Time
              </th>
            </tr>
          </thead>
          <tbody>
            <tr 
              v-for="(response, index) in diagnostic.responses" 
              :key="response.id"
              :class="[
                'border-b',
                isDarkMode ? 'border-gray-700' : 'border-gray-100'
              ]"
            >
              <td :class="[
                'px-4 py-3 text-sm',
                isDarkMode ? 'text-white' : 'text-gray-900'
              ]">
                {{ index + 1 }}
              </td>
              <td :class="[
                'px-4 py-3 text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">
                {{ response.item?.topic?.domain?.name || '-' }}
              </td>
              <td :class="[
                'px-4 py-3 text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">
                {{ response.item?.topic?.name || '-' }}
              </td>
              <td :class="[
                'px-4 py-3 text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">
                {{ response.item?.difficulty?.name || '-' }}
              </td>
              <td :class="[
                'px-4 py-3 text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">
                {{ response.item?.bloom?.name || '-' }}
              </td>
              <td class="px-4 py-3 text-sm">
                <span v-if="response.user_answer === null" :class="[
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                ]">Not answered</span>
                <span 
                  v-else
                  :class="[
                    'font-medium',
                    response.is_correct 
                      ? (isDarkMode ? 'text-green-400' : 'text-green-600')
                      : (isDarkMode ? 'text-red-400' : 'text-red-600')
                  ]"
                >
                  {{ response.is_correct ? 'Correct' : 'Incorrect' }}
                </span>
              </td>
              <td :class="[
                'px-4 py-3 text-sm',
                isDarkMode ? 'text-gray-300' : 'text-gray-600'
              ]">
                {{ response.duration ? formatDuration(response.duration) : '-' }}
              </td>
            </tr>
          </tbody>
        </table>
        <div v-if="diagnostic.responses.length === 0" :class="[
          'text-center py-8',
          isDarkMode ? 'text-gray-500' : 'text-gray-500'
        ]">
          No responses recorded yet
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { Link } from '@inertiajs/vue3'
import { computed, onMounted, onUnmounted } from 'vue'
import AdminLayout from '@/Layouts/AdminLayout.vue'

const props = defineProps({
  diagnostic: {
    type: Object,
    required: true
  },
  report: {
    type: Object,
    required: true
  }
})

// Dark mode state
const isDarkMode = computed(() => {
  return localStorage.getItem('adminDarkMode') === 'true'
})

// Listen for dark mode changes
onMounted(() => {
  // Force reactivity update when storage changes
  const handleStorageChange = (e) => {
    if (e.key === 'adminDarkMode') {
      // Trigger component re-render
      window.dispatchEvent(new Event('adminDarkModeChanged'))
    }
  }
  
  const handleCustomDarkModeChange = () => {
    // Force computed property to re-evaluate
    window.dispatchEvent(new Event('storage'))
  }
  
  window.addEventListener('storage', handleStorageChange)
  window.addEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
  
  // Cleanup
  onUnmounted(() => {
    window.removeEventListener('storage', handleStorageChange)
    window.removeEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
  })
})

function formatStatus(status) {
  const statusMap = {
    'in_progress': 'In Progress',
    'paused': 'Paused',
    'completed': 'Completed'
  }
  return statusMap[status] || status
}

function formatDuration(seconds) {
  if (!seconds) return '-'
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  const secs = seconds % 60
  
  if (hours > 0) {
    return `${hours}h ${minutes}m ${secs}s`
  } else if (minutes > 0) {
    return `${minutes}m ${secs}s`
  } else {
    return `${secs}s`
  }
}

function formatDate(dateString) {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}
</script>
