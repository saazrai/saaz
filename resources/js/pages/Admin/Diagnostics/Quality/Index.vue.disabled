<template>
    <AdminLayout title="Diagnostic Question Quality">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Header -->
            <div class="mb-8">
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
                    Diagnostic Question Quality Dashboard
                </h1>
                <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                    Monitor and manage question quality metrics
                </p>
            </div>

            <!-- Statistics Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <StatCard
                    title="Total Questions"
                    :value="stats.total_items"
                    :trend="null"
                    icon="DocumentTextIcon"
                    color="blue"
                />
                <StatCard
                    title="Need Review"
                    :value="stats.needs_review"
                    :trend="{ value: stats.needs_review, type: 'warning' }"
                    icon="ExclamationTriangleIcon"
                    color="yellow"
                />
                <StatCard
                    title="Low Quality"
                    :value="stats.low_quality"
                    :trend="{ value: stats.low_quality, type: 'danger' }"
                    icon="XCircleIcon"
                    color="red"
                />
                <StatCard
                    title="Avg Quality Score"
                    :value="(stats.average_quality * 100).toFixed(1) + '%'"
                    :trend="null"
                    icon="ChartBarIcon"
                    color="green"
                />
            </div>

            <!-- Calibration Breakdown -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow mb-8 p-6">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    Calibration Status
                </h2>
                <div class="grid grid-cols-3 gap-4">
                    <div v-for="(count, method) in stats.calibration_breakdown" :key="method">
                        <div class="text-sm text-gray-600 dark:text-gray-400 capitalize">
                            {{ method === 'none' ? 'Uncalibrated' : method }}
                        </div>
                        <div class="text-2xl font-bold text-gray-900 dark:text-white">
                            {{ count }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow mb-6 p-4">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <!-- Domain Filter -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Domain
                        </label>
                        <select
                            v-model="filters.domain"
                            @change="applyFilters"
                            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700"
                        >
                            <option value="">All Domains</option>
                            <option v-for="domain in domains" :key="domain.id" :value="domain.id">
                                {{ domain.name }}
                            </option>
                        </select>
                    </div>

                    <!-- Review Status -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Review Status
                        </label>
                        <select
                            v-model="filters.needs_review"
                            @change="applyFilters"
                            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700"
                        >
                            <option value="">All</option>
                            <option value="1">Needs Review</option>
                            <option value="0">Reviewed</option>
                        </select>
                    </div>

                    <!-- Calibration -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Calibration
                        </label>
                        <select
                            v-model="filters.calibration"
                            @change="applyFilters"
                            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700"
                        >
                            <option value="">All</option>
                            <option value="none">Uncalibrated</option>
                            <option value="basic">Basic</option>
                            <option value="irt">IRT</option>
                        </select>
                    </div>

                    <!-- Search -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Search
                        </label>
                        <input
                            v-model="filters.search"
                            @keyup.enter="applyFilters"
                            type="text"
                            placeholder="Search questions..."
                            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700"
                        />
                    </div>
                </div>

                <div class="mt-4 flex justify-between">
                    <button
                        @click="resetFilters"
                        class="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
                    >
                        Reset Filters
                    </button>
                    <button
                        @click="exportReport"
                        class="inline-flex items-center px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    >
                        <ArrowDownTrayIcon class="w-4 h-4 mr-2" />
                        Export Report
                    </button>
                </div>
            </div>

            <!-- Questions Table -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                        <tr>
                            <th class="px-3 py-3 text-left">
                                <input
                                    type="checkbox"
                                    v-model="selectAll"
                                    @change="toggleSelectAll"
                                    class="rounded"
                                />
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Question
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Domain/Topic
                            </th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Quality
                            </th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Metrics
                            </th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Usage
                            </th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Status
                            </th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        <tr v-for="item in items.data" :key="item.id">
                            <td class="px-3 py-4">
                                <input
                                    type="checkbox"
                                    :value="item.id"
                                    v-model="selectedItems"
                                    class="rounded"
                                />
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-900 dark:text-white">
                                    {{ truncate(item.content, 60) }}
                                </div>
                                <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 mr-2">
                                        {{ item.bloom.level }}
                                    </span>
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                                        {{ item.difficulty.name }}
                                    </span>
                                </div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-900 dark:text-white">
                                    {{ item.topic.domain.name }}
                                </div>
                                <div class="text-xs text-gray-500 dark:text-gray-400">
                                    {{ item.topic.name }}
                                </div>
                            </td>
                            <td class="px-6 py-4 text-center">
                                <div class="flex flex-col items-center">
                                    <div :class="getQualityColor(item.quality_score)" class="text-lg font-semibold">
                                        {{ item.quality_score ? (item.quality_score * 100).toFixed(0) + '%' : '-' }}
                                    </div>
                                    <div v-if="item.needs_review" class="mt-1">
                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                                            Review
                                        </span>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-xs space-y-1">
                                    <div>D: {{ item.irt_a || '-' }}</div>
                                    <div>P: {{ item.irt_b || '-' }}</div>
                                    <div>G: {{ item.irt_c || '-' }}</div>
                                </div>
                            </td>
                            <td class="px-6 py-4 text-center">
                                <div class="text-sm text-gray-900 dark:text-white">
                                    {{ item.times_used }}
                                </div>
                                <div v-if="item.last_used_at" class="text-xs text-gray-500 dark:text-gray-400">
                                    {{ formatDate(item.last_used_at) }}
                                </div>
                            </td>
                            <td class="px-6 py-4 text-center">
                                <span :class="getStatusColor(item.status)" class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium">
                                    {{ item.status }}
                                </span>
                            </td>
                            <td class="px-6 py-4 text-right">
                                <Link
                                    :href="route('admin.diagnostics.quality.show', item.id)"
                                    class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                                >
                                    View
                                </Link>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <!-- Pagination -->
                <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700">
                    <Pagination :links="items.links" />
                </div>
            </div>

            <!-- Bulk Actions -->
            <div v-if="selectedItems.length > 0" class="fixed bottom-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4 w-full">
                <div class="max-w-7xl mx-auto flex items-center justify-between">
                    <span class="text-sm text-gray-700 dark:text-gray-300">
                        {{ selectedItems.length }} items selected
                    </span>
                    <div class="flex gap-2">
                        <button
                            @click="bulkAction('publish')"
                            class="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm"
                        >
                            Publish
                        </button>
                        <button
                            @click="bulkAction('archive')"
                            class="px-3 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 text-sm"
                        >
                            Archive
                        </button>
                        <button
                            @click="bulkAction('flag_review')"
                            class="px-3 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 text-sm"
                        >
                            Flag for Review
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </AdminLayout>
</template>

<script setup>
import { ref, reactive } from 'vue';
import { router, Link } from '@inertiajs/vue3';
import AdminLayout from '@/Layouts/AdminLayout.vue';
import StatCard from '@/Components/Admin/StatCard.vue';
import Pagination from '@/Components/Pagination.vue';
import { ArrowDownTrayIcon } from '@heroicons/vue/24/outline';

const props = defineProps({
    stats: Object,
    items: Object,
    domains: Array,
    filters: Object,
});

const filters = reactive({
    domain: props.filters.domain || '',
    needs_review: props.filters.needs_review || '',
    calibration: props.filters.calibration || '',
    search: props.filters.search || '',
});

const selectedItems = ref([]);
const selectAll = ref(false);

const truncate = (text, length) => {
    if (text.length <= length) return text;
    return text.substring(0, length) + '...';
};

const formatDate = (date) => {
    return new Date(date).toLocaleDateString();
};

const getQualityColor = (score) => {
    if (!score) return 'text-gray-400';
    if (score >= 0.7) return 'text-green-600 dark:text-green-400';
    if (score >= 0.4) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
};

const getStatusColor = (status) => {
    const colors = {
        published: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
        draft: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200',
        archived: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
    };
    return colors[status] || colors.draft;
};

const applyFilters = () => {
    router.get(route('admin.diagnostics.quality.index'), filters, {
        preserveState: true,
        preserveScroll: true,
    });
};

const resetFilters = () => {
    Object.keys(filters).forEach(key => filters[key] = '');
    applyFilters();
};

const toggleSelectAll = () => {
    if (selectAll.value) {
        selectedItems.value = props.items.data.map(item => item.id);
    } else {
        selectedItems.value = [];
    }
};

const bulkAction = (action) => {
    if (!confirm(`Are you sure you want to ${action.replace('_', ' ')} ${selectedItems.value.length} items?`)) {
        return;
    }
    
    router.post(route('admin.diagnostics.quality.bulk-update'), {
        item_ids: selectedItems.value,
        action: action,
    }, {
        onSuccess: () => {
            selectedItems.value = [];
            selectAll.value = false;
        },
    });
};

const exportReport = () => {
    window.location.href = route('admin.diagnostics.quality.export', { format: 'csv' });
};
</script>