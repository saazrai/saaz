<template>
  <AdminLayout pageTitle="View Diagnostic Item">
    <div class="space-y-6">
      <!-- Back Navigation -->
      <div class="mb-6">
        <Link 
          :href="route('admin.diagnostics.items.index')" 
          class="inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium transition-colors"
        >
          <ChevronLeft class="w-4 h-4 mr-1" />
          Back to Diagnostic Items
        </Link>
      </div>

      <!-- Header -->
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-semibold text-gray-900 dark:text-gray-100">Diagnostic Item #{{ item.id }}</h1>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">View diagnostic item details</p>
        </div>
        <div class="flex gap-2">
          <Button variant="outline" @click="navigateTo(`/admin/diagnostics/items/${item.id}/edit`)">
            <Edit class="mr-2 h-4 w-4" />
            Edit Item
          </Button>
          <Button 
            variant="outline" 
            :disabled="refreshing" 
            @click="refreshQuestion"
          >
            <Loader2 v-if="refreshing" class="w-4 h-4 mr-2 animate-spin" />
            <RefreshCw v-else class="w-4 h-4 mr-2" />
            Refresh with AI
          </Button>
          <Button variant="destructive" @click="deleteItem">
            <Trash2 class="mr-2 h-4 w-4" />
            Delete Item
          </Button>
        </div>
      </div>

      <!-- Item Details -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-6">
          <!-- Question Content -->
          <Card>
            <CardHeader>
              <CardTitle>Question Content</CardTitle>
            </CardHeader>
            <CardContent>
              <div class="prose dark:prose-invert max-w-none" v-html="item.content"></div>
            </CardContent>
          </Card>

          <!-- Options -->
          <Card>
            <CardHeader>
              <CardTitle>Answer Options</CardTitle>
            </CardHeader>
            <CardContent>
              <div class="space-y-3">
                <div 
                  v-for="(option, index) in item.options" 
                  :key="index"
                  :class="[
                    'p-3 rounded-md border transition-colors',
                    isCorrectOption(option) 
                      ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' 
                      : 'bg-gray-50 border-gray-200 dark:bg-gray-800 dark:border-gray-700'
                  ]"
                >
                  <div class="flex items-center justify-between">
                    <div class="flex items-start gap-3 flex-1">
                      <div :class="[
                        'flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center text-sm font-medium transition-colors',
                        isCorrectOption(option) 
                          ? 'bg-green-500 text-white dark:bg-green-600' 
                          : 'bg-gray-300 text-gray-700 dark:bg-gray-600 dark:text-gray-200'
                      ]">
                        {{ String.fromCharCode(65 + index) }}
                      </div>
                      <div class="flex-1">
                        <div class="text-gray-900 dark:text-gray-100" v-html="option"></div>
                      </div>
                    </div>
                    <div v-if="isCorrectOption(option)" class="flex-shrink-0 ml-3">
                      <div class="w-6 h-6 bg-green-500 dark:bg-green-600 rounded-full flex items-center justify-center">
                        <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <!-- Justifications -->
          <Card v-if="item.justifications && item.justifications.length > 0">
            <CardHeader>
              <CardTitle>Justifications</CardTitle>
            </CardHeader>
            <CardContent>
              <div class="space-y-3">
                <div 
                  v-for="(justification, index) in item.justifications" 
                  :key="index"
                  class="p-3 bg-blue-50 border border-blue-200 rounded-md dark:bg-blue-900/20 dark:border-blue-800 transition-colors"
                >
                  <div class="text-gray-900 dark:text-gray-100" v-html="justification"></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
          <!-- Basic Info -->
          <Card>
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
            </CardHeader>
            <CardContent class="space-y-3">
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Type</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.type?.name || 'N/A' }}</p>
              </div>
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Dimension</label>
                <Badge :variant="item.dimension === 'Technical' ? 'default' : 'secondary'">
                  {{ item.dimension }}
                </Badge>
              </div>
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Status</label>
                <Badge :variant="getStatusVariant(item.status)">
                  {{ item.status }}
                </Badge>
              </div>
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Difficulty Level</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.difficulty?.name || 'N/A' }}</p>
              </div>
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Bloom's Level</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.bloom?.level || item.bloom?.name || 'N/A' }}</p>
              </div>
            </CardContent>
          </Card>

          <!-- Topic & Domain -->
          <Card>
            <CardHeader>
              <CardTitle>Classification</CardTitle>
            </CardHeader>
            <CardContent class="space-y-3">
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Domain</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.topic?.domain?.name || 'N/A' }}</p>
              </div>
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Topic</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.topic?.name || 'N/A' }}</p>
              </div>
            </CardContent>
          </Card>

          <!-- IRT Parameters -->
          <Card v-if="item.irt_a || item.irt_b || item.irt_c">
            <CardHeader>
              <CardTitle>IRT Parameters</CardTitle>
            </CardHeader>
            <CardContent class="space-y-3">
              <div v-if="item.irt_a" class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">IRT A (Discrimination)</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.irt_a }}</p>
              </div>
              <div v-if="item.irt_b" class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">IRT B (Difficulty)</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.irt_b }}</p>
              </div>
              <div v-if="item.irt_c" class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">IRT C (Guessing)</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ item.irt_c }}</p>
              </div>
            </CardContent>
          </Card>

          <!-- Timestamps -->
          <Card>
            <CardHeader>
              <CardTitle>Timestamps</CardTitle>
            </CardHeader>
            <CardContent class="space-y-3">
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Created</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ formatDate(item.created_at) }}</p>
              </div>
              <div class="flex items-center justify-between">
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Updated</label>
                <p class="text-sm text-gray-900 dark:text-gray-100 font-medium">{{ formatDate(item.updated_at) }}</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref } from 'vue'
import { router, Link } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { Card, CardContent, CardHeader, CardTitle } from '@/Components/shadcn/ui/card'
import { Button } from '@/Components/shadcn/ui/button'
import { Badge } from '@/Components/shadcn/ui/badge'
import { ChevronLeft, Edit, Trash2, Loader2, RefreshCw } from 'lucide-vue-next'
import { showError, showSuccess, showConfirm, showLoading } from '@/Utils/dialog-service'

const props = defineProps({
  item: Object,
})

const refreshing = ref(false)

const isCorrectOption = (option) => {
  return props.item.correct_options?.includes(option)
}

const getStatusVariant = (status) => {
  const variants = {
    'published': 'default',
    'draft': 'secondary',
    'retired': 'destructive',
  }
  return variants[status] || 'outline'
}

const formatDate = (dateString) => {
  if (!dateString) return 'N/A'
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

const refreshQuestion = async () => {
  try {
    const result = await showConfirm(
      'Refresh Question with AI?',
      'This will generate a new question based on the current topic, difficulty, and Bloom\'s level. The original question will be replaced and saved as draft status.',
      'Yes, refresh it!',
      'Cancel'
    )

    if (result.isConfirmed) {
      refreshing.value = true
      
      router.post(route('admin.diagnostics.items.refresh', props.item.id), {}, {
        onSuccess: (page) => {
          refreshing.value = false
          showSuccess(
            'Success!',
            'Question has been refreshed with AI and saved as draft.'
          )
          // Reload the page to show updated content
          router.reload()
        },
        onError: (errors) => {
          refreshing.value = false
          showError(
            'Error!',
            'Failed to refresh question. Please try again.'
          )
        }
      })
    }
  } catch (error) {
    refreshing.value = false
    console.error('Refresh error:', error)
  }
}

const navigateTo = (url) => {
  router.visit(url)
}

const deleteItem = () => {
  if (confirm('Are you sure you want to delete this diagnostic item?')) {
    router.delete(`/admin/diagnostics/items/${props.item.id}`)
  }
}
</script> 