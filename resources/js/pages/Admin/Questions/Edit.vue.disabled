<template>
  <AdminLayout pageTitle="Edit Question">
    <div class="container mx-auto px-4 py-8">
      <!-- Inline Flash Messages -->
      <InlineFlashMessage />

      <!-- Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 :class="[
            'text-3xl font-bold',
            isDarkMode ? 'text-white' : 'text-gray-900'
          ]">Edit Question</h1>
          <p :class="[
            isDarkMode ? 'text-gray-300' : 'text-gray-600'
          ]">Question ID: #{{ question.id }}</p>
        </div>
        <div class="flex gap-4 mt-4 md:mt-0">
          <Button @click="navigateTo('/admin/content/questions')" variant="outline">
            <ArrowLeft class="mr-2 h-4 w-4" />
            Back to Questions
          </Button>
          <Button @click="navigateTo(`/admin/content/questions/${question.id}`)" variant="outline">
            <Eye class="mr-2 h-4 w-4" />
            View Question
          </Button>
        </div>
      </div>

      <!-- Form -->
      <Card :class="[
        isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
      ]">
        <CardHeader>
          <CardTitle :class="[
            isDarkMode ? 'text-white' : 'text-gray-900'
          ]">Question Details</CardTitle>
          <CardDescription :class="[
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          ]">Update the question information and settings</CardDescription>
        </CardHeader>
        <CardContent>
          <form @submit.prevent="submit" class="space-y-6">
            <!-- Question Content -->
            <div>
              <label :class="[
                'block text-sm font-medium mb-2',
                isDarkMode ? 'text-gray-200' : 'text-gray-700'
              ]">Question Content *</label>
              <textarea
                v-model="form.content"
                rows="4"
                :class="[
                  'w-full rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm',
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                    : 'bg-white border-gray-300 text-gray-900'
                ]"
                placeholder="Enter the question content"
                required
              ></textarea>
              <div v-if="form.errors.content" class="mt-2 text-sm text-red-600">{{ form.errors.content }}</div>
            </div>

            <!-- Question Type, Difficulty, and Bloom's Level -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label :class="[
                  'block text-sm font-medium mb-2',
                  isDarkMode ? 'text-gray-200' : 'text-gray-700'
                ]">Question Type *</label>
                <Select v-model="form.type_id" required>
                  <SelectTrigger :class="[
                    isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'
                  ]">
                    <SelectValue placeholder="Select question type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem v-for="type in questionTypes" :key="type.id" :value="type.id.toString()">
                      {{ type.name }}
                    </SelectItem>
                  </SelectContent>
                </Select>
                <div v-if="form.errors.type_id" class="mt-2 text-sm text-red-600">{{ form.errors.type_id }}</div>
              </div>

              <div>
                <label :class="[
                  'block text-sm font-medium mb-2',
                  isDarkMode ? 'text-gray-200' : 'text-gray-700'
                ]">Difficulty Level *</label>
                <Select v-model="form.difficulty_id" required>
                  <SelectTrigger :class="[
                    isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'
                  ]">
                    <SelectValue placeholder="Select difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem v-for="difficulty in difficultyLevels" :key="difficulty.id" :value="difficulty.id.toString()">
                      {{ difficulty.name }}
                    </SelectItem>
                  </SelectContent>
                </Select>
                <div v-if="form.errors.difficulty_id" class="mt-2 text-sm text-red-600">{{ form.errors.difficulty_id }}</div>
              </div>

              <div>
                <label :class="[
                  'block text-sm font-medium mb-2',
                  isDarkMode ? 'text-gray-200' : 'text-gray-700'
                ]">Bloom's Level *</label>
                <Select v-model="form.bloom_id" required>
                  <SelectTrigger :class="[
                    isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'
                  ]">
                    <SelectValue placeholder="Select Bloom's level" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem v-for="bloom in blooms" :key="bloom.id" :value="bloom.id.toString()">
                      {{ bloom.level }}
                    </SelectItem>
                  </SelectContent>
                </Select>
                <div v-if="form.errors.bloom_id" class="mt-2 text-sm text-red-600">{{ form.errors.bloom_id }}</div>
              </div>
            </div>

            <!-- Answer Options -->
            <div>
              <label :class="[
                'block text-sm font-medium mb-2',
                isDarkMode ? 'text-gray-200' : 'text-gray-700'
              ]">Answer Options *</label>
              <div class="space-y-3">
                <div v-for="(option, index) in form.options" :key="index" class="flex items-center gap-3">
                  <div :class="[
                    'w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold',
                    isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                  ]">
                    {{ String.fromCharCode(65 + index) }}
                  </div>
                  <div class="flex-1">
                    <textarea
                      v-model="form.options[index]"
                      rows="2"
                      :class="[
                        'w-full rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm',
                        isDarkMode 
                          ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                          : 'bg-white border-gray-300 text-gray-900'
                      ]"
                      :placeholder="`Option ${String.fromCharCode(65 + index)}`"
                      required
                    ></textarea>
                  </div>
                  <div class="flex items-center gap-2">
                    <label class="flex items-center">
                      <input
                        v-model="form.correct_options"
                        :value="index"
                        type="checkbox"
                        :class="[
                          'h-4 w-4 text-green-600 focus:ring-green-500 rounded',
                          isDarkMode ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'
                        ]"
                      />
                      <span :class="[
                        'ml-2 text-sm',
                        isDarkMode ? 'text-gray-300' : 'text-gray-700'
                      ]">Correct</span>
                    </label>
                    <Button 
                      v-if="form.options.length > 2"
                      @click="removeOption(index)" 
                      variant="outline" 
                      size="sm"
                      type="button"
                      :class="[
                        'text-red-600 hover:text-red-700',
                        isDarkMode ? 'border-red-600 hover:bg-red-900/10' : 'border-red-300 hover:bg-red-50'
                      ]"
                    >
                      <Trash2 class="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
              <div class="mt-3">
                <Button 
                  @click="addOption" 
                  variant="outline" 
                  size="sm"
                  type="button"
                  :class="[
                    isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                  ]"
                >
                  <Plus class="mr-2 h-4 w-4" />
                  Add Option
                </Button>
              </div>
              <div v-if="form.errors.options" class="mt-2 text-sm text-red-600">{{ form.errors.options }}</div>
              <div v-if="form.errors.correct_options" class="mt-2 text-sm text-red-600">{{ form.errors.correct_options }}</div>
            </div>

            <!-- Justifications -->
            <div>
              <label :class="[
                'block text-sm font-medium mb-2',
                isDarkMode ? 'text-gray-200' : 'text-gray-700'
              ]">Justifications (Optional)</label>
              <p :class="[
                'text-sm mb-3',
                isDarkMode ? 'text-gray-400' : 'text-gray-600'
              ]">Provide explanations for each answer option</p>
              <div class="space-y-3">
                <div v-for="(justification, index) in form.justifications" :key="index" class="flex items-start gap-3">
                  <div :class="[
                    'w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-1',
                    isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                  ]">
                    {{ String.fromCharCode(65 + index) }}
                  </div>
                  <textarea
                    v-model="form.justifications[index]"
                    rows="2"
                    :class="[
                      'flex-1 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm',
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                        : 'bg-white border-gray-300 text-gray-900'
                    ]"
                    :placeholder="`Justification for option ${String.fromCharCode(65 + index)}`"
                  ></textarea>
                </div>
              </div>
              <div v-if="form.errors.justifications" class="mt-2 text-sm text-red-600">{{ form.errors.justifications }}</div>
            </div>

            <!-- Topics -->
            <div>
              <label :class="[
                'block text-sm font-medium mb-2',
                isDarkMode ? 'text-gray-200' : 'text-gray-700'
              ]">Topics *</label>
              <div :class="[
                'border rounded-md p-3 max-h-40 overflow-y-auto',
                isDarkMode ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'
              ]">
                <div v-for="topic in topics" :key="topic.id" class="flex items-center mb-2 last:mb-0">
                  <input
                    v-model="form.topic_ids"
                    :value="topic.id"
                    type="checkbox"
                    :id="`topic-${topic.id}`"
                    :class="[
                      'h-4 w-4 text-blue-600 focus:ring-blue-500 rounded',
                      isDarkMode ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'
                    ]"
                  />
                  <label 
                    :for="`topic-${topic.id}`" 
                    :class="[
                      'ml-2 text-sm',
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    ]"
                  >
                    {{ topic.name }}
                  </label>
                </div>
              </div>
              <div v-if="form.errors.topic_ids" class="mt-2 text-sm text-red-600">{{ form.errors.topic_ids }}</div>
            </div>

            <!-- Additional Fields -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label :class="[
                  'block text-sm font-medium mb-2',
                  isDarkMode ? 'text-gray-200' : 'text-gray-700'
                ]">Explanation (Optional)</label>
                <textarea
                  v-model="form.explanation"
                  rows="3"
                  :class="[
                    'w-full rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm',
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900'
                  ]"
                  placeholder="Detailed explanation of the correct answer"
                ></textarea>
                <div v-if="form.errors.explanation" class="mt-2 text-sm text-red-600">{{ form.errors.explanation }}</div>
              </div>

              <div>
                <label :class="[
                  'block text-sm font-medium mb-2',
                  isDarkMode ? 'text-gray-200' : 'text-gray-700'
                ]">Hints (Optional)</label>
                <textarea
                  v-model="form.hints"
                  rows="3"
                  :class="[
                    'w-full rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm',
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900'
                  ]"
                  placeholder="Helpful hints for answering the question"
                ></textarea>
                <div v-if="form.errors.hints" class="mt-2 text-sm text-red-600">{{ form.errors.hints }}</div>
              </div>
            </div>

            <!-- Submit Buttons -->
            <div class="flex justify-end gap-4 pt-6 border-t" :class="[
              isDarkMode ? 'border-gray-700' : 'border-gray-200'
            ]">
              <Button 
                @click="navigateTo('/admin/content/questions')" 
                variant="outline"
                type="button"
              >
                Cancel
              </Button>
              <Button 
                type="submit" 
                :disabled="form.processing"
                :class="[
                  'bg-blue-600 hover:bg-blue-700 text-white',
                  form.processing && 'opacity-50 cursor-not-allowed'
                ]"
              >
                <Loader2 v-if="form.processing" class="mr-2 h-4 w-4 animate-spin" />
                {{ form.processing ? 'Updating...' : 'Update Question' }}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  </AdminLayout>
</template>

<script setup>
import { computed, ref, watch } from 'vue'
import { router, useForm } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import InlineFlashMessage from '@/Components/InlineFlashMessage.vue'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/Components/shadcn/ui/card'
import { Button } from '@/Components/shadcn/ui/button'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/shadcn/ui/select'
import { ArrowLeft, Eye, Plus, Trash2, Loader2 } from 'lucide-vue-next'

const props = defineProps({
  question: Object,
  topics: Array,
  questionTypes: Array,
  difficultyLevels: Array,
  blooms: Array,
  selectedTopics: Array,
})

// Dark mode detection
const isDarkMode = computed(() => {
  return localStorage.getItem('adminDarkMode') === 'true' || 
         (localStorage.getItem('adminDarkMode') === null && true)
})

// Initialize correct options - convert content back to indices if needed
const initializeCorrectOptions = () => {
  if (!props.question.correct_options || props.question.correct_options.length === 0) {
    return []
  }
  
  // If correct_options contains actual option content, find the indices
  if (typeof props.question.correct_options[0] === 'string' && props.question.options) {
    return props.question.correct_options.map(correctOption => {
      const index = props.question.options.findIndex(option => option === correctOption)
      return index >= 0 ? index : null
    }).filter(index => index !== null)
  }
  
  // If already indices, return as-is
  return props.question.correct_options
}

// Initialize form with question data
const form = useForm({
  content: props.question.content || '',
  type_id: props.question.type_id?.toString() || '',
  difficulty_id: props.question.difficulty_id?.toString() || '',
  bloom_id: props.question.bloom_id?.toString() || '',
  options: props.question.options || ['', '', '', ''],
  correct_options: initializeCorrectOptions(),
  justifications: props.question.justifications || ['', '', '', ''],
  explanation: props.question.explanation || '',
  hints: props.question.hints || '',
  topic_ids: props.selectedTopics || [],
})

// Ensure justifications array matches options array length
watch(() => form.options.length, (newLength) => {
  if (form.justifications.length < newLength) {
    // Add empty justifications for new options
    while (form.justifications.length < newLength) {
      form.justifications.push('')
    }
  } else if (form.justifications.length > newLength) {
    // Remove extra justifications
    form.justifications = form.justifications.slice(0, newLength)
  }
})

const navigateTo = (url) => {
  router.visit(url)
}

const addOption = () => {
  if (form.options.length < 6) { // Limit to 6 options
    form.options.push('')
    form.justifications.push('')
  }
}

const removeOption = (index) => {
  if (form.options.length > 2) { // Minimum 2 options
    form.options.splice(index, 1)
    form.justifications.splice(index, 1)
    
    // Update correct_options indices
    form.correct_options = form.correct_options
      .map(optionIndex => {
        if (optionIndex > index) return optionIndex - 1
        if (optionIndex === index) return null
        return optionIndex
      })
      .filter(optionIndex => optionIndex !== null)
  }
}

const submit = () => {
  // Filter out empty justifications
  const processedData = {
    ...form.data(),
    justifications: form.justifications.filter(j => j && j.trim() !== ''),
    options: form.options.filter(o => o && o.trim() !== ''),
  }
  
  form.patch(route('admin.content.questions.update', props.question.id), {
    data: processedData,
    onSuccess: () => {
      // Success handled by redirect in controller
    },
  })
}
</script>