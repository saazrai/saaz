<template>
    <AdminLayout title="Coupons Management">
        <div class="p-6">
            <!-- Header -->
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h1 :class="[isDarkMode ? 'text-white' : 'text-gray-900']" class="text-3xl font-bold">Coupons</h1>
                    <p :class="[isDarkMode ? 'text-gray-400' : 'text-gray-600']" class="mt-1">Manage discount coupons and promotional codes</p>
                </div>
                <button @click="showCreateModal = true"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2">
                    <PlusIcon class="h-5 w-5" />
                    <span>Create Coupon</span>
                </button>
            </div>

            <!-- Search and Filters -->
            <div :class="[isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white']" class="rounded-lg shadow-sm p-4 mb-6">
                <div class="flex flex-col sm:flex-row gap-4">
                    <div class="flex-1">
                        <input v-model="searchTerm" type="text" placeholder="Search coupons by code or description..."
                            :class="[
                                isDarkMode 
                                    ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-blue-400 focus:border-blue-400' 
                                    : 'border-gray-300 focus:ring-blue-500'
                            ]" 
                            class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2" />
                    </div>
                    <div class="flex gap-2">
                        <select v-model="statusFilter"
                            :class="[
                                isDarkMode 
                                    ? 'bg-gray-700 border-gray-600 text-white focus:ring-blue-400 focus:border-blue-400' 
                                    : 'border-gray-300 focus:ring-blue-500'
                            ]"
                            class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="expired">Expired</option>
                            <option value="used_up">Used Up</option>
                        </select>
                        <select v-model="typeFilter"
                            :class="[
                                isDarkMode 
                                    ? 'bg-gray-700 border-gray-600 text-white focus:ring-blue-400 focus:border-blue-400' 
                                    : 'border-gray-300 focus:ring-blue-500'
                            ]"
                            class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2">
                            <option value="">All Types</option>
                            <option value="percentage">Percentage</option>
                            <option value="fixed_amount">Fixed Amount</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Coupons Table -->
            <div :class="['rounded-lg shadow-sm overflow-hidden', isDarkMode ? 'bg-gray-800' : 'bg-white']">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead :class="[isDarkMode ? 'bg-gray-700' : 'bg-gray-50']">
                        <tr>
                            <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Code
                            </th>
                            <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Type & Value
                            </th>
                            <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Usage
                            </th>
                            <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Valid Period
                            </th>
                            <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Min. Amount
                            </th>
                            <th :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Status
                            </th>
                            <th :class="['px-6 py-3 text-right text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody :class="['divide-y', isDarkMode ? 'bg-gray-800 divide-gray-700' : 'bg-white divide-gray-200']">
                        <tr v-for="coupon in filteredCoupons" :key="coupon.id" :class="[isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50']">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex flex-col">
                                    <div
                                        :class="['text-sm font-medium font-mono px-2 py-1 rounded', isDarkMode ? 'text-white bg-gray-700' : 'text-gray-900 bg-gray-100']">
                                        {{ coupon.code }}
                                    </div>
                                    <div :class="['text-xs mt-1', isDarkMode ? 'text-gray-400' : 'text-gray-500']">{{ coupon.description }}</div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex flex-col">
                                    <span :class="[
                                        'inline-flex px-2 py-1 text-xs font-semibold rounded-full w-fit',
                                        coupon.type === 'percentage'
                                            ? 'bg-green-100 text-green-800'
                                            : 'bg-blue-100 text-blue-800'
                                    ]">
                                        {{ coupon.type === 'percentage' ? `${coupon.value}%` : `$${coupon.value}` }}
                                    </span>
                                    <div :class="['text-xs mt-1', isDarkMode ? 'text-gray-400' : 'text-gray-500']">
                                        {{ coupon.type === 'percentage' ? 'Percentage' : 'Fixed Amount' }}
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div :class="['text-sm', isDarkMode ? 'text-white' : 'text-gray-900']">
                                    {{ coupon.used_count || 0 }}
                                    <span :class="[isDarkMode ? 'text-gray-400' : 'text-gray-500']">
                                        / {{ coupon.usage_limit || 'âˆž' }}
                                    </span>
                                </div>
                                <div :class="['text-xs', isDarkMode ? 'text-gray-400' : 'text-gray-500']">times used</div>
                            </td>
                            <td :class="['px-6 py-4 whitespace-nowrap text-sm', isDarkMode ? 'text-white' : 'text-gray-900']">
                                <div class="flex flex-col">
                                    <div>{{ formatDate(coupon.valid_from) }}</div>
                                    <div :class="[isDarkMode ? 'text-gray-400' : 'text-gray-500']">to {{ formatDate(coupon.valid_until) }}</div>
                                </div>
                            </td>
                            <td :class="['px-6 py-4 whitespace-nowrap text-sm', isDarkMode ? 'text-white' : 'text-gray-900']">
                                {{ coupon.minimum_amount ? `$${coupon.minimum_amount}` : 'No minimum' }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span :class="[
                                    'inline-flex px-2 py-1 text-xs font-semibold rounded-full',
                                    getCouponStatusClass(coupon)
                                ]">
                                    {{ getCouponStatus(coupon) }}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <div class="flex justify-end space-x-2">
                                    <button @click="viewCouponDetails(coupon)" :class="[isDarkMode ? 'text-gray-400 hover:text-white' : 'text-gray-600 hover:text-gray-900']"
                                        title="View Details">
                                        <EyeIcon class="h-4 w-4" />
                                    </button>
                                    <button @click="editCoupon(coupon)" :class="[isDarkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-900']"
                                        title="Edit">
                                        <PencilIcon class="h-4 w-4" />
                                    </button>
                                    <button @click="toggleCouponStatus(coupon)"
                                        :class="coupon.is_active ? (isDarkMode ? 'text-red-400 hover:text-red-300' : 'text-red-600 hover:text-red-900') : (isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-green-600 hover:text-green-900')"
                                        :title="coupon.is_active ? 'Deactivate' : 'Activate'">
                                        <component :is="coupon.is_active ? XMarkIcon : CheckIcon" class="h-4 w-4" />
                                    </button>
                                    <button @click="deleteCoupon(coupon)" :class="[isDarkMode ? 'text-red-400 hover:text-red-300' : 'text-red-600 hover:text-red-900']"
                                        title="Delete">
                                        <TrashIcon class="h-4 w-4" />
                                    </button>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <!-- Empty State -->
                <div v-if="filteredCoupons.length === 0" class="text-center py-12">
                    <div :class="[isDarkMode ? 'text-gray-400' : 'text-gray-500']">No coupons found</div>
                </div>

                <!-- Pagination -->
                <div v-if="pagination.total > pagination.per_page"
                    :class="['px-4 py-3 border-t sm:px-6', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200']">
                    <div class="flex-1 flex justify-between sm:hidden">
                        <button @click="previousPage" :disabled="pagination.current_page === 1"
                            :class="['relative inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md disabled:opacity-50', isDarkMode ? 'border-gray-600 text-gray-300 bg-gray-700 hover:bg-gray-600' : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50']">
                            Previous
                        </button>
                        <button @click="nextPage" :disabled="pagination.current_page === pagination.last_page"
                            :class="['ml-3 relative inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md disabled:opacity-50', isDarkMode ? 'border-gray-600 text-gray-300 bg-gray-700 hover:bg-gray-600' : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50']">
                            Next
                        </button>
                    </div>
                    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                        <div>
                            <p :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-700']">
                                Showing <span class="font-medium">{{ pagination.from }}</span> to <span
                                    class="font-medium">{{ pagination.to }}</span> of <span class="font-medium">{{
                                    pagination.total }}</span> results
                            </p>
                        </div>
                        <div>
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                                aria-label="Pagination">
                                <button @click="previousPage" :disabled="pagination.current_page === 1"
                                    :class="['relative inline-flex items-center px-2 py-2 rounded-l-md border text-sm font-medium disabled:opacity-50', isDarkMode ? 'border-gray-600 bg-gray-700 text-gray-400 hover:bg-gray-600' : 'border-gray-300 bg-white text-gray-500 hover:bg-gray-50']">
                                    Previous
                                </button>
                                <button @click="nextPage" :disabled="pagination.current_page === pagination.last_page"
                                    :class="['relative inline-flex items-center px-2 py-2 rounded-r-md border text-sm font-medium disabled:opacity-50', isDarkMode ? 'border-gray-600 bg-gray-700 text-gray-400 hover:bg-gray-600' : 'border-gray-300 bg-white text-gray-500 hover:bg-gray-50']">
                                    Next
                                </button>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create/Edit Modal -->
        <div v-if="showCreateModal || showEditModal"
            class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div :class="['relative top-10 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white']">
                <div class="mt-3">
                    <h3 :class="['text-lg font-medium mb-4', isDarkMode ? 'text-white' : 'text-gray-900']">
                        {{ showCreateModal ? 'Create Coupon' : 'Edit Coupon' }}
                    </h3>

                    <form @submit.prevent="saveCoupon">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="md:col-span-2">
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Coupon Code *</label>
                                <input v-model="form.code" type="text" required
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono', isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'border-gray-300']"
                                    placeholder="Enter coupon code (e.g., SAVE20)" style="text-transform: uppercase"
                                    @input="form.code = $event.target.value.toUpperCase()" />
                            </div>

                            <div class="md:col-span-2">
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Description</label>
                                <input v-model="form.description" type="text"
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'border-gray-300']"
                                    placeholder="Brief description of the coupon" />
                            </div>

                            <div>
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Discount Type *</label>
                                <select v-model="form.type" required
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300']">
                                    <option value="">Select type</option>
                                    <option value="percentage">Percentage</option>
                                    <option value="fixed_amount">Fixed Amount</option>
                                </select>
                            </div>

                            <div>
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">
                                    {{ form.type === 'percentage' ? 'Percentage (%)' : 'Amount ($)' }} *
                                </label>
                                <input v-model="form.value" type="number" step="0.01" min="0"
                                    :max="form.type === 'percentage' ? 100 : undefined" required
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'border-gray-300']"
                                    :placeholder="form.type === 'percentage' ? 'Enter percentage (0-100)' : 'Enter amount'" />
                            </div>

                            <div>
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Valid From *</label>
                                <input v-model="form.valid_from" type="datetime-local" required
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300']" />
                            </div>

                            <div>
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Valid Until *</label>
                                <input v-model="form.valid_until" type="datetime-local" required
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300']" />
                            </div>

                            <div>
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Usage Limit</label>
                                <input v-model="form.usage_limit" type="number" min="1"
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'border-gray-300']"
                                    placeholder="Leave empty for unlimited" />
                            </div>

                            <div>
                                <label :class="['block text-sm font-medium mb-2', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Minimum Amount ($)</label>
                                <input v-model="form.minimum_amount" type="number" step="0.01" min="0"
                                    :class="['w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500', isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' : 'border-gray-300']"
                                    placeholder="Minimum order amount" />
                            </div>

                            <div class="md:col-span-2">
                                <label class="flex items-center">
                                    <input v-model="form.is_active" type="checkbox"
                                        class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" />
                                    <span :class="['ml-2 text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Active</span>
                                </label>
                            </div>
                        </div>

                        <div class="flex justify-end space-x-3 mt-6">
                            <button type="button" @click="cancelEdit"
                                :class="['px-4 py-2 border rounded-md text-sm font-medium', isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50']">
                                Cancel
                            </button>
                            <button type="submit" :disabled="processing"
                                class="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 disabled:opacity-50">
                                {{ processing ? 'Saving...' : (showCreateModal ? 'Create' : 'Update') }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Details Modal -->
        <div v-if="showDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div :class="['relative top-20 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md', isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white']">
                <div class="mt-3">
                    <h3 :class="['text-lg font-medium mb-4', isDarkMode ? 'text-white' : 'text-gray-900']">Coupon Details</h3>

                    <div v-if="selectedCoupon" class="space-y-4">
                        <div>
                            <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Code</label>
                            <div :class="['text-lg font-mono px-3 py-2 rounded', isDarkMode ? 'bg-gray-700 text-white' : 'bg-gray-100 text-gray-900']">{{ selectedCoupon.code }}</div>
                        </div>

                        <div>
                            <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Description</label>
                            <div :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-900']">{{ selectedCoupon.description || 'No description' }}
                            </div>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Type</label>
                                <div :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-900']">{{ selectedCoupon.type === 'percentage' ?
                                    'Percentage' : 'Fixed Amount' }}</div>
                            </div>
                            <div>
                                <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Value</label>
                                <div :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-900']">
                                    {{ selectedCoupon.type === 'percentage' ? `${selectedCoupon.value}%` :
                                    `$${selectedCoupon.value}` }}
                                </div>
                            </div>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Usage</label>
                                <div :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-900']">{{ selectedCoupon.used_count || 0 }} / {{
                                    selectedCoupon.usage_limit || 'âˆž' }}</div>
                            </div>
                            <div>
                                <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Min. Amount</label>
                                <div :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-900']">{{ selectedCoupon.minimum_amount ?
                                    `$${selectedCoupon.minimum_amount}` : 'No minimum' }}</div>
                            </div>
                        </div>

                        <div>
                            <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Valid Period</label>
                            <div :class="['text-sm', isDarkMode ? 'text-gray-300' : 'text-gray-900']">
                                {{ formatDate(selectedCoupon.valid_from) }} - {{ formatDate(selectedCoupon.valid_until)
                                }}
                            </div>
                        </div>

                        <div>
                            <label :class="['block text-sm font-medium', isDarkMode ? 'text-gray-300' : 'text-gray-700']">Status</label>
                            <span :class="[
                                'inline-flex px-2 py-1 text-xs font-semibold rounded-full',
                                getCouponStatusClass(selectedCoupon)
                            ]">
                                {{ getCouponStatus(selectedCoupon) }}
                            </span>
                        </div>
                    </div>

                    <div class="flex justify-end mt-6">
                        <button @click="showDetailsModal = false"
                            class="px-4 py-2 bg-gray-600 text-white rounded-md text-sm font-medium hover:bg-gray-700">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </AdminLayout>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { router } from '@inertiajs/vue3'
import AdminLayout from '@/Layouts/AdminLayout.vue'
import { PlusIcon, PencilIcon, TrashIcon, EyeIcon, CheckIcon, XMarkIcon } from '@heroicons/vue/24/outline'

// Dark mode state management
const isDarkMode = ref(false)

// Initialize dark mode from localStorage
const initializeDarkMode = () => {
  const saved = localStorage.getItem('adminDarkMode')
  if (saved !== null) {
    isDarkMode.value = JSON.parse(saved)
  }
}

// Listen for dark mode changes
const handleDarkModeChange = (event) => {
  if (event.key === 'adminDarkMode') {
    isDarkMode.value = JSON.parse(event.newValue || 'false')
  }
}

const handleCustomDarkModeChange = (event) => {
  isDarkMode.value = event.detail.isDarkMode
}

// Reactive data
const coupons = ref([])
const searchTerm = ref('')
const statusFilter = ref('')
const typeFilter = ref('')
const showCreateModal = ref(false)
const showEditModal = ref(false)
const showDetailsModal = ref(false)
const processing = ref(false)
const selectedCoupon = ref(null)
const pagination = ref({
    current_page: 1,
    last_page: 1,
    per_page: 10,
    total: 0,
    from: 0,
    to: 0
})

const form = ref({
    id: null,
    code: '',
    description: '',
    type: '',
    value: '',
    valid_from: '',
    valid_until: '',
    usage_limit: '',
    minimum_amount: '',
    is_active: true
})

// Computed
const filteredCoupons = computed(() => {
    let filtered = coupons.value

    if (searchTerm.value) {
        const search = searchTerm.value.toLowerCase()
        filtered = filtered.filter(item =>
            item.code.toLowerCase().includes(search) ||
            (item.description && item.description.toLowerCase().includes(search))
        )
    }

    if (statusFilter.value) {
        filtered = filtered.filter(item => {
            const status = getCouponStatus(item).toLowerCase()
            return status === statusFilter.value
        })
    }

    if (typeFilter.value) {
        filtered = filtered.filter(item => item.type === typeFilter.value)
    }

    return filtered
})

// Methods
const fetchCoupons = async (page = 1) => {
    try {
        const response = await fetch(`/admin/coupons?page=${page}`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        })
        const data = await response.json()
        coupons.value = data.data
        pagination.value = {
            current_page: data.current_page,
            last_page: data.last_page,
            per_page: data.per_page,
            total: data.total,
            from: data.from,
            to: data.to
        }
    } catch (error) {
        console.error('Error fetching coupons:', error)
    }
}

const getCouponStatus = (coupon) => {
    const now = new Date()
    const validFrom = new Date(coupon.valid_from)
    const validUntil = new Date(coupon.valid_until)

    if (!coupon.is_active) return 'Inactive'
    if (now < validFrom) return 'Scheduled'
    if (now > validUntil) return 'Expired'
    if (coupon.usage_limit && coupon.used_count >= coupon.usage_limit) return 'Used Up'

    return 'Active'
}

const getCouponStatusClass = (coupon) => {
    const status = getCouponStatus(coupon)

    switch (status) {
        case 'Active': return 'bg-green-100 text-green-800'
        case 'Scheduled': return 'bg-blue-100 text-blue-800'
        case 'Expired': return 'bg-red-100 text-red-800'
        case 'Used Up': return 'bg-yellow-100 text-yellow-800'
        case 'Inactive': return 'bg-gray-100 text-gray-800'
        default: return 'bg-gray-100 text-gray-800'
    }
}

const viewCouponDetails = (coupon) => {
    selectedCoupon.value = coupon
    showDetailsModal.value = true
}

const editCoupon = (coupon) => {
    form.value = {
        id: coupon.id,
        code: coupon.code,
        description: coupon.description || '',
        type: coupon.type,
        value: coupon.value,
        valid_from: formatDateTimeLocal(coupon.valid_from),
        valid_until: formatDateTimeLocal(coupon.valid_until),
        usage_limit: coupon.usage_limit || '',
        minimum_amount: coupon.minimum_amount || '',
        is_active: coupon.is_active
    }
    showEditModal.value = true
}

const saveCoupon = async () => {
    processing.value = true

    try {
        const url = showCreateModal.value
            ? '/admin/coupons'
            : `/admin/coupons/${form.value.id}`

        const method = showCreateModal.value ? 'POST' : 'PUT'

        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify(form.value)
        })

        if (response.ok) {
            cancelEdit()
            fetchCoupons()
        } else {
            console.error('Error saving coupon')
        }
    } catch (error) {
        console.error('Error:', error)
    } finally {
        processing.value = false
    }
}

const toggleCouponStatus = async (coupon) => {
    try {
        const response = await fetch(`/admin/coupons/${coupon.id}/toggle-status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            }
        })

        if (response.ok) {
            fetchCoupons()
        }
    } catch (error) {
        console.error('Error toggling coupon status:', error)
    }
}

const deleteCoupon = async (coupon) => {
    if (confirm(`Are you sure you want to delete coupon "${coupon.code}"?`)) {
        try {
            const response = await fetch(`/admin/coupons/${coupon.id}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            })

            if (response.ok) {
                fetchCoupons()
            }
        } catch (error) {
            console.error('Error deleting coupon:', error)
        }
    }
}

const cancelEdit = () => {
    showCreateModal.value = false
    showEditModal.value = false
    form.value = {
        id: null,
        code: '',
        description: '',
        type: '',
        value: '',
        valid_from: '',
        valid_until: '',
        usage_limit: '',
        minimum_amount: '',
        is_active: true
    }
}

const previousPage = () => {
    if (pagination.value.current_page > 1) {
        fetchCoupons(pagination.value.current_page - 1)
    }
}

const nextPage = () => {
    if (pagination.value.current_page < pagination.value.last_page) {
        fetchCoupons(pagination.value.current_page + 1)
    }
}

const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString()
}

const formatDateTimeLocal = (dateString) => {
    const date = new Date(dateString)
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')
    const hours = String(date.getHours()).padStart(2, '0')
    const minutes = String(date.getMinutes()).padStart(2, '0')
    return `${year}-${month}-${day}T${hours}:${minutes}`
}

// Lifecycle
onMounted(() => {
    // Initialize dark mode
    initializeDarkMode()
    
    // Listen for dark mode changes
    window.addEventListener('storage', handleDarkModeChange)
    window.addEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
    
    fetchCoupons()
    // Set default dates
    const now = new Date()
    const tomorrow = new Date(now)
    tomorrow.setDate(tomorrow.getDate() + 1)
    const nextMonth = new Date(now)
    nextMonth.setMonth(nextMonth.getMonth() + 1)

    form.value.valid_from = formatDateTimeLocal(now.toISOString())
    form.value.valid_until = formatDateTimeLocal(nextMonth.toISOString())
})

onUnmounted(() => {
    // Remove event listeners
    window.removeEventListener('storage', handleDarkModeChange)
    window.removeEventListener('adminDarkModeChanged', handleCustomDarkModeChange)
})
</script>
