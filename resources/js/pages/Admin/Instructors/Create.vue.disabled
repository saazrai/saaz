<template>
  <AdminLayout>
    <!-- Header bar with title and back button -->
    <div :class="['px-8 py-4 rounded-lg mb-6 transition-colors', isDarkMode ? 'bg-gray-800 text-white' : 'bg-gray-800 text-white']">
      <div class="flex items-center justify-between">
        <h1 class="text-2xl font-semibold">Create Instructor</h1>
        <Link 
          :href="route('admin.instructors.index')" 
          :class="['px-4 py-2 rounded-md transition-colors', isDarkMode ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-600 hover:bg-gray-700 text-white']"
        >
          Back to Instructors
        </Link>
      </div>
    </div>

    <!-- Form -->
    <div :class="['rounded-lg shadow-sm transition-colors', isDarkMode ? 'bg-gray-800' : 'bg-white']">
      <form @submit.prevent="submit" class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Name -->
          <div>
            <label for="name" :class="['block text-sm font-medium mb-2 transition-colors', isDarkMode ? 'text-gray-200' : 'text-gray-700']">
              Name <span class="text-red-500">*</span>
            </label>
            <input
              id="name"
              v-model="form.name"
              type="text"
              required
              :class="[
                'mt-1 block w-full rounded-md shadow-sm transition-colors',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-400 focus:ring-blue-400' 
                  : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500',
                { 'border-red-500': form.errors.name }
              ]"
            />
            <div v-if="form.errors.name" class="mt-1 text-sm text-red-600">
              {{ form.errors.name }}
            </div>
          </div>

          <!-- Title -->
          <div>
            <label for="title" :class="['block text-sm font-medium mb-2 transition-colors', isDarkMode ? 'text-gray-200' : 'text-gray-700']">
              Title
            </label>
            <input
              id="title"
              v-model="form.title"
              type="text"
              placeholder="e.g. Senior Instructor, PhD"
              :class="[
                'mt-1 block w-full rounded-md shadow-sm transition-colors',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-400 focus:ring-blue-400' 
                  : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500',
                { 'border-red-500': form.errors.title }
              ]"
            />
            <div v-if="form.errors.title" class="mt-1 text-sm text-red-600">
              {{ form.errors.title }}
            </div>
          </div>

          <!-- Avatar -->
          <div class="md:col-span-2">
            <label for="avatar" :class="['block text-sm font-medium mb-2 transition-colors', isDarkMode ? 'text-gray-200' : 'text-gray-700']">
              Avatar
            </label>
            <input
              id="avatar"
              @change="handleAvatarChange"
              type="file"
              accept="image/*"
              :class="[
                'mt-1 block w-full text-sm transition-colors',
                isDarkMode 
                  ? 'text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-600 file:text-white hover:file:bg-blue-700' 
                  : 'text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100',
                { 'border-red-500': form.errors.avatar }
              ]"
            />
            <div v-if="form.errors.avatar" class="mt-1 text-sm text-red-600">
              {{ form.errors.avatar }}
            </div>
            <p :class="['mt-1 text-sm transition-colors', isDarkMode ? 'text-gray-400' : 'text-gray-500']">
              Upload an image (JPEG, PNG, JPG, GIF). Max size: 2MB.
            </p>
          </div>

          <!-- Profile -->
          <div class="md:col-span-2">
            <label for="profile" :class="['block text-sm font-medium mb-2 transition-colors', isDarkMode ? 'text-gray-200' : 'text-gray-700']">
              Profile/Bio
            </label>
            <textarea
              id="profile"
              v-model="form.profile"
              rows="6"
              placeholder="Enter instructor's biography, qualifications, experience, etc."
              :class="[
                'mt-1 block w-full rounded-md shadow-sm transition-colors',
                isDarkMode 
                  ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-400 focus:ring-blue-400' 
                  : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500',
                { 'border-red-500': form.errors.profile }
              ]"
            />
            <div v-if="form.errors.profile" class="mt-1 text-sm text-red-600">
              {{ form.errors.profile }}
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="mt-8 flex items-center justify-end gap-4">
          <Link 
            :href="route('admin.instructors.index')" 
            :class="['px-4 py-2 rounded-md transition-colors', isDarkMode ? 'text-gray-300 bg-gray-700 hover:bg-gray-600' : 'text-gray-700 bg-gray-200 hover:bg-gray-300']"
          >
            Cancel
          </Link>
          <button
            type="submit"
            :disabled="form.processing"
            :class="['px-4 py-2 rounded-md transition-colors disabled:opacity-50', isDarkMode ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-600 hover:bg-blue-700 text-white']"
          >
            <span v-if="form.processing">Creating...</span>
            <span v-else>Create Instructor</span>
          </button>
        </div>
      </form>
    </div>
  </AdminLayout>
</template>

<script setup>
import { useForm } from '@inertiajs/vue3'
import { Link } from '@inertiajs/vue3'
import { ref, onMounted, onUnmounted } from 'vue'
import AdminLayout from '@/Layouts/AdminLayout.vue'

const isDarkMode = ref(false)

const initializeDarkMode = () => {
  const saved = localStorage.getItem('adminDarkMode')
  if (saved !== null) {
    isDarkMode.value = JSON.parse(saved)
  }
}

const handleStorageChange = (e) => {
  if (e.key === 'adminDarkMode') {
    isDarkMode.value = JSON.parse(e.newValue || 'false')
  }
}

const handleDarkModeChange = (e) => {
  isDarkMode.value = e.detail
}

onMounted(() => {
  initializeDarkMode()
  window.addEventListener('storage', handleStorageChange)
  window.addEventListener('adminDarkModeChanged', handleDarkModeChange)
})

onUnmounted(() => {
  window.removeEventListener('storage', handleStorageChange)
  window.removeEventListener('adminDarkModeChanged', handleDarkModeChange)
})

const form = useForm({
  name: '',
  title: '',
  profile: '',
  avatar: null
})

function handleAvatarChange(event) {
  form.avatar = event.target.files[0]
}

function submit() {
  form.post(route('admin.instructors.store'))
}
</script>
