<template>
  <AdminLayout page-title="User Roles Management">
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 :class="['text-3xl font-bold', isDarkMode ? 'text-white' : 'text-gray-900']">User Roles Management</h1>
          <p :class="[isDarkMode ? 'text-gray-300' : 'text-gray-600']">Manage user role assignments and permissions</p>
        </div>
      </div>

      <!-- Search -->
      <div class="mb-6">
        <div class="max-w-md">
          <label for="search" class="sr-only">Search users</label>
          <div class="relative">
            <input 
              v-model="searchQuery"
              @input="search"
              type="text" 
              id="search"
              :class="[
                'block w-full pl-10 pr-3 py-2 border rounded-md leading-5 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm',
                isDarkMode 
                  ? 'bg-gray-800 border-gray-600 text-white' 
                  : 'bg-white border-gray-300 text-gray-900'
              ]"
              placeholder="Search by name or email..."
            >
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
              </svg>
            </div>
          </div>
        </div>
      </div>

      <div :class="['shadow-sm rounded-lg', isDarkMode ? 'bg-gray-800' : 'bg-white']">
        <!-- Users Table -->
        <div class="overflow-hidden">
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead :class="[isDarkMode ? 'bg-gray-700' : 'bg-gray-50']">
                <tr>
                  <th scope="col" :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                    User
                  </th>
                  <th scope="col" :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                    Current Roles
                  </th>
                  <th scope="col" :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                    Assign Role
                  </th>
                  <th scope="col" :class="['px-6 py-3 text-left text-xs font-medium uppercase tracking-wider', isDarkMode ? 'text-gray-300' : 'text-gray-500']">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody :class="['divide-y', isDarkMode ? 'bg-gray-800 divide-gray-700' : 'bg-white divide-gray-200']">
                <tr v-for="user in users.data" :key="user.id" :class="[isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50']">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                          <span class="text-sm font-medium text-indigo-700">
                            {{ user.name.charAt(0).toUpperCase() }}
                          </span>
                        </div>
                      </div>
                      <div class="ml-4">
                        <div :class="['text-sm font-medium', isDarkMode ? 'text-white' : 'text-gray-900']">{{ user.name }}</div>
                        <div :class="['text-sm', isDarkMode ? 'text-gray-400' : 'text-gray-500']">{{ user.email }}</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex flex-wrap gap-1">
                      <span 
                        v-for="role in user.roles" 
                        :key="role.id"
                        class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                        :class="getRoleColorClass(role.name)"
                      >
                        {{ role.name }}
                      </span>
                      <span v-if="user.roles.length === 0" :class="['text-sm italic', isDarkMode ? 'text-gray-500' : 'text-gray-400']">
                        No roles assigned
                      </span>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <select 
                      v-model="selectedRoles[user.id]"
                      :class="[
                        'block w-full pl-3 pr-10 py-2 text-base focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md',
                        isDarkMode 
                          ? 'bg-gray-700 border-gray-600 text-white' 
                          : 'bg-white border-gray-300 text-gray-900'
                      ]"
                    >
                      <option value="">Select a role...</option>
                      <option 
                        v-for="role in availableRoles" 
                        :key="role.id"
                        :value="role.name"
                      >
                        {{ role.name }}
                      </option>
                    </select>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                    <button
                      @click="assignRole(user)"
                      :disabled="!selectedRoles[user.id] || processing[user.id]"
                      class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <svg v-if="processing[user.id]" class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      {{ processing[user.id] ? 'Assigning...' : 'Assign' }}
                    </button>
                    
                    <button
                      v-if="user.roles.length > 0"
                      @click="showRemoveRoleModal(user)"
                      class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                    >
                      Remove Role
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Pagination -->
          <div v-if="users.links" class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div class="flex-1 flex justify-between sm:hidden">
              <Link
                v-if="users.prev_page_url"
                :href="users.prev_page_url"
                class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                Previous
              </Link>
              <Link
                v-if="users.next_page_url"
                :href="users.next_page_url"
                class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                Next
              </Link>
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p class="text-sm text-gray-700">
                  Showing {{ users.from }} to {{ users.to }} of {{ users.total }} results
                </p>
              </div>
              <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <Link
                    v-if="users.prev_page_url"
                    :href="users.prev_page_url"
                    class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    Previous
                  </Link>
                  <Link
                    v-if="users.next_page_url"
                    :href="users.next_page_url"
                    class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    Next
                  </Link>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Remove Role Modal -->
      <TransitionRoot as="template" :show="showRemoveModal">
        <Dialog as="div" class="relative z-10" @close="showRemoveModal = false">
          <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0" enter-to="opacity-100" leave="ease-in duration-200" leave-from="opacity-100" leave-to="opacity-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
          </TransitionChild>

          <div class="fixed inset-0 z-10 overflow-y-auto">
            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
              <TransitionChild as="template" enter="ease-out duration-300" enter-from="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" enter-to="opacity-100 translate-y-0 sm:scale-100" leave="ease-in duration-200" leave-from="opacity-100 translate-y-0 sm:scale-100" leave-to="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
                <DialogPanel class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                  <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                      <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                      </svg>
                    </div>
                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                      <h3 class="text-lg font-medium leading-6 text-gray-900">Remove Role</h3>
                      <div class="mt-2">
                        <p class="text-sm text-gray-500">
                          Select which role to remove from {{ selectedUser?.name }}:
                        </p>
                        <div class="mt-3">
                          <select 
                            v-model="roleToRemove"
                            class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                          >
                            <option value="">Select role to remove...</option>
                            <option 
                              v-for="role in selectedUser?.roles" 
                              :key="role.id" 
                              :value="role.name"
                            >
                              {{ role.name }}
                            </option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <button
                      @click="removeRole"
                      :disabled="!roleToRemove || removingRole"
                      type="button"
                      class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {{ removingRole ? 'Removing...' : 'Remove Role' }}
                    </button>
                    <button
                      @click="showRemoveModal = false"
                      type="button"
                      class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto"
                    >
                      Cancel
                    </button>
                  </div>
                </DialogPanel>
              </TransitionChild>
            </div>
          </div>
        </Dialog>
      </TransitionRoot>
    </div>
  </AdminLayout>
</template>

<script setup>
import { ref, reactive, computed, onMounted } from 'vue'
import { Link, router } from '@inertiajs/vue3'
import { Dialog, DialogPanel, TransitionChild, TransitionRoot } from '@headlessui/vue'
import AdminLayout from '@/Layouts/AdminLayout.vue'

const props = defineProps({
  users: Object,
  roles: Array,
  search: String
})

// Dark mode state
const isDarkMode = ref(false)

// Load dark mode preference and watch for changes
onMounted(() => {
    const saved = localStorage.getItem('adminDarkMode')
    isDarkMode.value = saved === 'true'
    
    // Watch for localStorage changes (when dark mode is toggled from AdminLayout)
    const handleStorageChange = () => {
        const saved = localStorage.getItem('adminDarkMode')
        isDarkMode.value = saved === 'true'
    }
    
    window.addEventListener('storage', handleStorageChange)
    
    // Also watch for custom events from AdminLayout
    window.addEventListener('adminDarkModeChanged', handleStorageChange)
    
    // Cleanup on unmount
    return () => {
        window.removeEventListener('storage', handleStorageChange)
        window.removeEventListener('adminDarkModeChanged', handleStorageChange)
    }
})

const searchQuery = ref(props.search || '')
const selectedRoles = reactive({})
const processing = reactive({})
const showRemoveModal = ref(false)
const selectedUser = ref(null)
const roleToRemove = ref('')
const removingRole = ref(false)

const availableRoles = computed(() => props.roles)

const search = () => {
  router.get(route('admin.user-roles'), { search: searchQuery.value }, {
    preserveState: true,
    replace: true
  })
}

const getRoleColorClass = (roleName) => {
  if (isDarkMode.value) {
    const darkColors = {
      'super-admin': 'bg-purple-900/30 text-purple-400',
      'admin': 'bg-red-900/30 text-red-400',
      'instructor': 'bg-blue-900/30 text-blue-400',
      'student': 'bg-green-900/30 text-green-400'
    }
    return darkColors[roleName] || 'bg-gray-700/30 text-gray-300'
  } else {
    const lightColors = {
      'super-admin': 'bg-purple-100 text-purple-800',
      'admin': 'bg-red-100 text-red-800',
      'instructor': 'bg-blue-100 text-blue-800',
      'student': 'bg-green-100 text-green-800'
    }
    return lightColors[roleName] || 'bg-gray-100 text-gray-800'
  }
}

const assignRole = (user) => {
  const roleName = selectedRoles[user.id]
  if (!roleName) return
  processing[user.id] = true
  router.post(route('admin.assign-role'), {
    user_id: user.id,
    role: roleName
  }, {
    onSuccess: () => {
      selectedRoles[user.id] = ''
      processing[user.id] = false
    },
    onError: () => {
      processing[user.id] = false
    }
  })
}

const showRemoveRoleModal = (user) => {
  selectedUser.value = user
  roleToRemove.value = ''
  showRemoveModal.value = true
}

const removeRole = () => {
  if (!roleToRemove.value || !selectedUser.value) return
  removingRole.value = true
  router.delete(route('admin.remove-role'), {
    data: {
      user_id: selectedUser.value.id,
      role: roleToRemove.value
    },
    onSuccess: () => {
      showRemoveModal.value = false
      selectedUser.value = null
      roleToRemove.value = ''
      removingRole.value = false
    },
    onError: () => {
      removingRole.value = false
    }
  })
}
</script>
